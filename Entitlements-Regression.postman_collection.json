{
	"info": {
		"_postman_id": "b1d0f1c3-fd51-47c3-88df-c0fbc99be08c",
		"name": "Entitlements-Regression",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SMOKE",
			"item": [
				{
					"name": "S-GET",
					"item": [
						{
							"name": "Get Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"To check product details: \" + responseJSONdata.length, function () {\r",
											"    for (i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i].isActive).to.eql(true);\r",
											"\r",
											"    }\r",
											"});\r",
											"// var array_code = [];\r",
											"for (i = 0; i < responseJSONdata.length; i++)\r",
											"{\r",
											"    pm.test(\"To check product code: \" + responseJSONdata[i].code, function () {\r",
											"        // array_code[i] = responseJSONdata[i].code;\r",
											"        pm.expect(responseJSONdata[i].code).to.be.oneOf(['APP', 'AR','DIGI','INBLOCK','INMATCH','INS','MO','PARM','PTS','PUT','SCF','BI','ABF','ONB']); \r",
											"    });\r",
											"}\r",
											"// pm.variables.set(\"array_code\", array_code);\r",
											"// pm.environment.set(\"array_code\", array_code);\r",
											"// console.log(array_code);\r",
											"// pm.environment.get(\"array_code\");\r",
											"// console.log(array_code);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/products",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"products"
									],
									"query": [
										{
											"key": "productCode",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Users",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"To check user details: \" + responseJSONdata.length, function () {\r",
											"    pm.expect(responseJSONdata.id).not.to.eql(null);\r",
											"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
											"    pm.expect(responseJSONdata.length).to.be.below(101);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/users?count=100",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "count",
											"value": "100"
										}
									]
								},
								"description": "Get users (ALL users for ALL products)"
							},
							"response": []
						},
						{
							"name": "Get Users/Id sign-ins",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedUserId = pm.variables.get(\"UserId\");\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Validating sign-ins format from response body \", function () {\r",
											"    for (i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'failureReason','eventDate','city','state','country','errorCode');\r",
											"    }\r",
											"}); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');",
											"var timeToday = moment.utc().format('YYYY-MM-DD');",
											"console.log(\"timeToday time: \" + timeToday)",
											"pm.variables.set(\"timeToday\", timeToday);",
											"",
											"var timeYesterday = moment().subtract(30, \"days\").format(\"YYYY-MM-DD\");",
											"console.log(\"timeYesterday time: \" + timeYesterday)",
											"pm.variables.set(\"timeYesterday\", timeYesterday);",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/users?count=5000&productCode=MO\");",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")",
											"    }",
											"}, function (err, res) {",
											"    var jsonData = res.json();",
											"    console.log(\"-- \" + jsonData.length);",
											"    for (i = 0; i < jsonData.length; i++) {",
											"        if (jsonData[i].userName.includes(pm.environment.get(\"platformUser\"))) {",
											"            pm.variables.set(\"UserId\", jsonData[i].id);",
											"            console.log(pm.variables.get(\"UserId\"));",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/users/{{UserId}}/sign-ins?dateFrom={{timeYesterday}}&dateTo={{timeToday}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"{{UserId}}",
										"sign-ins"
									],
									"query": [
										{
											"key": "dateFrom",
											"value": "{{timeYesterday}}"
										},
										{
											"key": "dateTo",
											"value": "{{timeToday}}"
										}
									]
								},
								"description": "(This will include the company info)"
							},
							"response": []
						},
						{
							"name": "Get Companies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check company details for total companies: \"+jsonData.length, function () {\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        pm.expect(jsonData[i].id).to.not.eql(null);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Validating companies format from response body \", function () {\r",
											"    pm.expect(jsonData[0]).to.have.any.keys('id', 'salesforceId', 'name', 'dba', 'isActive', 'updatedOn', 'users', 'phone');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/companies?format=company-only",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "format",
											"value": "company-only"
										},
										{
											"key": "productCode",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "(for ALL products)"
							},
							"response": []
						},
						{
							"name": "Get Company Entitlements",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var cid = pm.environment.get(\"Company_Id_G\");",
											"",
											"// var url = pm.variables.get(\"baseURI\");",
											"// url = url.concat(\"/api/companies/\"+cid);",
											"",
											"// pm.sendRequest({",
											"//     url: url,",
											"//     method: 'GET',",
											"//     header: {",
											"//         'Accept': 'application/json',",
											"//         'Content-Type': 'application/json',",
											"//         'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
											"//       }",
											"      ",
											"// }, function (err, res) {",
											"//     var jsonData = res.json();",
											"//     pm.variables.set(\"CompanyId\", jsonData.id);",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expCompanyId = pm.environment.get(\"Company_Id_G\");\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(expCompanyId);\r",
											"\r",
											"pm.test(\"To check /companies/\" + expCompanyId + \"/entitlements returns entitlement : \"   , function ()\r",
											"{\r",
											"    for(var i=0; i<jsonData.length;i++)\r",
											"    {\r",
											"        pm.expect(jsonData[i].companyId).to.deep.eql(parseInt(expCompanyId));\r",
											"    }\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{Company_Id_G}}/entitlements",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{Company_Id_G}}",
										"entitlements"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get UserPermissions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var rid= pm.variables.get(\"roldeId\");",
											"// var rname = pm.variables.get(\"roleName\");",
											"// var pid= pm.variables.get(\"participantId\");",
											"// var iactive= pm.variables.get(\"isActive\");",
											"// var cid= pm.variables.get(\"Company_Id_G\");",
											"// var pcode= pm.variables.get(\"productCode\");",
											"",
											"// var url = pm.variables.get(\"baseURI\");",
											"// url = url.concat(\"/api/ProductRoles?command=update-status\");",
											"",
											"// pm.sendRequest({",
											"//     url: url,",
											"//     method: 'PUT',",
											"//     header: {",
											"",
											"//         'Content-Type': 'application/json',",
											"//         'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"//     },",
											"//     body: {",
											"//         mode: 'raw',",
											"//         raw: [{",
											"//             //for nombeta2",
											"//             \"participantId\": pid,",
											"//             \"isActive\": true,",
											"//             \"companyId\": cid,",
											"//             \"productCode\": pcode,",
											"//             \"roleId\": rid,",
											"//             \"roleName\": rname",
											"//            }]",
											"//     }",
											"",
											"// }, function (err, res) {",
											"//     if (err) { console.log(err); }",
											"//     console.log(\"Product role activated again\");",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"var UserId = pm.environment.get(\"User_Id_G\");\r",
											"console.log(UserId);\r",
											"\r",
											"pm.test(\"To check user permissions\", function () {\r",
											"    for (i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i].productCode).to.be.oneOf([\"AR\", \"SCF\", \"INS\",\"MO\"]);\r",
											"        pm.expect(responseJSONdata[i].entityType).to.eql(\"Company\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{User_Id_G}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{User_Id_G}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET baseratetypes - hasCompleteValues=true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check baseratetypes details: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].baseRateTypeCode).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating baseratetypes format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('baseRateTypeCode', 'description','tenorTerms','isManual','source');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI_plat}}/api/baseratetypes?hasCompleteValues=true",
									"host": [
										"{{baseURI_plat}}"
									],
									"path": [
										"api",
										"baseratetypes"
									],
									"query": [
										{
											"key": "hasCompleteValues",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET platform-currencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check baseratetypes details: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].baseRateTypeCode).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating baseratetypes format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('currencyCode', 'name');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI_plat}}/api/platform-currencies",
									"host": [
										"{{baseURI_plat}}"
									],
									"path": [
										"api",
										"platform-currencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//try {\r",
											"if (pm.response.code == 200 && responseBody !== '') {\r",
											"    var responseJSONdata = JSON.parse(responseBody);\r",
											"    pm.test(\"To check group details not null: \" + responseJSONdata.length, function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"        }\r",
											"    })\r",
											"    pm.test(\"Validating group format from response body \", function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i]).to.have.any.keys('id', 'name', 'groupType', 'numberOfCompanies', 'recordType');\r",
											"        }\r",
											"    });\r",
											"}\r",
											"// }\r",
											"// catch (e) {\r",
											"//     pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"// }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Groups?count=100&skip=0",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Groups"
									],
									"query": [
										{
											"key": "count",
											"value": "100"
										},
										{
											"key": "skip",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Realtionships productCode=AR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200 && responseBody !== '') {\r",
											"    var responseJSONdata = JSON.parse(responseBody);\r",
											"    pm.test(\"To check record-types details not null: \" + responseJSONdata.length, function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"        }\r",
											"    });\r",
											"    pm.test(\"To check productCode 'AR' \" , function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].productCode).to.eql(\"AR\");\r",
											"        }\r",
											"    });\r",
											"    pm.test(\"Validating record-types format from response body \", function () {\r",
											"     //   for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[0]).to.have.any.keys('id', 'productCode', 'buyerId', 'buyerName', 'supplierId', 'supplierName', 'currencyCode', 'descOfGoodsServices', 'startDate', 'retainedDays', 'incoTerms', 'invoiceDueDateAdjustmentId','invoiceDueDateAdjustement','paymentTerms',  'governingLawId',\r",
											"        'governingLaw', 'additionalDetails', 'regionCode', 'statusId', 'status', 'disclosureTypeId','isPayablesEligible',\r",
											"        'recordTypeId','recordType', 'incoTermsTypeId', 'salesforceId', 'annualSales','calendars');\r",
											"       // }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/relationships?relationshipTypeId=2",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"relationships"
									],
									"query": [
										{
											"key": "relationshipTypeId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get platforms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating platform format from response body \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.any.keys('code', 'name', 'isActive', 'platformUrl');\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Validating decimalPrecision to default to 4 or not null\", function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    if( jsonData[i].decimalPrecision == 4)\r",
											"    { \r",
											"        pm.expect(jsonData[i].decimalPrecision).to.be.eql(4);\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        pm.expect(jsonData[i].decimalPrecision).not.eql(null);\r",
											"\r",
											"    }\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/platforms?count=100&skip=0",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms"
									],
									"query": [
										{
											"key": "count",
											"value": "100"
										},
										{
											"key": "skip",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if(pm.response.code == 200)",
									"{",
									"    console.log(\"responseBody\", responseBody);",
									"    if (responseBody != null)",
									"    {",
									"        if (responseBody =='[]' || responseBody == '{}')",
									"        {",
									"             tests[\"Body is empty \" + responseBody]= false;",
									"        }",
									"        else {",
									"          tests[\"Body is not empty\"]= true;",
									"        }",
									"    }",
									"    else",
									"    {",
									"          tests[\"Body is empty\" + responseBody]= false;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "S-POST",
					"item": [
						{
							"name": "POST Group",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"groupName\", randomS);\r",
											"\r",
											"// pm.variables.set(\"recordType\", \"Local\");\r",
											"// pm.variables.set(\"groupType\", \"Corporate Family\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"groupName\");\r",
											"\r",
											"pm.environment.set(\"newGroup_Local\", jsonData.id);\r",
											"\r",
											"pm.test(\"To check new group created: \" + jsonData.id, function () {\r",
											"    pm.expect(jsonData.name).to.eql('EntlRegAPIGroup_' + suffix);\r",
											"    // pm.expect(jsonData.recordType).to.eql(\"Local\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n//   \"id\": 88888,\r\n  \"name\": \"EntlRegAPIGroup_{{groupName}}\"\r\n//   \"recordType\": \"{{recordType}}\",\r\n//   \"groupType\": \"{{groupType}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Groups",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Company_SCFSupplier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);\r",
											"pm.variables.set(\"recordTypeId\", 1);\r",
											"\r",
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        {\r",
											"            var countryName =  jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \"+countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"code1\", countryCode);\r",
											"            console.log(\"country code: \"+countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        console.log(\"state Name: \"+stateName);\r",
											"        var stateId = jsonData[0].id;\r",
											"        console.log(\"state Id: \"+stateId);\r",
											"        pm.variables.set(\"stateRegion\", stateName);    \r",
											"        pm.variables.set(\"stateRegionId\", stateId);        \r",
											"\r",
											"       \r",
											"        var url2 = pm.variables.get(\"baseURI\");\r",
											"        url2 = url2.concat(\"/api/institution-types\");\r",
											"        pm.sendRequest({\r",
											"        url: url2,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        }, function (err, res) {\r",
											"            var jsonData = res.json();\r",
											"            var institutionType = jsonData[0].id;\r",
											"            console.log(\"institutionType id: \"+institutionType);\r",
											"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
											"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
											"\r",
											"            var url3 = pm.variables.get(\"baseURI\");\r",
											"            url3 = url3.concat(\"/api/sectors\");\r",
											"            pm.sendRequest({\r",
											"            url: url3,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var sectorId = jsonData[5].id;\r",
											"                console.log(\"sector id: \"+sectorId);\r",
											"                console.log(\"sector name: \"+jsonData[5].name);\r",
											"                pm.variables.set(\"sectorId\", sectorId);   \r",
											"                \r",
											"                var url4 = pm.variables.get(\"baseURI\");\r",
											"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
											"                pm.sendRequest({\r",
											"                url: url4,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var industryId = jsonData[0].id;\r",
											"                    console.log(\"industry Id : \"+industryId);\r",
											"                    console.log(\"industry name: \"+jsonData[0].name);\r",
											"                    pm.variables.set(\"industryId\", industryId);   \r",
											"\r",
											"                }); \r",
											"            }); \r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for newly created company is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.id;\r",
											"\r",
											"pm.environment.set(\"newSupplierCompanySCF_Local\", expCmpId);\r",
											"pm.environment.set(\"newSupplierCompanySCFName_Local\",jsonData.legalEntityName);\r",
											"\r",
											"pm.test(\"To check new company is created: \" + expCmpId, function () {\r",
											"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegSCFSupplier_' + suffix);\r",
											"});\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"/update-status?command=activate\";\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'PUT',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: {\r",
											"           \r",
											"            \"id\": expCmpId,                                       \r",
											"        }\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check activate company has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    var url2 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+expCmpId;\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        var jsonData1 = res.json();\r",
											"                    \r",
											"        pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
											"            pm.expect(jsonData1.isActive).to.eql(true);\r",
											"\r",
											"        });\r",
											"            \r",
											"\r",
											"    var url3 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+expCmpId+\"/roles\";\r",
											"        pm.sendRequest({\r",
											"        url: url3,\r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: [\r",
											"                    {\r",
											"                        \"companyId\": expCmpId,\r",
											"                        \"participantId\":0,\r",
											"                        \"isActive\": true,\r",
											"                        \"productCode\":\"SCF\",\r",
											"                        \"roleId\":3,\r",
											"                        \"roleName\":\"Supply Chain Finance - Supplier\"\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"\r",
											"            pm.test(\"To check add participant has response 204\", function () {\r",
											"                pm.expect(res.code).to.eql(204);      \r",
											"            });\r",
											"        });\r",
											"    });\r",
											" });\r",
											"    //     var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"    //     pm.sendRequest({\r",
											"    //     url: url1,\r",
											"    //     method: 'POST',\r",
											"    //     header: {\r",
											"    //         'Content-Type': 'application/json',\r",
											"    //         'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"    //        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    //     },\r",
											"    //     body: {\r",
											"    //         mode: 'raw',\r",
											"    //         raw: {\r",
											"                                                    \r",
											"    //             }\r",
											"    //         }\r",
											"    //     }, function (err, res) {\r",
											"    //         if (err) { console.log(url + err); }\r",
											"    \r",
											"    //         });\r",
											"            \r",
											"    //  pm.expect(jsonData1.recordTypeId).to.eql(1);   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"legalEntityName\": \"EntlRegSCFSupplier_{{entityName}}\",\r\n    \"name\": \"EntlRegSCFSupplier_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Company_SCFBuyer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);\r",
											"pm.variables.set(\"recordTypeId\", 1);\r",
											"\r",
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        {\r",
											"            var countryName =  jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \"+countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"code1\", countryCode);\r",
											"            console.log(\"country code: \"+countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        console.log(\"state Name: \"+stateName);\r",
											"        var stateId = jsonData[0].id;\r",
											"        console.log(\"state Id: \"+stateId);\r",
											"        pm.variables.set(\"stateRegion\", stateName);    \r",
											"        pm.variables.set(\"stateRegionId\", stateId);    \r",
											"\r",
											"       \r",
											"        var url2 = pm.variables.get(\"baseURI\");\r",
											"        url2 = url2.concat(\"/api/institution-types\");\r",
											"        pm.sendRequest({\r",
											"        url: url2,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        }, function (err, res) {\r",
											"            var jsonData = res.json();\r",
											"            var institutionType = jsonData[0].id;\r",
											"            console.log(\"institutionType id: \"+institutionType);\r",
											"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
											"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
											"\r",
											"            var url3 = pm.variables.get(\"baseURI\");\r",
											"            url3 = url3.concat(\"/api/sectors\");\r",
											"            pm.sendRequest({\r",
											"            url: url3,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var sectorId = jsonData[5].id;\r",
											"                console.log(\"sector id: \"+sectorId);\r",
											"                console.log(\"sector name: \"+jsonData[5].name);\r",
											"                pm.variables.set(\"sectorId\", sectorId);   \r",
											"                \r",
											"                var url4 = pm.variables.get(\"baseURI\");\r",
											"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
											"                pm.sendRequest({\r",
											"                url: url4,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var industryId = jsonData[0].id;\r",
											"                    console.log(\"industry Id : \"+industryId);\r",
											"                    console.log(\"industry name: \"+jsonData[0].name);\r",
											"                    pm.variables.set(\"industryId\", industryId);   \r",
											"\r",
											"                }); \r",
											"            }); \r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for newly created company is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.id;\r",
											"\r",
											"pm.environment.set(\"newBuyerCompanySCF_Local\", expCmpId);\r",
											"pm.environment.set(\"newBuyerCompanySCFName_Local\",jsonData.legalEntityName);\r",
											"\r",
											"pm.test(\"To check new company is created: \" + expCmpId, function () {\r",
											"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegSCFBuyer_' + suffix);\r",
											"});\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"/update-status?command=activate\";\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'PUT',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: {\r",
											"           \r",
											"            \"id\": expCmpId,                                       \r",
											"        }\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check activate company has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    var url2 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+expCmpId;\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        var jsonData1 = res.json();\r",
											"                    \r",
											"        pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
											"            pm.expect(jsonData1.isActive).to.eql(true);\r",
											"\r",
											"        });\r",
											"\r",
											"       var url3 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+expCmpId+\"/roles\";\r",
											"        pm.sendRequest({\r",
											"        url: url3,\r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: [\r",
											"                    {\r",
											"                        \"companyId\": expCmpId,\r",
											"                        \"participantId\":0,\r",
											"                        \"isActive\": true,\r",
											"                        \"productCode\":\"SCF\",\r",
											"                        \"roleId\":1,\r",
											"                        \"roleName\":\"Supply Chain Finance - Buyer\"\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"\r",
											"                pm.test(\"To check add participant has response 204\", function () {\r",
											"                    pm.expect(res.code).to.eql(204);      \r",
											"                });\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"    //     var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"    //     pm.sendRequest({\r",
											"    //     url: url1,\r",
											"    //     method: 'POST',\r",
											"    //     header: {\r",
											"    //         'Content-Type': 'application/json',\r",
											"    //         'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"    //         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    //     },\r",
											"    //     body: {\r",
											"    //         mode: 'raw',\r",
											"    //         raw: {\r",
											"                                                    \r",
											"    //             }\r",
											"    //         }\r",
											"    //     }, function (err, res) {\r",
											"    //         if (err) { console.log(url + err); }\r",
											"    \r",
											"    //         });\r",
											"            \r",
											"        "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"legalEntityName\": \"EntlRegSCFBuyer_{{entityName}}\",\r\n    \"name\": \"EntlRegSCFBuyer_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Company_SCFFunder1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);\r",
											"pm.variables.set(\"recordTypeId\", 1);\r",
											"\r",
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        {\r",
											"            var countryName =  jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \"+countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"code1\", countryCode);\r",
											"            console.log(\"country code: \"+countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        console.log(\"state Name: \"+stateName);\r",
											"        var stateId = jsonData[0].id;\r",
											"        console.log(\"state Id: \"+stateId);\r",
											"        pm.variables.set(\"stateRegion\", stateName);    \r",
											"        pm.variables.set(\"stateRegionId\", stateId);     \r",
											"\r",
											"    \r",
											"        var url2 = pm.variables.get(\"baseURI\");\r",
											"        url2 = url2.concat(\"/api/institution-types\");\r",
											"        pm.sendRequest({\r",
											"        url: url2,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        }, function (err, res) {\r",
											"            var jsonData = res.json();\r",
											"            var institutionType = jsonData[0].id;\r",
											"            console.log(\"institutionType id: \"+institutionType);\r",
											"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
											"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
											"\r",
											"            var url3 = pm.variables.get(\"baseURI\");\r",
											"            url3 = url3.concat(\"/api/sectors\");\r",
											"            pm.sendRequest({\r",
											"            url: url3,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var sectorId = jsonData[5].id;\r",
											"                console.log(\"sector id: \"+sectorId);\r",
											"                console.log(\"sector name: \"+jsonData[5].name);\r",
											"                pm.variables.set(\"sectorId\", sectorId);   \r",
											"                \r",
											"                var url4 = pm.variables.get(\"baseURI\");\r",
											"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
											"                pm.sendRequest({\r",
											"                url: url4,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var industryId = jsonData[0].id;\r",
											"                    console.log(\"industry Id : \"+industryId);\r",
											"                    console.log(\"industry name: \"+jsonData[0].name);\r",
											"                    pm.variables.set(\"industryId\", industryId);   \r",
											"\r",
											"                }); \r",
											"            }); \r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for newly created company is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.id;\r",
											"\r",
											"pm.environment.set(\"newFunderCompanySCF_Local1\", expCmpId);\r",
											"pm.environment.set(\"newFunderCompanySCFName_Local1\",jsonData.legalEntityName);\r",
											"\r",
											"pm.test(\"To check new company is created: \" + expCmpId, function () {\r",
											"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegSCFFunder1_' + suffix);\r",
											"});\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"/update-status?command=activate\";\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'PUT',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: {\r",
											"           \r",
											"            \"id\": expCmpId,                                       \r",
											"        }\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check activate company has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    var url2 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+expCmpId;\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        var jsonData1 = res.json();\r",
											"                    \r",
											"        pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
											"            pm.expect(jsonData1.isActive).to.eql(true);\r",
											"\r",
											"        });\r",
											"\r",
											"        var url3 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+expCmpId+\"/roles\";\r",
											"        pm.sendRequest({\r",
											"        url: url3,\r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: [\r",
											"                    {\r",
											"                        \"companyId\": expCmpId,\r",
											"                        \"participantId\":0,\r",
											"                        \"isActive\": true,\r",
											"                        \"productCode\":\"SCF\",\r",
											"                        \"roleId\":5,\r",
											"                        \"roleName\":\"Supply Chain Finance - Funder\"\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"\r",
											"        pm.test(\"To check add participant has response 204\", function () {\r",
											"            pm.expect(res.code).to.eql(204);      \r",
											"        });\r",
											"\r",
											"    //     var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"    //     pm.sendRequest({\r",
											"    //     url: url1,\r",
											"    //     method: 'POST',\r",
											"    //     header: {\r",
											"    //         'Content-Type': 'application/json',\r",
											"    //         'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"    //         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    //     },\r",
											"    //     body: {\r",
											"    //         mode: 'raw',\r",
											"    //         raw: {\r",
											"                                                    \r",
											"    //             }\r",
											"    //         }\r",
											"    //     }, function (err, res) {\r",
											"    //         if (err) { console.log(url + err); }\r",
											"    \r",
											"    //         });\r",
											"            \r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"legalEntityName\": \"EntlRegSCFFunder1_{{entityName}}\",\r\n    \"name\": \"EntlRegSCFFunder1_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Company_SCFFunder2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);\r",
											"pm.variables.set(\"recordTypeId\", 1);\r",
											"\r",
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        {\r",
											"            var countryName =  jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \"+countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"code1\", countryCode);\r",
											"            console.log(\"country code: \"+countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        console.log(\"state Name: \"+stateName);\r",
											"        var stateId = jsonData[0].id;\r",
											"        console.log(\"state Id: \"+stateId);\r",
											"        pm.variables.set(\"stateRegion\", stateName);    \r",
											"        pm.variables.set(\"stateRegionId\", stateId);    \r",
											"        \r",
											"        var url2 = pm.variables.get(\"baseURI\");\r",
											"        url2 = url2.concat(\"/api/institution-types\");\r",
											"        pm.sendRequest({\r",
											"        url: url2,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        }, function (err, res) {\r",
											"            var jsonData = res.json();\r",
											"            var institutionType = jsonData[0].id;\r",
											"            console.log(\"institutionType id: \"+institutionType);\r",
											"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
											"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
											"\r",
											"            var url3 = pm.variables.get(\"baseURI\");\r",
											"            url3 = url3.concat(\"/api/sectors\");\r",
											"            pm.sendRequest({\r",
											"            url: url3,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var sectorId = jsonData[5].id;\r",
											"                console.log(\"sector id: \"+sectorId);\r",
											"                console.log(\"sector name: \"+jsonData[5].name);\r",
											"                pm.variables.set(\"sectorId\", sectorId);   \r",
											"                \r",
											"                var url4 = pm.variables.get(\"baseURI\");\r",
											"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
											"                pm.sendRequest({\r",
											"                url: url4,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var industryId = jsonData[0].id;\r",
											"                    console.log(\"industry Id : \"+industryId);\r",
											"                    console.log(\"industry name: \"+jsonData[0].name);\r",
											"                    pm.variables.set(\"industryId\", industryId);   \r",
											"\r",
											"                }); \r",
											"            }); \r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for newly created company is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.id;\r",
											"\r",
											"pm.environment.set(\"newFunderCompanySCF_Local2\", expCmpId);\r",
											"pm.environment.set(\"newFunderCompanySCFName_Local2\",jsonData.legalEntityName);\r",
											"\r",
											"pm.test(\"To check new company is created: \" + expCmpId, function () {\r",
											"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegSCFFunder2_' + suffix);\r",
											"});\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"/update-status?command=activate\";\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'PUT',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: {\r",
											"           \r",
											"            \"id\": expCmpId,                                       \r",
											"        }\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check activate company has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    var url2 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+expCmpId;\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        var jsonData1 = res.json();\r",
											"                    \r",
											"        pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
											"            pm.expect(jsonData1.isActive).to.eql(true);\r",
											"\r",
											"        });\r",
											"\r",
											"        var url3 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+expCmpId+\"/roles\";\r",
											"        pm.sendRequest({\r",
											"        url: url3,\r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: [\r",
											"                    {\r",
											"                        \"companyId\": expCmpId,\r",
											"                        \"participantId\":0,\r",
											"                        \"isActive\": true,\r",
											"                        \"productCode\":\"SCF\",\r",
											"                        \"roleId\":5,\r",
											"                        \"roleName\":\"Supply Chain Finance - Funder\"\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"\r",
											"        pm.test(\"To check add participant has response 204\", function () {\r",
											"            pm.expect(res.code).to.eql(204);      \r",
											"        });\r",
											"\r",
											"    //     var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"    //     pm.sendRequest({\r",
											"    //     url: url1,\r",
											"    //     method: 'POST',\r",
											"    //     header: {\r",
											"    //         'Content-Type': 'application/json',\r",
											"    //         'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"    //         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    //     },\r",
											"    //     body: {\r",
											"    //         mode: 'raw',\r",
											"    //         raw: {\r",
											"                                                    \r",
											"    //             }\r",
											"    //         }\r",
											"    //     }, function (err, res) {\r",
											"    //         if (err) { console.log(url + err); }\r",
											"    \r",
											"    //         });\r",
											"            \r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"legalEntityName\": \"EntlRegSCFFunder2_{{entityName}}\",\r\n    \"name\": \"EntlRegSCFFunder2_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Realtionships_SCF",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"productCodeSCF\", \"SCF\");\r",
											"pm.variables.set(\"currencyCode\", \"USD\");\r",
											"\r",
											"pm.variables.set(\"relationshipTypeId\",1); //SCF=1, AR=2, INBLOCK=3\r",
											"\r",
											"var moment = require('moment');\r",
											"var timeT = moment.utc().format();\r",
											"console.log(\"Current time: \" + timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											" \r",
											"pm.variables.set(\"SCFSupplierName\", pm.environment.get(\"newSupplierCompanySCFName_Local\"));\r",
											"pm.variables.set(\"SCFBuyerName\", pm.environment.get(\"newBuyerCompanySCFName_Local\"));\r",
											"\r",
											"console.log(\"SCFSupplierName ----> \"+  pm.variables.get(\"SCFSupplierName\"));\r",
											"console.log(\"SCFBuyerName ----> \"+  pm.variables.get(\"SCFBuyerName\"));\r",
											"\r",
											"var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeSCF\") +\"&companyName=\"+pm.environment.get(\"newSupplierCompanySCFName_Local\") ;//assign supplier\r",
											"pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    var jsonData = res.json();\r",
											"\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].name === pm.variables.get(\"SCFSupplierName\") && jsonData[i].roleId === 3) \r",
											"        {\r",
											"            pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
											"            console.log(\"supplierId1\", jsonData[i].id);\r",
											"            pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Debtor&isActive=true&productCode=\" + pm.variables.get(\"productCodeSCF\") +\"&companyName=\"+pm.environment.get(\"newBuyerCompanySCFName_Local\") ;//assign buyer\r",
											"    pm.sendRequest({\r",
											"        url: url3,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"        var jsonData = res.json();\r",
											"        for (var i = 0; i < jsonData.length; i++) {\r",
											"            if (jsonData[i].name === pm.variables.get(\"SCFBuyerName\") && jsonData[i].roleId === 1) \r",
											"            {\r",
											"                pm.variables.set(\"buyerId\", jsonData[i].id);\r",
											"                console.log(\"buyerId\", jsonData[i].id);\r",
											"                pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var relationshipId = jsonData.id;\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check update /api/Relationships/id has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"    \r",
											"    var jsonData1 = res.json();\r",
											"                \r",
											"    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
											"        pm.expect(jsonData1.productCode).to.eql(\"SCF\");\r",
											"        pm.expect(jsonData1.status).to.eql(\"Active\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}},\r\n        \"name\": \"Supply Chain Finance (Supplier-Buyer)\",\r\n        \"productCode\": \"{{productCodeSCF}}\"\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"productCode\": \"{{productCodeSCF}}\",\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 266,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"startDate\": \"{{currentTime}}\"\r\n \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Relationships",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Relationships"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Group - Add_Remove Companies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Groups?count=1000&skip=0\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].id == pm.environment.get(\"newGroup_Local\"))\r",
											"        {\r",
											"            var gId =  jsonData[i].id;\r",
											"            var gName =  jsonData[i].name;\r",
											"            console.log(\"Group Id: \"+gId);\r",
											"            console.log(\"Group name: \"+gName);\r",
											"            // pm.variables.set(\"groupId\", gId);\r",
											"            pm.variables.set(\"groupName\", gName);\r",
											"            console.log(pm.variables.get(\"groupName\"));\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204,200,201]);\r",
											"    // pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"var expGrpId = pm.environment.get(\"newGroup_Local\");\r",
											"var expGrpName = pm.variables.get(\"groupName\");\r",
											"// var expCompanyId = pm.variables.get(\"companyId1\");\r",
											"\r",
											"console.log(\"expected group id: \"+expGrpId);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Groups/\"+expGrpId);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    \r",
											"    pm.test(\"Verifying expected group id after adding company: \"+jsonData.id, function () {\r",
											"        pm.expect(jsonData.id).to.eql(expGrpId);\r",
											"    });\r",
											"});\r",
											"    //removing newly added company from group\r",
											"\r",
											"    // var url1 = pm.variables.get(\"baseURI\");\r",
											"    // url1 = url1.concat(\"/api/Groups/\"+expGrpId);\r",
											"\r",
											"    // pm.sendRequest({\r",
											"    //     url: url1,\r",
											"    //     method: 'PUT',\r",
											"    //     header: {\r",
											"    //         'Content-Type': 'application/json',\r",
											"    //         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    //     },\r",
											"    //     body: {\r",
											"    //         mode: 'raw',\r",
											"    //         raw: {\r",
											"    //                 \"id\": expGrpId,\r",
											"    //                 \"name\": expGrpName,\r",
											"    //                 \"companyIds\": [\r",
											"                        \r",
											"    //                 ]\r",
											"    //         }\r",
											"\r",
											"    //     }\r",
											"    // }, function (err, res) {\r",
											"    //     if (err) { console.log(err); }\r",
											"        \r",
											"    //     var url2 = pm.variables.get(\"baseURI\");\r",
											"    //     url2 = url2.concat(\"/api/Groups/\"+expGrpId);\r",
											"\r",
											"    //     pm.sendRequest({\r",
											"    //         url: url,\r",
											"    //         method: 'GET',\r",
											"    //         header: {\r",
											"    //             'Accept': 'application/json',\r",
											"    //             'Content-Type': 'application/json',\r",
											"    //             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    //         }\r",
											"    //     }, function (err, res) {\r",
											"    //         var jsonData = res.json();\r",
											"            \r",
											"    //         pm.test(\"Verifying expected group id after removing company: \"+jsonData.id, function () {\r",
											"    //             pm.expect(jsonData.id).to.eql(expGrpId);\r",
											"    //         });\r",
											"\r",
											"    // });\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{newGroup_Local}},\r\n  \"name\": \"{{groupName}}\",\r\n  \"companyIds\": [\r\n   {{newSupplierCompanySCF_Local}},{{newBuyerCompanySCF_Local}},{{newFunderCompanySCF_Local1}},{{newFunderCompanySCF_Local2}}\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Groups/{{newGroup_Local}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Groups",
										"{{newGroup_Local}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');",
											"var timeToday = moment.utc().format('DDMMYY');",
											"",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");",
											"function getRandomAlphaNumeric(len, chars) {",
											"    var result = '';",
											"    for (var i = len; i > 0; i--)",
											"    { ",
											"     result += chars[Math.floor(Math.random() * chars.length)];",
											"    }",
											"     return result;",
											"}",
											"var randomS = timeToday+\"_\"+cRandom;",
											"pm.variables.set(\"U_ID\", randomS);",
											"",
											"var companyId = pm.environment.get(\"Company_Id_G\") ; ",
											"pm.variables.set(\"companyId\", companyId);",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\"+ companyId );",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
											"      }",
											"}, ",
											"function (err, res) {",
											"    if (err) {console.log(\"error :\" + err); }",
											"    var jsonData = res.json();",
											"    console.log(jsonData);",
											"",
											"    pm.variables.set(\"cid\", jsonData.id);",
											"    pm.variables.set(\"salesforceId\", jsonData.salesforceId);",
											"    pm.variables.set(\"name\", jsonData.name);",
											"    pm.variables.set(\"country\", jsonData.country);",
											"    pm.variables.set(\"stateOfIncorporation\", jsonData.stateOfIncorporation);",
											"    pm.variables.set(\"countryOfJurisdiction\", jsonData.countryOfJurisdiction);",
											"    pm.variables.set(\"isActive\", jsonData.isActive);",
											"    pm.variables.set(\"updatedOn\", jsonData.updatedOn);",
											"    pm.variables.set(\"users\", jsonData.users);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var Id = pm.variables.get(\"U_ID\");",
											"",
											"pm.test(\"To check user is created: \" + jsonData.id, function () {",
											"    pm.expect(jsonData.userName).to.eql('lqxnga+EntlReg_' + Id+'@gmail.com');",
											"});",
											"var nu = jsonData.id;",
											"pm.environment.set(\"UserID_new\", nu);",
											"console.log(pm.environment.get(\"UserID_new\"))",
											"var newID = pm.environment.get(\"UserID_new\");",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/users/\" + newID +\"?command=activate\");",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'PUT',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code' : pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"    },body: {",
											"        mode: 'raw',",
											"        raw: {",
											"            \"id\": newID,",
											"            }",
											"            } ",
											"    },",
											"    function (err, res) {",
											"        if (err) { console.log(\"error :\" + err); }",
											"        pm.test(\"To check user activate response is 200\", function () {",
											"        pm.expect(res.code).to.eql(200);      ",
											"    });",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"isPortalUser\": false,\r\n    \"isPlatformUser\": false,\r\n    \"companyId\": {{companyId}},\r\n    \"firstName\": \"apiFN\",\r\n    \"middleInitial\": \"U\",\r\n    \"lastName\": \"apiLN {{U_ID}}\",\r\n    \"title\": \"QA\",\r\n    \"workPhone\": \"7654323467\",\r\n    \"employeeId\": \"111\",\r\n    \"email\": \"lqxnga+EntlReg_{{U_ID}}@gmail.com\",\r\n    \"userName\": \"lqxnga+EntlReg_{{U_ID}}@gmail.com\",\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user = getRandomAlphaNumeric(3, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"pm.variables.set(\"U_ID\", user);\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--) {\r",
											"        result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"var companyId = pm.environment.get(\"Company_Id_G\");\r",
											"pm.variables.set(\"companyId\", companyId);\r",
											"\r",
											"var  salesforceId, name, country, stateOfIncorporation, countryOfJurisdiction, isActive, updatedOn, users;\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Companies/\" + companyId);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"    }\r",
											"},\r",
											"    function (err, res) {\r",
											"        if (err) { console.log(\"error :\" + err); }\r",
											"        var jsonData = res.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        pm.variables.set(\"isActive\", jsonData.isActive);\r",
											"        pm.variables.set(\"updatedOn\", jsonData.updatedOn);\r",
											"        pm.variables.set(\"users\", jsonData.users);\r",
											"\r",
											"        var url = pm.variables.get(\"baseURI\");\r",
											"        url = url.concat(\"/api/users\");\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: url,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: {\r",
											"                    \r",
											"                   \r",
											"                        \"isPortalUser\": false,\r",
											"                        \"isPlatformUser\": false,\r",
											"                        \"companyId\": companyId,                     \r",
											"                        \"firstName\": \"apiFN\",\r",
											"                        \"middleInitial\": \"U\",\r",
											"                        \"lastName\": \"User\" + user,\r",
											"                        \"title\": \"QA\",\r",
											"                        \"workPhone\": \"7654323467\",\r",
											"                        \"employeeId\": \"111\",\r",
											"                        \"email\": \"lqxscf+EntlReg_1\" + user + \"@gmail.com\",\r",
											"                        \"userName\": \"lqxscf+EntlReg_1\" + user + \"@gmail.com\",\r",
											"                    \r",
											"                }\r",
											"\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(err); }\r",
											"            var jsonData = res.json();\r",
											"            var newId = jsonData.id;\r",
											"            console.log(\"NewUserID:\" + newId);\r",
											"            pm.variables.set(\"NewUserID\", newId);\r",
											"        });\r",
											"\r",
											"    });\r",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function()",
											"{",
											"    pm.response.to.have.status(200);",
											"});",
											"var expUserId = pm.variables.get(\"NewUserID\");",
											"",
											"pm.test(\"To check user Successfully deleted: \"+ expUserId, function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result).to.eql(\"User \"+expUserId+ \" deleted\");",
											"});",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/users?count=100000&skip=0\");",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"    }",
											"},",
											"    function (err, res) {",
											"        if (err) { console.log(\"error :\" + err); }",
											"        var jsonData = res.json();",
											"        console.log(jsonData);",
											"        ",
											"        pm.test(\"To check if user is not deleted or not: \"+ expUserId, function () {",
											"            for(i=0;i<jsonData.length ; i++)",
											"            {",
											"                if(jsonData[i].id === expUserId)",
											"                {   pm.test(\"User not deleted sucessfully!!\"+ expUserId, function () { ",
											"                            pm.expect(jsonData.id).to.eql(expUserId);",
											"",
											"                    });",
											"                }",
											"                // else",
											"                // {",
											"                //     pm.test(\"User deleted sucessfully!!\"+ expUserId, function () { ",
											"                        ",
											"                //     });",
											"                // }",
											"            }",
											"        });",
											"            ",
											"    });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Users/{{NewUserID}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Users",
										"{{NewUserID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "S-E2E-Update-UserpermissionLocal",
					"item": [
						{
							"name": "Post Company Local",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);\r",
											"pm.variables.set(\"recordTypeId\", 1);\r",
											"\r",
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        {\r",
											"            var countryName =  jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \"+countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"code1\", countryCode);\r",
											"            console.log(\"country code: \"+countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        console.log(\"state Name: \"+stateName);\r",
											"        var stateId = jsonData[0].id;\r",
											"        console.log(\"state Id: \"+stateId);\r",
											"        pm.variables.set(\"stateRegion\", stateName);    \r",
											"        pm.variables.set(\"stateRegionId\", stateId);        \r",
											"\r",
											"       \r",
											"        var url2 = pm.variables.get(\"baseURI\");\r",
											"        url2 = url2.concat(\"/api/institution-types\");\r",
											"        pm.sendRequest({\r",
											"        url: url2,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        }, function (err, res) {\r",
											"            var jsonData = res.json();\r",
											"            var institutionType = jsonData[0].id;\r",
											"            console.log(\"institutionType id: \"+institutionType);\r",
											"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
											"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
											"\r",
											"            var url3 = pm.variables.get(\"baseURI\");\r",
											"            url3 = url3.concat(\"/api/sectors\");\r",
											"            pm.sendRequest({\r",
											"            url: url3,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var sectorId = jsonData[5].id;\r",
											"                console.log(\"sector id: \"+sectorId);\r",
											"                console.log(\"sector name: \"+jsonData[5].name);\r",
											"                pm.variables.set(\"sectorId\", sectorId);   \r",
											"                \r",
											"                var url4 = pm.variables.get(\"baseURI\");\r",
											"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
											"                pm.sendRequest({\r",
											"                url: url4,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var industryId = jsonData[0].id;\r",
											"                    console.log(\"industry Id : \"+industryId);\r",
											"                    console.log(\"industry name: \"+jsonData[0].name);\r",
											"                    pm.variables.set(\"industryId\", industryId);   \r",
											"\r",
											"                }); \r",
											"            }); \r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.id;\r",
											"\r",
											"pm.test(\"To check new company is created: \" + jsonData.id, function () {\r",
											"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegSCFSupplier_' + suffix);\r",
											"});\r",
											"\r",
											"console.log(\"NEW company--->\" + jsonData.id);\r",
											"pm.variables.set(\"companyL\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"legalEntityName\": \"EntlRegSCFSupplier_{{entityName}}\", //EntlReg_API_\r\n    \"name\": \"EntlRegSCFSupplier_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate_Companies Local",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"To check company is active \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var companyL = pm.variables.get(\"companyL\");",
											"pm.variables.set('companyL', companyL);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n\t\"id\": {{companyL}}\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/{{companyL}}/update-status?command=activate",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{companyL}}",
										"update-status"
									],
									"query": [
										{
											"key": "command",
											"value": "activate"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ProductRoles_activate Local",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"var companyId = pm.variables.get(\"companyL\");",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\" + companyId + \"/roles\");",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"        }",
											"    },",
											"    function (err, res) {",
											"    if (err) { console.log(\"error :\" + err); };",
											"",
											"    var responseJSONdata = res.json();",
											"    for (var i = 0; i < responseJSONdata.length; i++) {",
											"        if(responseJSONdata[i].roldeId == pm.variables.get(\"roldeId\"))",
											"        {",
											"        pm.test(\"To check /companies/{id} returns company details\", function () {",
											"            // for (var i = 0; i < responseJSONdata.length; i++) {",
											"            pm.expect(responseJSONdata[i].companyId).to.eql(parseInt(companyId));",
											"            // }",
											"        }); ",
											"        pm.test(\"To check Company Roles_activate\", function () {",
											"            // for (var i = 0; i < responseJSONdata.length; i++) {",
											"            pm.expect(responseJSONdata[i].isActive).to.eql(true);",
											"            // }",
											"        }); ",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var companyL = pm.variables.get(\"companyL\");",
											"pm.variables.set('companyL', companyL);",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\"+companyL+\"/roles?productCode=\" + pm.variables.get(\"code\") );",
											"pm.sendRequest({",
											"  url: url,",
											"  method: 'GET',",
											"  header: {",
											"    'Accept': 'application/json',",
											"    'Content-Type': 'application/json',",
											"    'x-platform-code': pm.environment.get(\"platformCode\"),",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")",
											"  }",
											"},",
											"  function (err, res) {",
											"    if (err) { console.log(\"error :\" + err); };",
											"    var jsonData = res.json();",
											"    for(i=0;i<jsonData.length;i++)",
											"    {",
											"      if(jsonData[i].productCode.includes( pm.variables.get(\"code\") ) && jsonData[i].roleName.includes(\"Supplier\"))",
											"      {",
											"        var roleIdNew = jsonData[i].roleId;",
											"        var roleNameNew = jsonData[i].roleName;",
											"        var participantIdNew = jsonData[i].participantId;",
											"",
											"        console.log(\"roleId--->\" + roleIdNew);",
											"        console.log(\"roleName--->\" + roleNameNew);",
											"        console.log(\"participantId--->\" + participantIdNew);",
											"        pm.variables.set(\"participantId\", participantIdNew);",
											"        pm.variables.set(\"roleName\", roleNameNew);",
											"        pm.variables.set(\"roldeId\", roleIdNew);",
											"      }",
											"    }",
											"    ",
											"  });",
											"    pm.variables.set(\"isActive\", true);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"participantId\":{{participantId}},\n\t\t\"isActive\": {{isActive}},\n\t\t\"companyId\":{{companyL}},\n\t\t\"productCode\":\"{{code}}\",\n\t\t\"roleId\":{{roldeId}},\n\t\t\"roleName\":\"{{roleName}}\"\n\t}\n]"
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/{{companyL}}/roles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{companyL}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Company by ID Local",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var expCompany = pm.variables.get(\"companyL\");\r",
											"console.log(expCompany);\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
											"    pm.expect(responseJSONdata.id).to.eql(parseInt(expCompany));\r",
											"}); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var companyL = pm.variables.get(\"companyL\");",
											"pm.variables.set('companyL', companyL);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{companyL}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{companyL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_User Local",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user = getRandomAlphaNumeric(4,\"ABCDE12345FGHIJKLMNOPQ90876RSTUVWXYZ\");",
											"pm.variables.set(\"U_ID\", user);",
											"",
											"function getRandomAlphaNumeric(len, chars) {",
											"    var result = '';",
											"    for (var i = len; i > 0; i--)",
											"    { ",
											"     result += chars[Math.floor(Math.random() * chars.length)];",
											"    }",
											"     return result;",
											"}",
											"",
											"var companyId = pm.variables.get(\"companyL\"); ",
											"pm.variables.set(\"companyId\", companyId);",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\"+ companyId );",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
											"      }",
											"}, ",
											"function (err, res) {",
											"    if (err) {console.log(\"error :\" + err); }",
											"    var jsonData = res.json();",
											"    console.log(jsonData);",
											"",
											"    pm.variables.set(\"cid\", jsonData.id);",
											"    pm.variables.set(\"salesforceId\", jsonData.salesforceId);",
											"    pm.variables.set(\"name\", jsonData.name);",
											"    pm.variables.set(\"country\", jsonData.country);",
											"    pm.variables.set(\"stateOfIncorporation\", jsonData.stateOfIncorporation);",
											"    pm.variables.set(\"countryOfJurisdiction\", jsonData.countryOfJurisdiction);",
											"    pm.variables.set(\"isActive\", jsonData.isActive);",
											"    pm.variables.set(\"updatedOn\", jsonData.updatedOn);",
											"    pm.variables.set(\"users\", jsonData.users);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var Id = pm.variables.get(\"U_ID\");",
											"",
											"pm.test(\"To check user is created: \" + jsonData.id, function () {",
											"    pm.expect(jsonData.userName).to.eql('lqxnga+EntlRegSCFSupplier_' + Id+'@gmail.com');",
											"});",
											"",
											"console.log(\"NEW USER--->\" + jsonData.id);",
											"pm.environment.set(\"UserID_Local_new\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"isPortalUser\": false,\r\n    \"isPlatformUser\": false,\r\n    \"firstName\": \"apiFN\",\r\n    \"middleInitial\": \"U\",\r\n    \"lastName\": \"apiLN {{U_ID}}\",\r\n    \"title\": \"QA\",\r\n    \"workPhone\": \"7654323467\",\r\n    \"employeeId\": \"111\",\r\n    \"email\": \"lqxnga+EntlRegSCFSupplier_{{U_ID}}@gmail.com\",\r\n    \"userName\": \"lqxnga+EntlRegSCFSupplier_{{U_ID}}@gmail.com\",\r\n    \"companyId\": {{companyId}}\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate_User Local",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"To check user is  Active \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var uId = pm.environment.get(\"UserID_new\");\r",
											"pm.variables.set(\"userId\", pm.environment.get(\"UserID_Local_new\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"{{userId}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/users/{{userId}}?command=activate",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"{{userId}}"
									],
									"query": [
										{
											"key": "command",
											"value": "activate"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User Permissions Local",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//This code is used to get current company and code.",
											"var companyL = pm.variables.get(\"companyL\"); ",
											"var currentCode = pm.variables.get('code');  ",
											"",
											"console.log(\"***********\" + currentCode);",
											"",
											"//This array conatains the read, write permissions.",
											"var permissionArray = [\"Read\", \"Write\"];",
											"",
											"//This request is used for getting company roles for the current products from which we get role id and role name.",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\" + companyL + \"/roles?productCode=\" + currentCode + \"&isActive=true\");",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")",
											"    }",
											"},",
											"    function (err, res) {",
											"        if (err) { console.log(\"error :\" + err); };",
											"        var jsonData = res.json();",
											"        for(i=0;i<jsonData.length;i++)",
											"        {",
											"            if(jsonData[i].isActive == true)",
											"            {          ",
											"                if(jsonData[i].roleName.includes(\"Supplier\"))",
											"                {",
											"                    var roleIdNew = jsonData[i].roleId;",
											"                    var roleNameNew = jsonData[i].roleName;",
											"                }",
											"            }",
											"        }",
											"",
											"        console.log(\"roleId--->\" + roleIdNew);",
											"        console.log(\"roleName--->\" + roleNameNew);",
											"",
											"        pm.variables.set(\"roldeId\", roleIdNew);",
											"        pm.variables.set(\"roleName\", roleNameNew);",
											"",
											"        roleNameNew = String(roleNameNew);",
											"        var currentRole = roleNameNew.split('- ');",
											"        pm.variables.set('currentRole', currentRole[1]);",
											"        console.log(\"Current Company Role: \" + currentRole[1]);",
											"",
											"        //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
											"        // var permissioncount = pm.variables.get(\"permissioncounter\");",
											"        var permissioncount1 = pm.collectionVariables.get('permissioncount');",
											"        pm.collectionVariables.set('pa_count', permissionArray.length - 1);",
											"",
											"        pm.variables.set('permission', permissionArray[permissioncount1]);",
											"        console.log(\"permissioncounter:\" + permissioncount1);",
											"",
											"        //This 'combined' string is generated to so that we can get user permissions details",
											"        if (currentCode == 'INS' && currentRole[1] == 'Insurance Carrier') {",
											"            combinedStr = currentCode + \" IC \" + permissionArray[permissioncount1];",
											"            pm.variables.set(\"combinedStr\",combinedStr);",
											"            console.log(\"combinedStr------>\" + combinedStr);",
											"        }",
											"        else if (currentCode == 'INS' && currentRole[1] == 'Insured Party') {",
											"            combinedStr = currentCode + \" IP \" + permissionArray[permissioncount1];",
											"            pm.variables.set(\"combinedStr\",combinedStr);",
											"            console.log(\"combinedStr------>\" + combinedStr);",
											"        }",
											"        else {",
											"            combinedStr = currentCode + \" \" + currentRole[1] + \" \" + permissionArray[permissioncount1];",
											"            pm.variables.set(\"combinedStr\",combinedStr);",
											"            console.log(\"combinedStr------>\" + combinedStr);",
											"        }",
											"        var uId = pm.variables.get(\"UserID_Local_new\");",
											"        var url = pm.variables.get(\"baseURI\");",
											"        url = url.concat(\"/api/userpermissions/\" + uId + \"/roles/\" + pm.variables.get(\"roldeId\") + \"?entityType=Company\");",
											"        pm.sendRequest({",
											"            url: url,",
											"            method: 'GET',",
											"            header: {",
											"            'Accept': 'application/json',",
											"            'Content-Type': 'application/json',",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),              ",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")",
											"            }",
											"        },",
											"            function (err, res) {",
											"                if (err) { console.log(\"error :\" + err); }",
											"                var jsonData = res.json();",
											"                // var permissionName;",
											"                for (i = 0; i < jsonData.length; i++) {",
											"                    if (jsonData[i].permissionBundleName.includes(combinedStr)) {",
											"                        if (jsonData[i].permissionBundleName.includes(\"Read\")) {",
											"                            pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
											"                            pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
											"                            pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
											"                            pm.variables.set(\"isEntitled\", true);",
											"                            break;",
											"                        }",
											"                        else {",
											"                            pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
											"                            pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
											"                            pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
											"                            pm.variables.set(\"isEntitled\", true);",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                }",
											"                pm.variables.set(\"userId\", pm.environment.get(\"UserID_Local_new\"));",
											"            });",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
											" });\r",
											"\r",
											"//This code used for getting user permissions and verifying with updated permissions.\r",
											"var userId = pm.environment.get(\"UserID_Local_new\");\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Company\";\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),        \r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenPlatformUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"   \r",
											"    pm.test(\"Validate the userpermissions updated for user \" + userId + \" returned for Company: \", function(){\r",
											"        var permissionFlag = false;\r",
											"        for( var i=0; i< jsonData.length; i++)\r",
											"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
											"            if (jsonData[i].permissionBundleName == pm.variables.get(\"combinedStr\"))\r",
											"            {\r",
											"                permissionFlag = true;\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"        pm.expect(permissionFlag).to.be.eql(true);\r",
											"   });\r",
											"   \r",
											"////////////////////////////////////////////////////////////////////////////////////////////\r",
											"\r",
											"//This code will execute till we complete the permission array counter\r",
											"    var permissioncounter = pm.collectionVariables.get('permissioncount');\r",
											"    let permissionLimit = pm.collectionVariables.get(\"pa_count\");\r",
											"    let found = false;\r",
											"    console.log(\"limit:\"+permissionLimit);\r",
											"    console.log(\"permissioncounter:\"+permissioncounter);\r",
											"    console.log(\"found:\"+found);\r",
											"    if(permissioncounter < permissionLimit && !found)\r",
											"    {\r",
											"        console.log(\"setting next request\");\r",
											"        postman.setNextRequest(\"Update User Permissions Local\");\r",
											"        pm.collectionVariables.unset(\"permissioncount\");\r",
											"        // pm.variables.set(\"permissioncounter\", permissioncounter+1);\r",
											"        pm.collectionVariables.set(\"permissioncount\", parseInt(permissioncounter)+1) ;\r",
											"        console.log(\"--------->\"+permissioncounter);\r",
											"    }else if(permissioncounter === permissionLimit)\r",
											"    {\r",
											"        console.log(\"Condition match! Execution loop completed\");\r",
											"        pm.collectionVariables.set(\"permissioncount\", 0) ;\r",
											"        pm.collectionVariables.set(\"pa_count\",0);\r",
											"        console.log(\"Counter reset to 0\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"userParticipantId\": {{userParticipantId}},\n        \"permissionBundleId\": {{permissionBundleId}},\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\n        \"isEntitled\": {{isEntitled}}\n    }\n] "
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{userId}}",
										"roles",
										"{{roldeId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User Local",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"userId\", pm.environment.get(\"UserID_Local_new\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function()",
											"{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var expUserId = pm.environment.get(\"UserID_Local_new\");",
											"",
											"pm.test(\"To check user Successfully deleted: \"+ expUserId, function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result).to.eql(\"User \"+expUserId+ \" deleted\");",
											"});",
											"",
											"var counter = parseInt(pm.collectionVariables.get('count'));",
											"let limit = parseInt(pm.collectionVariables.get('productCount'));",
											"let found = false;",
											"console.log(\"limit:\" + limit);",
											"console.log(\"counter:\" + counter);",
											"",
											"if (counter < limit && !found) {",
											"    console.log(\"setting next request\");",
											"    postman.setNextRequest(\"Post Participant Local\");",
											"    pm.collectionVariables.unset(\"count\");",
											"    pm.collectionVariables.set(\"count\", parseInt(counter) + 1);",
											"} else if (counter === limit) {",
											"    console.log(\"Condition match! Execution loop completed\");",
											"    pm.collectionVariables.set(\"count\", 0);",
											"    pm.collectionVariables.set('productCount',0);",
											"    pm.collectionVariables.set(\"code\", pm.environment.get(\"productCode\"));",
											"    console.log(\"Counter reset to \" + pm.collectionVariables.get(\"count\"));",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Users/{{userId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deactivate_Companies Local",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var companyL = pm.variables.get(\"companyL\");",
											"pm.variables.set('companyL', companyL);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"To check company is inActive \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isActive).to.eql(false);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n\t\"id\": {{companyL}}\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/Companies/{{companyL}}/update-status?command=deactivate",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Companies",
										"{{companyL}}",
										"update-status"
									],
									"query": [
										{
											"key": "command",
											"value": "deactivate"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Note: (Date of comment - 23/04/2020)\n\nRemoving AR buyer company (company id - 528 - API_AR_Buyer) from array set in the environment variable.\n\nWe can not add AR buyer read/write permission because checkbox is not there. I think this is yet to implement. (Not a high priority at this time --> Comment in OEN-409) \n\nThis implementation is not in the current release. ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S-Connection",
					"item": [
						{
							"name": "Create Connection - Active - Bidirectional",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var ConnectionId = jsonData.id;\r",
											"pm.variables.set(\"ConnectionId\",ConnectionId);\r",
											"console.log(\"Connection - Active - Bidirectional - ID: \"+ConnectionId)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"connectionStatusId\": 2,\r\n    \"connectionTypeId\": 2,\r\n    \"calendars\": [\r\n        10\r\n    ],\r\n    \"programTypes\": [\r\n        2\r\n    ],\r\n    \"notRestrictedByCurrency\": false,\r\n    \"currencies\": [\r\n        \"USD\"\r\n    ],\r\n    \"additionalTerms\": null,\r\n    \"sanctionsAuthority\": null,\r\n    \"company1Id\": {{newFunderCompanySCF_Local1}},\r\n    \"company2Id\": {{newFunderCompanySCF_Local2}},\r\n    \"creationDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Connections",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Connections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Connections/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating Connections id \"+jsonData.id, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i].connectionStatusId).to.be.eql(2);\r",
											"  }\r",
											"});\r",
											"pm.test(\"Validating Connections format from response body  \"+jsonData.id, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"        pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'company1Id','company1Name','company2Id','company2Name','connectionStatusId','connectionStatusName','connectionTypeId','connectionTypeName','creationDate','notRestrictedByCurrency','calendars','currencies','programTypes');\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"myConnectionId\",pm.variables.get(\"ConnectionId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Connections/{{myConnectionId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Connections",
										"{{myConnectionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Connections?participantId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating available Connections : \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i].company1Id).to.be.eql(pm.environment.get(\"newFunderCompanySCF_Local1\"));\r",
											"  }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"myConnectionId\",pm.variables.get(\"ConnectionId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Connections?participantId={{newFunderCompanySCF_Local1}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Connections"
									],
									"query": [
										{
											"key": "participantId",
											"value": "{{newFunderCompanySCF_Local1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Connection - Draft - Unidirectional",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var ConnectionId = jsonData.id;\r",
											"pm.variables.set(\"ConnectionId\",ConnectionId);\r",
											"console.log(\"Connection - Draft - Unidirectional- ID: \"+ConnectionId)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"connectionStatusId\": 1,\r\n    \"connectionTypeId\": 1,\r\n    \"calendars\": [],\r\n    \"programTypes\": [\r\n        3,\r\n        1\r\n    ],\r\n    \"notRestrictedByCurrency\": true,\r\n    \"currencies\": [],\r\n    \"additionalTerms\": null,\r\n    \"sanctionsAuthority\": null,\r\n    \"company1Id\": {{newFunderCompanySCF_Local1}},\r\n    \"company2Id\": {{newFunderCompanySCF_Local2}},\r\n    \"creationDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Connections",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Connections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Connection - DraftToActive - Unidirectional",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"pm.variables.set(\"myConnectionId\",pm.variables.get(\"ConnectionId\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"connectionStatusId\": 2,\r\n    \"connectionTypeId\": 1,\r\n    \"calendars\": [23],\r\n    \"programTypes\": [\r\n        3,\r\n        1\r\n    ],\r\n    \"notRestrictedByCurrency\": true,\r\n    \"currencies\": [],\r\n    \"additionalTerms\": null,\r\n    \"sanctionsAuthority\": null,\r\n    \"company1Id\": {{newFunderCompanySCF_Local1}},\r\n    \"company2Id\": {{newFunderCompanySCF_Local2}},\r\n    \"creationDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Connections/{{myConnectionId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Connections",
										"{{myConnectionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Connection - ActiveToDisable - Unidirectional",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"pm.variables.set(\"myConnectionId\",pm.variables.get(\"ConnectionId\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"connectionStatusId\": 3,\r\n    \"connectionTypeId\": 1,\r\n    \"calendars\": [23],\r\n    \"programTypes\": [\r\n        3,\r\n        1\r\n    ],\r\n    \"notRestrictedByCurrency\": true,\r\n    \"currencies\": [],\r\n    \"additionalTerms\": null,\r\n    \"sanctionsAuthority\": null,\r\n    \"company1Id\": {{newFunderCompanySCF_Local1}},\r\n    \"company2Id\": {{newFunderCompanySCF_Local2}},\r\n    \"creationDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Connections/{{myConnectionId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Connections",
										"{{myConnectionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Connection - DisableToEnable - Unidirectional",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"pm.variables.set(\"myConnectionId\",pm.variables.get(\"ConnectionId\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"connectionStatusId\": 2,\r\n    \"connectionTypeId\": 1,\r\n    \"calendars\": [23],\r\n    \"programTypes\": [\r\n        3,\r\n        1\r\n    ],\r\n    \"notRestrictedByCurrency\": true,\r\n    \"currencies\": [],\r\n    \"additionalTerms\": null,\r\n    \"sanctionsAuthority\": null,\r\n    \"company1Id\": {{newFunderCompanySCF_Local1}},\r\n    \"company2Id\": {{newFunderCompanySCF_Local2}},\r\n    \"creationDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Connections/{{myConnectionId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Connections",
										"{{myConnectionId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GET",
			"item": [
				{
					"name": "Products",
					"item": [
						{
							"name": "Get Products/{productCode}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"var expProductcode = pm.variables.get(\"productCode\");\r",
											"console.log(expProductcode);\r",
											"\r",
											"pm.test(\"To check product details of \"+expProductcode, function () {\r",
											"        pm.expect(responseJSONdata.code).to.be.oneOf([\"AR\", \"SCF\", \"INS\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Products/{{productCode}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Products/{productCode}/roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"var expProductcode = pm.variables.get(\"productCode\");\r",
											"console.log(expProductcode);\r",
											"\r",
											"pm.test(\"To check roles for product \"+expProductcode, function () {\r",
											"    for (i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i].productCode).to.be.oneOf([\"AR\", \"SCF\", \"INS\"]);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Products/{{productCode}}/roles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Products",
										"{{productCode}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Products/{productCode}/roles-ALL products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var counter = parseInt(pm.collectionVariables.get('count1'));\r",
											"let limit = parseInt(pm.collectionVariables.get('productCount1'));\r",
											"let found = false;\r",
											"console.log(\"limit:\" + limit);\r",
											"console.log(\"counter:\" + counter);\r",
											"\r",
											"var expProductcode = pm.collectionVariables.get(\"code\");\r",
											"console.log(expProductcode);\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"To check roles for product \" + expProductcode, function () {\r",
											"    for (i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i].productCode).to.eql(expProductcode);\r",
											"    }\r",
											"});\r",
											"\r",
											"if (counter < limit && !found) \r",
											"{\r",
											"    console.log(\"setting next request\");\r",
											"    postman.setNextRequest(\"Get Products/{productCode}/roles-ALL products\");\r",
											"    pm.collectionVariables.unset(\"count1\");\r",
											"    pm.collectionVariables.set(\"count1\", parseInt(counter) + 1);\r",
											"} \r",
											"else if (counter === limit)\r",
											"{\r",
											"    console.log(\"Condition match! Execution loop completed\");\r",
											"    pm.collectionVariables.set(\"count1\", 0);\r",
											"    pm.collectionVariables.set(\"code\", pm.environment.get(\"productCode\"));\r",
											"    console.log(\"Counter reset to \" + pm.collectionVariables.get(\"count1\"));\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codes = pm.environment.get(\"product_codes\").toString().split(',');",
											"console.log(\"Product codes: \" + codes);",
											"console.log(\"Total Product Count: \" + codes.length);",
											"pm.collectionVariables.set(\"productCount1\", codes.length - 1);",
											"",
											"var counter = parseInt(pm.collectionVariables.get('count1'));",
											"pm.collectionVariables.set('code', codes[counter]);",
											"console.log(\"current product code---->\" + pm.collectionVariables.get('code'));",
											"console.log(\"Counter:\" + counter);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Products/{{code}}/roles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Products",
										"{{code}}",
										"roles"
									]
								},
								"description": "Please execute through Runner."
							},
							"response": []
						}
					],
					"description": "List of all Products"
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Get Users?productCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"var expProductcode = pm.variables.get(\"productCode\");\r",
											"console.log(expProductcode);\r",
											"pm.test(\"To check user details for \"+ expProductcode +\" products is not null (firstName,lastName,title,userName)\", function () \r",
											"{\r",
											"    for (var i = 0; i < responseJSONdata.length; i++) \r",
											"    {\r",
											"        pm.expect(responseJSONdata[i].firstName).to.not.eql(null);\r",
											"        pm.expect(responseJSONdata[i].lastName).to.not.eql(null);\r",
											"        pm.expect(responseJSONdata[i].title).to.not.eql(null);\r",
											"        pm.expect(responseJSONdata[i].userName).to.not.eql(null);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validating response body \", function () {\r",
											"    pm.expect(responseJSONdata[0]).to.have.any.keys('id', 'isActive', 'companyName', 'userName', 'firstName', 'lastName', 'title', 'userTypes', 'isLqxUser', 'country', 'state', 'city');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/users?productCode={{productCode}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "productCode",
											"value": "{{productCode}}"
										},
										{
											"key": "count",
											"value": "100",
											"disabled": true
										}
									]
								},
								"description": "(ALL users for the selected product)"
							},
							"response": []
						},
						{
							"name": "Get Users?productCode=ALL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codes = pm.environment.get(\"product_codes\").toString().split(',');",
											"",
											"console.log(\"Product codes: \" + codes);",
											"console.log(\"Total Product Count: \" + codes.length);",
											"pm.collectionVariables.set(\"productCount\", codes.length - 1);",
											"",
											"var counter = parseInt(pm.collectionVariables.get('count'));",
											"pm.collectionVariables.set('code', codes[counter]);",
											"console.log(\"current product code---->\" + pm.collectionVariables.get('code'));",
											"console.log(\"Counter:\" + counter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"var counter = parseInt(pm.collectionVariables.get('count'));\r",
											"let limit = parseInt(pm.collectionVariables.get('productCount'));\r",
											"let found = false;\r",
											"console.log(\"limit:\" + limit);\r",
											"console.log(\"counter:\" + counter);\r",
											"\r",
											"pm.test(\"To check user details for products is not null (firstName,lastName,title,userName)\", function () {\r",
											"    for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i].firstName).to.not.eql(null);\r",
											"        pm.expect(responseJSONdata[i].lastName).to.not.eql(null);\r",
											"        pm.expect(responseJSONdata[i].title).to.not.eql(null);\r",
											"        pm.expect(responseJSONdata[i].userName).to.not.eql(null);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response body: \", function () {\r",
											"    pm.expect(responseJSONdata[0]).to.have.any.keys('id', 'isActive', 'companyName', 'userName', 'firstName', 'lastName', 'title', 'userTypes', 'isLqxUser', 'country', 'state', 'city');\r",
											"});\r",
											"\r",
											"if (counter < limit && !found)\r",
											"{\r",
											"    console.log(\"setting next request\");\r",
											"    postman.setNextRequest(\"Get Users?productCode=ALL\");\r",
											"    pm.collectionVariables.unset(\"count\");\r",
											"    pm.collectionVariables.set(\"count\", parseInt(counter) + 1);\r",
											"} \r",
											"else if (counter === limit) \r",
											"{\r",
											"    console.log(\"Condition match! Execution loop completed\");\r",
											"    pm.collectionVariables.set(\"count\", 0);\r",
											"    pm.collectionVariables.set(\"code\", \"SCF\");\r",
											"    console.log(\"Counter reset to \" + pm.collectionVariables.get(\"count\"));\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/users?productCode={{code}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "count",
											"value": "100",
											"disabled": true
										},
										{
											"key": "productCode",
											"value": "{{code}}"
										}
									]
								},
								"description": "(ALL users for the selected product)"
							},
							"response": []
						},
						{
							"name": "Get Users/MinimumCount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check users by count : \" + jsonData.length, function ()\r",
											"{\r",
											"    pm.expect(jsonData.length).to.be.above(0); \r",
											"    pm.expect(jsonData.length).to.be.below(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/users?count=100\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\") ,\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\")\r",
											"    }\r",
											"},\r",
											"function (err, res) {\r",
											"    if (err) { console.log(\"error :\" + err); }\r",
											"    var jsonData = res.json();\r",
											"    var totalCnt = jsonData.length;\r",
											"    console.log(\"Total length: \" + totalCnt);\r",
											"    if(totalCnt == 1)\r",
											"    {\r",
											"        pm.variables.set(\"mincnt\", 0);\r",
											"        console.log(\"Data not available hence set to 0\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        // totalCnt = totalCnt - 1;\r",
											"        pm.variables.set(\"mincnt\", 1);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/users?count={{mincnt}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "count",
											"value": "{{mincnt}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Users/MaximumCount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check users by max count : \" + jsonData.length, function ()\r",
											"{\r",
											"    pm.expect(jsonData.length).to.be.above(0); \r",
											"    pm.expect(jsonData.length).to.be.below(101);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var url = pm.variables.get(\"baseURI\");\r",
											"// url = url.concat(\"/api/users?count=100\");\r",
											"\r",
											"// pm.sendRequest({\r",
											"//     url: url,\r",
											"//     method: 'GET',\r",
											"//     header: {\r",
											"//         'Accept': 'application/json',\r",
											"//         'Content-Type': 'application/json',\r",
											"//         'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"//     }\r",
											"// },\r",
											"//     function (err, res) {\r",
											"//         if (err) { console.log(\"error :\" + err); }\r",
											"//         var jsonData = res.json();\r",
											"//         var totalCnt = jsonData.length;\r",
											"//         console.log(\"Total length: \" + totalCnt);\r",
											"//         if (totalCnt == 1) {\r",
											"//             pm.variables.set(\"maxcnt\", 0);\r",
											"//             console.log(\"Data not available hence set to 0\");\r",
											"//         }\r",
											"//         else {\r",
											"//             totalCnt = totalCnt - 1;\r",
											"//             pm.variables.set(\"maxcnt\", 1);\r",
											"//         }\r",
											"//     });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/users?count=100",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "count",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Users/MinimumSkip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);",
											"",
											"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function()",
											"{",
											"    pm.expect(responseJSONdata.length).to.be.below(101);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"skip\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/users?skip={{skip}}&count=100",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "skip",
											"value": "{{skip}}"
										},
										{
											"key": "count",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Users/MaximumSkip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200 & responseBody !== '')",
											"{",
											"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
											"        pm.expect(responseJSONdata.length).to.be.below(101);",
											"    });",
											"}",
											"else",
											"{",
											"    pm.test(\"Blank response body!\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/users?skip=15&count=100",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "skip",
											"value": "15"
										},
										{
											"key": "count",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Users/Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/users\");",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
											"      }",
											"}, function (err, res) {",
											"    var jsonData = res.json();",
											"    pm.variables.set(\"UserId\", jsonData[0].id);",
											"    console.log(pm.variables.get(\"UserId\"));",
											"      ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedUserId = pm.variables.get(\"UserId\");\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"To check details of user id: \"+pm.variables.get(\"UserId\"), function () {\r",
											"    pm.expect(responseJSONdata.id).to.eql(expectedUserId);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/users/{{UserId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"{{UserId}}"
									]
								},
								"description": "(This will include the company info)"
							},
							"response": []
						},
						{
							"name": "Get Users/groups",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var c_id = pm.environment.get(\"Company_Id_G\");",
											"var url = pm.variables.get(\"baseURI\");",
											"url = pm.variables.get(\"baseURI\") + '/api/companies/' + c_id + '/users';",
											"",
											"pm.sendRequest({",
											"  url: url,",
											"  method: 'GET',",
											"  header: {",
											"    'Accept': 'application/json',",
											"    'Content-Type': 'application/json',",
											"    'x-platform-code': pm.environment.get(\"platformCode\"),",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"  }",
											"}, function (err, res) {",
											"  var jsonData = res.json();",
											"  pm.variables.set(\"UserId\", jsonData[0].id);",
											"  console.log(pm.variables.get(\"UserId\"));",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData =pm.response.json();",
											"var c_id = pm.environment.get(\"Company_Id_G\");",
											"url = pm.variables.get(\"baseURI\")+'/api/companies/'+ c_id + '/groups';",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
											"      }",
											"      ",
											"    }, function (err, res) {",
											"        var companyGrpResponse = res.json();",
											"            ",
											"        pm.test(\"To check groups returns  for users/company :\", function () {",
											"            pm.expect(jsonData.groupName).to.eql(companyGrpResponse.groupName);",
											"            pm.expect(jsonData.groupType).to.eql(companyGrpResponse.groupType);",
											"            pm.expect(jsonData.subgroupNames).to.eql(companyGrpResponse.subgroupNames);",
											"        });",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/users/{{UserId}}/groups?companyId={{Company_Id_G}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"{{UserId}}",
										"groups"
									],
									"query": [
										{
											"key": "companyId",
											"value": "{{Company_Id_G}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Users/Corporate-families",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var c_id = pm.environment.get(\"Company_Id_G\");",
											"var url = pm.variables.get(\"baseURI\");",
											"url = pm.variables.get(\"baseURI\") + '/api/companies/' + c_id + '/users';",
											"",
											"",
											"pm.sendRequest({",
											"  url: url,",
											"  method: 'GET',",
											"  header: {",
											"    'Accept': 'application/json',",
											"    'Content-Type': 'application/json',",
											"    'x-platform-code': pm.environment.get(\"platformCode\"),",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"  }",
											"}, function (err, res) {",
											"  var jsonData = res.json();",
											"  pm.variables.set(\"UserId\", jsonData[0].id);",
											"  console.log(pm.variables.get(\"UserId\"));",
											"  ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedGroup = pm.variables.get(\"CompanyGroup\") ;\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check /users/\" + pm.variables.get('UserId')  +\"/corporate-families returns corporate-families for user \", function () \r",
											"{\r",
											"    pm.expect(jsonData.groupName).to.eql(expectedGroup);\r",
											"}); \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "LQX",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/users/{{UserId}}/corporate-families",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"{{UserId}}",
										"corporate-families"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get UserSearch by email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var c_id = pm.environment.get(\"Company_Id_G\");",
											"var url = pm.variables.get(\"baseURI\");",
											"url = pm.variables.get(\"baseURI\") + '/api/companies/' + c_id + '/users';",
											"",
											"pm.sendRequest({",
											"  url: url,",
											"  method: 'GET',",
											"  header: {",
											"    'Accept': 'application/json',",
											"    'Content-Type': 'application/json',",
											"    'x-platform-code': pm.environment.get(\"platformCode\"),",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"  }",
											"}, function (err, res) {",
											"  var jsonData = res.json();",
											"  for(i=0; i < jsonData.length; i++)",
											"  {",
											"",
											"        if(jsonData[i].userName.includes(\"testUserSearch\"))",
											"        {",
											"            pm.variables.set(\"userNameSearch\", jsonData[i].userName);",
											"            console.log(pm.variables.get(\"userNameSearch\"));",
											"            pm.variables.set(\"lastNameSearch\", jsonData[i].lastName);",
											"            console.log(pm.variables.get(\"lastNameSearch\"));",
											"        }",
											"      } ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedUser = pm.variables.get(\"userNameSearch\") ;\r",
											"console.log(expectedUser)\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check user searched by username: \"+expectedUser , function () \r",
											"{\r",
											"    pm.expect(jsonData[0].userName).to.eql(expectedUser);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/users?skip=0&emailAddress={{userNameSearch}}&lastName={{lastNameSearch}}&platformCode={{platformCode}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "emailAddress",
											"value": "{{userNameSearch}}"
										},
										{
											"key": "lastName",
											"value": "{{lastNameSearch}}"
										},
										{
											"key": "platformCode",
											"value": "{{platformCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Users?lastName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/users\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"lastNameSearch\",jsonData[Math.floor(Math.random()*jsonData.length)].lastName);\r",
											"    console.log(pm.variables.get(\"lastNameSearch\"));\r",
											"      \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"pm.test(\"Validating response body \", function () {\r",
											"    pm.expect(responseJSONdata.id).to.not.eql(null);\r",
											"    for(i=0;i<responseJSONdata.length;i++){\r",
											"    pm.expect(responseJSONdata[i]).to.have.any.keys('id','userName', 'firstName', 'lastName');\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/users?lastName={{lastNameSearch}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "lastName",
											"value": "{{lastNameSearch}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Versions",
					"item": [
						{
							"name": "Get Versions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200 & responseBody !== '') ",
											"{",
											"    pm.test(\"Version is displyed\");",
											"}",
											"else",
											"{",
											"    pm.test(\"Blank response body!\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Versions",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Versions"
									]
								},
								"description": "/api/Versions"
							},
							"response": []
						}
					]
				},
				{
					"name": "Company",
					"item": [
						{
							"name": "Get Companies?product=ALL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codes = pm.environment.get(\"product_codes\").toString().split(',');",
											"",
											"console.log(\"Product codes: \" + codes);",
											"console.log(\"Total Product Count: \" + codes.length);",
											"pm.collectionVariables.set(\"productCount\", codes.length - 1);",
											"",
											"var counter = parseInt(pm.collectionVariables.get('count'));",
											"pm.collectionVariables.set('code', codes[counter]);",
											"var currentCode = pm.collectionVariables.get('code');",
											"console.log(\"current product code---->\" + currentCode);",
											"console.log(\"Counter:\" + counter);",
											"",
											"// var url = pm.variables.get(\"baseURI\");",
											"// url = url.concat(\"/api/companies?format=company-only&productCode=\" + currentCode);",
											"",
											"// pm.sendRequest({",
											"//     url: url,",
											"//     method: 'GET',",
											"//     header: {",
											"//         'Accept': 'application/json',",
											"//         'Content-Type': 'application/json',",
											"//         'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"//     }",
											"",
											"// }, function (err, res) {",
											"//     var jsonData = res.json();",
											"//     // pm.variables.set(\"CompanyId\", jsonData[0].id);",
											"//     // pm.variables.set(\"CompanyName\", jsonData[0].name);",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var counter = parseInt(pm.collectionVariables.get('count'));\r",
											"let limit = parseInt(pm.collectionVariables.get('productCount'));\r",
											"let found = false;\r",
											"console.log(\"limit:\" + limit);\r",
											"console.log(\"counter:\" + counter);\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check products NOT NULL\", function () {\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {    \r",
											"        pm.expect(jsonData[i].id).not.eql(null);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response body key: \", function () {\r",
											"    pm.expect(jsonData[0]).to.have.any.keys('id', 'salesforceId', 'name', 'dba', 'phone', 'city', 'stateRegion', 'country', 'duns', 'taxId', 'stateOfIncorporation', 'countryOfJurisdiction', 'isActive', 'updatedOn', 'users');\r",
											"});\r",
											"\r",
											"pm.test(\"To check includeInactive\", function () {\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    { \r",
											"        pm.expect(jsonData[i].isActive).to.be.eql(true);\r",
											"    }\r",
											"});\r",
											"\r",
											"if (counter < limit && !found) {\r",
											"    console.log(\"setting next request\");\r",
											"    postman.setNextRequest(\"Get Companies?product=ALL\");\r",
											"    pm.collectionVariables.unset(\"count\");\r",
											"    pm.collectionVariables.set(\"count\", parseInt(counter) + 1);\r",
											"} else if (counter === limit) {\r",
											"    console.log(\"Condition match! Execution loop completed\");\r",
											"    pm.collectionVariables.set(\"count\", 0);\r",
											"    pm.collectionVariables.set(\"code\", \"SCF\");\r",
											"    console.log(\"Counter reset to \" + pm.collectionVariables.get(\"count\"));\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/companies?format=company-only&productCode={{code}}&includeInactive=false",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "format",
											"value": "company-only"
										},
										{
											"key": "productCode",
											"value": "{{code}}"
										},
										{
											"key": "includeInactive",
											"value": "false"
										}
									]
								},
								"description": "(for selected product)"
							},
							"response": []
						},
						{
							"name": "Get CompanyList/MinimumCount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"To check minimum get companies count : \" + jsonData.length, function () \r",
											"{\r",
											"    pm.expect(jsonData.length).to.be.above(0); \r",
											"    pm.expect(jsonData.length).to.be.below(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Companies?count=1",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Companies"
									],
									"query": [
										{
											"key": "count",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get CompanyList/MaximumCount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"   \r",
											"pm.test(\"To check maximum get companies count \" + jsonData.length, function () \r",
											"{\r",
											"    pm.expect(jsonData.length).to.be.above(0); \r",
											"    pm.expect(jsonData.length).to.be.below(101);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Companies?count=100",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Companies"
									],
									"query": [
										{
											"key": "count",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get CompanyList/MaximumSkip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);",
											"",
											"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
											"    pm.expect(responseJSONdata.length).to.be.below(101);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Companies?skip=4&count=100",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Companies"
									],
									"query": [
										{
											"key": "skip",
											"value": "4"
										},
										{
											"key": "count",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get CompanyList/MinimumSkip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"To check maximum get companies count \" + jsonData.length, function () \r",
											"{\r",
											"    pm.expect(jsonData.length).to.be.above(0); \r",
											"    pm.expect(jsonData.length).to.be.below(101);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Companies?skip=1&count=100",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Companies"
									],
									"query": [
										{
											"key": "skip",
											"value": "1"
										},
										{
											"key": "count",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Companies?format=list&companyName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check company list NOT NULL\", function () {\r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response body for required keys: 'id', 'name', 'recordTypeId','isActive','recordTypeId','countryOfJurisdiction','country','stateRegion' \", function () {\r",
											"    pm.expect(jsonData[0]).to.have.any.keys('id', 'name', 'recordTypeId','isActive','recordTypeId','countryOfJurisdiction','country','stateRegion');\r",
											"});\r",
											"\r",
											"pm.test(\"Validate CompanyName: \"+pm.variables.get(\"CompanyName\"), function () {\r",
											"    pm.expect(jsonData[0].name).to.be.eql(pm.variables.get(\"CompanyName\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/companies\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"CompanyName\", jsonData[0].name);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/companies?format=list&companyName={{CompanyName}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "format",
											"value": "list"
										},
										{
											"key": "companyName",
											"value": "{{CompanyName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Companies Group/NewUser - Entity Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check company list NOT NULL\", function () {\r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response body for required keys: 'id', 'name', 'recordTypeId','isActive','recordTypeId','countryOfJurisdiction','country','stateRegion' \", function () {\r",
											"    pm.expect(jsonData[0]).to.have.any.keys('id', 'name', 'recordTypeId','isActive','recordTypeId','countryOfJurisdiction','country','stateRegion');\r",
											"});\r",
											"\r",
											"pm.test(\"Validate CompanyName: \"+pm.variables.get(\"CompanyName\"), function () {\r",
											"    for(i=0; i< jsonData.length ; i++)\r",
											"    {\r",
											"        pm.expect(jsonData[i].name).includes(\"API\");\r",
											"    }\r",
											"});\r",
											"pm.test(\"To check minimum get companies count : \" + jsonData.length, function () \r",
											"{\r",
											"    pm.expect(jsonData.length).to.be.eql(100); \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"CompanyName\", \"API\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/companies?count=100&skip=0&includeInactive=true&companyName={{CompanyName}}&include=Id,Name",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "count",
											"value": "100"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "includeInactive",
											"value": "true"
										},
										{
											"key": "companyName",
											"value": "{{CompanyName}}"
										},
										{
											"key": "include",
											"value": "Id,Name"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Companies by roleId and includeInactive=false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Validate response body for required keys: 'id', 'name', 'recordTypeId','isActive','countryOfJurisdiction','country','stateRegion' \", function () {\r",
											"    for(var i=0;i<jsonData.length; i++)\r",
											"    {\r",
											"        pm.expect(jsonData[i]).to.have.any.keys('id', 'name', 'recordTypeId','isActive','countryOfJurisdiction','country','stateRegion');\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Company details\", function () {\r",
											"    for(i=0; i< jsonData.length ; i++)\r",
											"    {\r",
											"        pm.expect(jsonData[i].isActive).to.be.equal(true);\r",
											"        pm.expect(jsonData[i].id).not.eql(null);\r",
											"\r",
											"    }\r",
											"});\r",
											"pm.test(\"To check minimum get companies count : \" + jsonData.length, function () \r",
											"{\r",
											"    pm.expect(jsonData.length).to.be.eql(100); \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/products/AR/roles\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    console.log(\"-- \"+jsonData.length);\r",
											"    for(i=0; i < jsonData.length; i++)\r",
											"    {\r",
											"        \r",
											"        pm.variables.set(\"roleId\", jsonData[0].id);\r",
											"        console.log(pm.variables.get(\"roleId\"));\r",
											"        \r",
											"    } \r",
											"\r",
											"      \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/companies?count=100&skip=0&includeInactive=false&roleId={{roleId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "count",
											"value": "100"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "includeInactive",
											"value": "false"
										},
										{
											"key": "roleId",
											"value": "{{roleId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Company by Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedCompanyId = pm.environment.get(\"Company_Id_G\");\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check company details for \"+expectedCompanyId, function () {\r",
											"    pm.expect(jsonData.id).to.eql(parseInt(expectedCompanyId));\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{Company_Id_G}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{Company_Id_G}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get platform-companies by Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedCompanyId = pm.environment.get(\"Company_Id_G\");\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check company details for \"+expectedCompanyId, function () {\r",
											"    pm.expect(jsonData.companyId).to.eql(parseInt(expectedCompanyId));\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/companies/platform-companies/{{Company_Id_G}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"platform-companies",
										"{{Company_Id_G}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Company Users",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var cid = pm.environment.get(\"Company_Id_G\");",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/companies/\" + cid);",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"    }",
											"",
											"}, function (err, res) {",
											"    var jsonData = res.json();",
											"    pm.variables.set(\"CompanyId\", jsonData.id);",
											"    pm.variables.set(\"CompanyName\", jsonData.legalEntityName);",
											"    // pm.variables.set(\"CompanyName\", jsonData.name);",
											"    console.log(pm.variables.get(\"CompanyName\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedCompanyId = pm.variables.get(\"CompanyId\") ;\r",
											"var expectedCompanyName = pm.environment.get(\"CompanyName\") ;\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check /companies/{id}/users returns users for company :\"+ expectedCompanyId, function ()\r",
											"{\r",
											"    for(var i=0; i<jsonData.length;i++)\r",
											"    {\r",
											"        pm.expect(jsonData[i].companyName).to.eql(pm.variables.get(\"CompanyName\"));\r",
											"    }\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{CompanyId}}/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{CompanyId}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Company Corporate families",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var cid = pm.environment.get(\"Company_Id_G\");",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/companies/\"+cid);",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
											"      }",
											"      ",
											"}, function (err, res) {",
											"    var jsonData = res.json();",
											"    pm.variables.set(\"CompanyId\", jsonData.id);",
											"     ",
											"    var url = pm.variables.get(\"baseURI\");",
											"    url = url.concat(\"/api/companies/\"+cid +\"/groups\"); ",
											"    ",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: 'GET',",
											"        header: {",
											"            'Accept': 'application/json',",
											"            'Content-Type': 'application/json',",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
											"          }",
											"          ",
											"    }, function (err, res) {",
											"        var jsonResData = res.json();",
											"        pm.variables.set(\"groupName\", jsonResData.groupName);",
											"        console.log( pm.variables.get(\"groupName\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var expCompanyId = pm.variables.get(\"CompanyId\") ;\r",
											"var expGrpName = pm.variables.get(\"groupName\");\r",
											"\r",
											"console.log(expCompanyId);\r",
											"console.log(expGrpName);\r",
											"\r",
											"\r",
											"pm.test(\"To check /companies/\" + expCompanyId + \"/corporate-families returns groups : \"+ expGrpName, function () \r",
											"{\r",
											"   for(var i=0; i<jsonData.length;i++)\r",
											"    {\r",
											"        pm.expect(jsonData[i].groupName).to.be.eql(expGrpName);\r",
											"    }        \r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{CompanyId}}/corporate-families",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{CompanyId}}",
										"corporate-families"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Company Groups",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var cid = pm.environment.get(\"Company_Id_G\");",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/companies/\"+cid);",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
											"      }",
											"      ",
											"}, function (err, res) {",
											"    var jsonData = res.json();",
											"    pm.variables.set(\"CompanyId\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData =pm.response.json();\r",
											"  \r",
											"pm.test(\"To check /companies/{id}/groups returns company groups :\"+ pm.variables.get(\"CompanyId\"), function ()\r",
											"    {\r",
											"        pm.expect(jsonData.groupName).not.eql(null);\r",
											"    }); \r",
											"pm.test(\"Validate response body key: \", function()\r",
											"{\r",
											"    pm.expect(jsonData).to.have.any.keys('groupName','groupType','subgroupNames');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{CompanyId}}/groups",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{CompanyId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Company Roles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedCompanyId = pm.environment.get(\"Company_Id_G\");\r",
											"\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"console.log(\"-----------\"+expectedCompanyId)\r",
											"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
											"    console.log('data===>',responseJSONdata)\r",
											"    for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i].companyId).to.eql(parseInt(expectedCompanyId));\r",
											"        if(responseJSONdata[i].isActive == true)\r",
											"        {\r",
											"            pm.environment.set(\"participantId\", responseJSONdata[i].participantId);\r",
											"            pm.environment.set(\"roleName\", responseJSONdata[i].roleName);\r",
											"            pm.environment.set(\"roldeId\", responseJSONdata[i].roleId);\r",
											"            console.log(responseJSONdata[i].participantId)\r",
											"        }\r",
											"    }\r",
											"}); \r",
											"pm.test(\"Validating company roles format from response body \", function () {\r",
											"     console.log(responseJSONdata[0].participantId)\r",
											"    for (i = 0; i < responseJSONdata.length; i++) {\r",
											"       \r",
											"        pm.expect(responseJSONdata[i]).to.have.any.keys('participantId', 'isActive','companyId','productCode','productName','roleId','roleName');\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{Company_Id_G}}/roles?productCode={{productCode}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{Company_Id_G}}",
										"roles"
									],
									"query": [
										{
											"key": "productCode",
											"value": "{{productCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Company entitlements",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedCompanyId = pm.environment.get(\"Company_Id_G\");\r",
											"\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"console.log(\"-----------\" + expectedCompanyId)\r",
											"pm.test(\"To check /companies/{id}/entitlements returns company details: \" + expectedCompanyId, function () {\r",
											"    for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i].companyId).to.eql(parseInt(expectedCompanyId));\r",
											"    }\r",
											"});\r",
											"pm.test(\"To check /companies/{id}/entitlements structure\", function () {\r",
											"    for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i]).to.have.any.keys('participantId', 'isActive', 'companyId', 'productCode', 'roleId', 'roleName');\r",
											"         if (responseJSONdata[i].isActive == true) {\r",
											"        // console.log('data in if ===>',responseJSONdata[i].participantId)\r",
											"        pm.environment.set(\"participantId\", responseJSONdata[i].participantId);\r",
											"        pm.environment.set(\"roleName\", responseJSONdata[i].roleName);\r",
											"        pm.environment.set(\"roldeId\", responseJSONdata[i].roleId);\r",
											"        console.log(responseJSONdata[i].participantId)\r",
											"        break;\r",
											"    }\r",
											"    }\r",
											"   \r",
											"\r",
											"}); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{Company_Id_G}}/entitlements",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{Company_Id_G}}",
										"entitlements"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Company platforms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"To check /companies/{id}/platforms structure\", function () {\r",
											"    for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i]).to.have.any.keys('code', 'name');\r",
											"    }\r",
											"}); \r",
											"pm.test(\"To check /companies/{id}/platforms code: \"+pm.environment.get(\"platformCode\"), function () {\r",
											"    for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i].code).to.be.eql(pm.environment.get(\"platformCode\"));\r",
											"    }\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{Company_Id_G}}/platforms",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{Company_Id_G}}",
										"platforms"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Company Roles/productCode-ALL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codes = pm.environment.get(\"product_codes\").toString().split(',');",
											"",
											"console.log(\"Product codes: \" + codes);",
											"console.log(\"Total Product Count: \" + codes.length);",
											"pm.collectionVariables.set(\"productCount\", codes.length - 1);",
											"",
											"var counter = parseInt(pm.collectionVariables.get('count'));",
											"pm.collectionVariables.set('code', codes[counter]);",
											"var currentCode = pm.collectionVariables.get('code');",
											"console.log(\"current product code---->\" + currentCode);",
											"console.log(\"Counter:\" + counter);",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/companies?productCode=\" + currentCode);",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"    }",
											"}, function (err, res) {",
											"    var jsonData = res.json();",
											"    pm.variables.set(\"CompanyId\", jsonData[0].companyId);",
											"    pm.variables.set(\"CompanyName\", jsonData[0].name);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expProductcode = pm.variables.get(\"code\");\r",
											"console.log(expProductcode);\r",
											"\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"To check products NOT NULL\", function () {\r",
											"    pm.expect(responseJSONdata.companyId).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"To check details for product \" + expProductcode, function () {\r",
											"    for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i].productCode).to.eql(expProductcode);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"To check Company roles as per productCode: \"+expProductcode, function () {\r",
											"    if(expProductcode === \"INS\")\r",
											"    {\r",
											"        for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].roleName).to.be.oneOf(['Insurance - Administrator','Insurance - Broker','Insurance - Insurance Carrier','Insurance - Insured Party','Insurance - Platform Broker','Test INS']);\r",
											"        }\r",
											"    }\r",
											"    else if(expProductcode === \"AR\")\r",
											"    {\r",
											"        for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].roleName).to.be.oneOf(['Accounts Receivable - Administrator','Accounts Receivable - Buyer','Accounts Receivable - Funder','Accounts Receivable - Supplier','150322reg','reg0404 PR','reg2202P role test','test','reg2908']);\r",
											"        }\r",
											"    }\r",
											"    else if(expProductcode === \"SCF\")\r",
											"    {\r",
											"        for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].roleName).to.be.oneOf(['Supply Chain Finance - Administrator','Supply Chain Finance - Buyer','Supply Chain Finance - Funder','Supply Chain Finance - Supplier','Test SCF1']);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"        pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: {                                                    \r",
											"                }\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"            pm.test(\"To check /api/Publications has response 200\", function () {\r",
											"                pm.expect(res.code).to.eql(200);      \r",
											"            });            \r",
											"        });\r",
											"\r",
											"var counter = parseInt(pm.collectionVariables.get('count'));\r",
											"let limit = parseInt(pm.collectionVariables.get('productCount'));\r",
											"let found = false;\r",
											"console.log(\"limit:\" + limit);\r",
											"console.log(\"counter:\" + counter);\r",
											"\r",
											"if (counter < limit && !found) {\r",
											"    console.log(\"setting next request\");\r",
											"    postman.setNextRequest(\"Get Company Roles/productCode-ALL\");\r",
											"    pm.collectionVariables.unset(\"count\");\r",
											"    pm.collectionVariables.set(\"count\", parseInt(counter) + 1);\r",
											"} else if (counter === limit) {\r",
											"    console.log(\"Condition match! Execution loop completed\");\r",
											"    pm.collectionVariables.set(\"count\", 0);\r",
											"    pm.collectionVariables.set(\"code\", pm.environment.get(\"productCode\"));\r",
											"    console.log(\"Counter reset to \" + pm.collectionVariables.get(\"count\"));\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{CompanyId}}/roles?productCode={{code}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{CompanyId}}",
										"roles"
									],
									"query": [
										{
											"key": "productCode",
											"value": "{{code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Companies/{id}/roles?productCode=ALL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codes = pm.environment.get(\"product_codes\").toString().split(',');",
											"console.log(\"Product codes: \" + codes);",
											"",
											"var counter = parseInt(pm.collectionVariables.get('count'));",
											"pm.collectionVariables.set('code', codes[counter]);",
											"var currentCode = pm.collectionVariables.get('code');",
											"console.log(\"current product code---->\" + currentCode);",
											"console.log(\"Counter:\" + counter);",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/companies?productCode=\" + currentCode);",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"    }",
											"}, function (err, res) {",
											"    var jsonData = res.json();",
											"    pm.variables.set(\"CompanyId\", jsonData[0].companyId);",
											"    pm.variables.set(\"CompanyName\", jsonData[0].name);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var counter = parseInt(pm.collectionVariables.get('count'));\r",
											"let limit = parseInt(pm.collectionVariables.get('productCount'));\r",
											"let found = false;\r",
											"// let limit = 4;\r",
											"console.log(\"limit:\"+limit);\r",
											"console.log(\"counter:\"+counter);\r",
											"// console.log(\"found:\"+found);\r",
											"\r",
											"var expProductcode = pm.variables.get(\"code\");\r",
											"console.log(expProductcode);\r",
											"\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"var expCompanyId = pm.variables.get(\"CompanyId\");\r",
											"console.log(\"expCompanyId---------- \"+expCompanyId);\r",
											" for (var i=0; i < responseJSONdata.length; i++)\r",
											" {\r",
											"    pm.test(\"Validate the roles for users company\", function(){\r",
											"        pm.expect(responseJSONdata[i].companyId).to.deep.eql(parseInt(expCompanyId));\r",
											"        // pm.expect(responseJSONdata[i].isActive).to.be.eql(true);\r",
											"        pm.expect(responseJSONdata[i].productCode).to.eql(expProductcode);\r",
											"    });\r",
											" }\r",
											"\r",
											"if(counter < limit && !found)\r",
											"{\r",
											"    console.log(\"setting next request\");\r",
											"    postman.setNextRequest(\"Get Companies/{id}/roles?productCode=ALL\");\r",
											"    pm.collectionVariables.unset(\"count\");\r",
											"    pm.collectionVariables.set(\"count\", parseInt(counter)+1) ;\r",
											"}else if(counter === limit)\r",
											"{\r",
											"    console.log(\"Condition match! Execution loop completed\");\r",
											"    pm.collectionVariables.set(\"count\", 0);\r",
											"    pm.collectionVariables.set(\"code\", pm.environment.get(\"productCode\"));\r",
											"    console.log(\"Counter reset to \"+pm.collectionVariables.get(\"count\"));\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{CompanyId}}/roles?productCode={{code}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{CompanyId}}",
										"roles"
									],
									"query": [
										{
											"key": "productCode",
											"value": "{{code}}"
										}
									]
								},
								"description": "GET api/companies/{id}/roles?productCode=XXX&isActive=true\n\nfinding the roles for the user's company"
							},
							"response": []
						},
						{
							"name": "Get Company Products",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var cid = pm.environment.get(\"Company_Id_G\");",
											"",
											"// var url = pm.variables.get(\"baseURI\");",
											"// url = url.concat(\"/api/companies/\"+cid);",
											"",
											"// pm.sendRequest({",
											"//     url: url,",
											"//     method: 'GET',",
											"//     header: {",
											"//         'Accept': 'application/json',",
											"//         'Content-Type': 'application/json',",
											"//         'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
											"//       }",
											"// }, function (err, res) {",
											"//     var jsonData = res.json();",
											"//     pm.variables.set(\"CompanyId\", jsonData.id);",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedCompanyId = pm.environment.get(\"Company_Id_G\") ;\r",
											"\r",
											"console.log(expectedCompanyId);\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check products NOT NULL for company \"+expectedCompanyId, function () \r",
											"{\r",
											"    pm.expect(jsonData.body).not.eql(null);\r",
											"}); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{Company_Id_G}}/products",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{Company_Id_G}}",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Companies search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check company list NOT NULL\", function () {\r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response body for required keys: 'id', 'name', 'recordTypeId','isActive','recordTypeId','countryOfJurisdiction','country','stateRegion' \", function () {\r",
											"    pm.expect(jsonData[0]).to.have.any.keys('id', 'name', 'recordTypeId','isActive','recordTypeId','countryOfJurisdiction','country','stateRegion');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Searched Company contains 'API' in the Name \", function () {\r",
											"    for (i = 0; i < jsonData.length; i++) \r",
											"        {\r",
											"            if (jsonData[i].name.includes(\"API\")) {\r",
											"            console.log(i);\r",
											"            continue;\r",
											"        }\r",
											"    }\r",
											"});\r",
											"        "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/Platforms?count=500\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        for(i=0; i<jsonData.length; i++)\r",
											"        {\r",
											"            if(jsonData[i].code.includes(\"API_TestPlatform\"))\r",
											"            {\r",
											"                pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/companies/search?CompanyName=API&platformCode={{codePlatform}}&include=id,name",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"search"
									],
									"query": [
										{
											"key": "CompanyName",
											"value": "API"
										},
										{
											"key": "platformCode",
											"value": "{{codePlatform}}"
										},
										{
											"key": "include",
											"value": "id,name"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Company relationships",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedCompanyId = pm.environment.get(\"Company_Id_G\");\r",
											"\r",
											"var responseJSONdata =  pm.response.json();// JSON.parse(responseBody);\r",
											"console.log(\"-----------\" + expectedCompanyId)\r",
											"pm.test(\"To check /companies/{id}/relationships details: \", function () {\r",
											"    for (var i = 0; i < responseJSONdata.length; i++) \r",
											"    {\r",
											"        for(var j=i; j <2; j++)\r",
											"        {\r",
											"            pm.expect(responseJSONdata[i].participants[j].relationshipRoleMapId).to.be.oneOf([1,2]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"pm.test(\"To check /companies/{id}/relationships structure\", function () {\r",
											"    for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i]).to.have.any.keys('participantId', 'isActive', 'companyId', 'productCode', 'roleId', 'roleName','relationshipType');\r",
											"        \r",
											"    }\r",
											"}); \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{Company_Id_G}}/relationships?relationshipTypeId=1&productCode=SCF",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{Company_Id_G}}",
										"relationships"
									],
									"query": [
										{
											"key": "relationshipTypeId",
											"value": "1"
										},
										{
											"key": "productCode",
											"value": "SCF"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UserEntitlements",
					"item": [
						{
							"name": "Get UserEntitlements_MO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"To check UserEntitlements: \" + responseJSONdata.length);\r",
											"\r",
											"pm.test(\"To check UserEntitlements NOT NULL\", function () {\r",
											"      pm.expect(responseJSONdata.body).not.eql(null);\r",
											"}); \r",
											"\r",
											"for(i=0; i<responseJSONdata.length; i++)\r",
											"{\r",
											"      if(responseJSONdata[i].productCode === \"MO\")\r",
											"      {\r",
											"            pm.test(\"To check UserEntitlements of MO user \" , function () \r",
											"            {\r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditCompanyDetails\");\r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditCompanyListTabs\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditCompanyProductEntitlement\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditCompanyUserGrid\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditGroupPermissions\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditLqxPermissions\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditUserDetails\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditUserListTabs\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditUserPermissions\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"EntitlementSideBarTab\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewCompanyDetails\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewCompanyListTabs\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewCompanyProductEntitlement\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewCompanyUserGrid\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewGroupPermissions\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewGroupTab\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewLqxPermissions\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewRelationshipTab\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewUserDetails\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewUserListTabs\"); \r",
											"                  pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewUserPermissions\"); \r",
											"            });\r",
											"      }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
									"host": [
										"{{baseURI_userPermission}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserEntitlements-PlatformUser-OEN-912",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"To check UserEntitlements: \" + responseJSONdata.length);\r",
											"\r",
											"pm.test(\"To check UserEntitlements NOT NULL\", function () {\r",
											"      pm.expect(responseJSONdata.body).not.eql(null);\r",
											"}); \r",
											"\r",
											"for(i=0; i<responseJSONdata.length; i++)\r",
											"{\r",
											"      if(responseJSONdata[i].productCode === \"MO\")\r",
											"      {\r",
											"            pm.test(\"To check UserEntitlements of Platform user \" , function () \r",
											"            {\r",
											"                pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditCompanyDetails\");\r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"EditCompanyListTabs\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"EditCompanyProductEntitlement\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"EditCompanyUserGrid\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"EditGroupPermissions\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"EditLqxPermissions\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"EditUserDetails\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"EditUserListTabs\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"EditUserPermissions\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"EditLocalGroup\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"EditLocalCompany\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"EditManualEntryTab\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"EditLocalRelationship\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"EntitlementSideBarTab\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewCompanyDetails\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewCompanyListTabs\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewCompanyProductEntitlement\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewCompanyUserGrid\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewGroupPermissions\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewGroupTab\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewLqxPermissions\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewRelationshipTab\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewUserDetails\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewUserListTabs\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewUserPermissions\"); \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"CreateLocalCompany\");\r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"CreateLocalGroup\");           \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"CreateLocalParticipant\");  \r",
											"\t\t\t\tpm.expect(responseJSONdata[i].permissionNames).to.include(\"CreateLocalRelationship\");\r",
											"            });\r",
											"      }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
									"host": [
										"{{baseURI_userPermission}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UserPermissions",
					"item": [
						{
							"name": "Get UserPermissions/productCode=ALL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codes = pm.environment.get(\"product_codes\").toString().split(',');",
											"console.log(\"Product codes: \" + codes);",
											"console.log(\"Total Product Count: \" + codes.length);",
											"pm.collectionVariables.set(\"productCount2\", codes.length - 1);",
											"",
											"var counter = parseInt(pm.collectionVariables.get('count2'));",
											"pm.collectionVariables.set('code', codes[counter]);",
											"var currentCode = pm.collectionVariables.get('code');",
											"console.log(\"current product code---->\" + currentCode);",
											"console.log(\"Counter:\" + counter);",
											"",
											"if (currentCode == \"SCF\") {",
											"    var cmpId = pm.environment.get(\"Company_Id_G\");",
											"",
											"    var url = pm.variables.get(\"baseURI\");",
											"    url = url.concat(\"/api/companies/\" + cmpId + \"?productCode=\" + currentCode);",
											"",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: 'GET',",
											"        header: {",
											"            'Accept': 'application/json',",
											"            'Content-Type': 'application/json',",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"        }",
											"    }, function (err, res) {",
											"        var jsonData = res.json();",
											"        pm.variables.set(\"CompanyId\", jsonData.id); //companyId",
											"",
											"        var cid = pm.variables.get(\"CompanyId\");",
											"        var url = pm.variables.get(\"baseURI\");",
											"        url = url.concat(\"/api/companies/\" + cid + \"/users\");",
											"",
											"        pm.sendRequest({",
											"            url: url,",
											"            method: 'GET',",
											"            header: {",
											"                'Accept': 'application/json',",
											"                'Content-Type': 'application/json',",
											"                'x-platform-code': pm.environment.get(\"platformCode\"),",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"            }",
											"        }, function (err, res) {",
											"            if (err) { console.log(err); }",
											"",
											"            var jsonData = res.json();",
											"            for(i=0;i<jsonData.length;i++)",
											"            {",
											"                if(jsonData[i].isActive == true)",
											"                {",
											"                    pm.variables.set(\"UserId\", jsonData[i].id);",
											"                    var UserId = pm.variables.get(\"UserId\");",
											"                    console.log(\"UserId: \" + UserId);",
											"                    break;",
											"                }",
											"            }",
											"",
											"",
											"        });",
											"    });",
											"",
											"} else if (currentCode == \"AR\") {",
											"    console.log(\"In AR_Companies\");",
											"    companies = pm.environment.get(\"AR_Companies\").split(',');",
											"",
											"    var cid = companies[0];",
											"    var url = pm.variables.get(\"baseURI\");",
											"    url = url.concat(\"/api/companies/\" + cid + \"/users\");",
											"",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: 'GET',",
											"        header: {",
											"            'Accept': 'application/json',",
											"            'Content-Type': 'application/json',",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"        }",
											"",
											"    }, function (err, res) {",
											"",
											"        var jsonData = res.json();",
											"        pm.expect(jsonData.id).not.to.eql(null);",
											"        pm.test(\"Response body available\", () => true);",
											"        pm.variables.set(\"UserId\", jsonData[0].id);",
											"        console.log(jsonData[0].id);",
											"        var UserId = pm.variables.get(\"UserId\");",
											"        console.log(\"UserId: \" + UserId);",
											"",
											"    });",
											"}",
											"else if (currentCode == \"INS\") {",
											"",
											"    console.log(\"In INS_Companies\");",
											"    companies = pm.environment.get(\"INS_Companies\").split(',');",
											"",
											"    var cid = companies[0];",
											"",
											"    var url = pm.variables.get(\"baseURI\");",
											"    url = url.concat(\"/api/companies/\" + cid + \"/users\");",
											"",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: 'GET',",
											"        header: {",
											"            'Accept': 'application/json',",
											"            'Content-Type': 'application/json',",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"        }",
											"",
											"    }, function (err, res) {",
											"        var jsonData = res.json();",
											"",
											"        pm.expect(jsonData.id).not.to.eql(null);",
											"        pm.test(\"Response body available\", () => true);",
											"        pm.variables.set(\"UserId\", jsonData[0].id);",
											"",
											"        var UserId = pm.variables.get(\"UserId\");",
											"        console.log(\"UserId: \" + UserId);",
											"",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var counter = parseInt(pm.collectionVariables.get('count2'));\r",
											"let limit = parseInt(pm.collectionVariables.get('productCount2'));\r",
											"let found = false;\r",
											"console.log(\"limit:\" + limit);\r",
											"console.log(\"counter:\" + counter);\r",
											"\r",
											"var expProductcode = pm.variables.get(\"code\");\r",
											"console.log(expProductcode);\r",
											"\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"To check user permissions \" + expProductcode, function () {\r",
											"    for (i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i].productCode).to.eql(expProductcode);\r",
											"        //  pm.expect(responseJSONdata[i].entityType).to.eql(\"Company\");\r",
											"    }\r",
											"});\r",
											"\r",
											"if (counter < limit && !found) {\r",
											"    console.log(\"setting next request\");\r",
											"    postman.setNextRequest(\"Get UserPermissions/productCode=ALL\");\r",
											"    pm.collectionVariables.unset(\"count2\");\r",
											"    pm.collectionVariables.set(\"count2\", parseInt(counter) + 1);\r",
											"} else if (counter === limit) {\r",
											"    console.log(\"Condition match! Execution loop completed\");\r",
											"    pm.collectionVariables.set(\"count2\", 0);\r",
											"    pm.collectionVariables.set(\"code\", pm.environment.get(\"productCode\"));\r",
											"    console.log(\"Counter reset to \" + pm.collectionVariables.get(\"count2\"));\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{UserId}}?productCode={{code}}&entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{UserId}}"
									],
									"query": [
										{
											"key": "productCode",
											"value": "{{code}}"
										},
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Userpermissions/{id}/roles/{roleId}?entityType=Company",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var ccP = pm.environment.get(\"productCode\");",
											"console.log(\"current product code---->\" + ccP);",
											"",
											"var cid = pm.environment.get(\"Company_Id_G\");",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/companies/\" + cid + \"/users\");",
											"",
											"pm.sendRequest({",
											"  url: url,",
											"  method: 'GET',",
											"  header: {",
											"    'Accept': 'application/json',",
											"    'Content-Type': 'application/json',",
											"    'x-platform-code': pm.environment.get(\"platformCode\"),",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"  }",
											"}, function (err, res) {",
											"  var jsonData = res.json();",
											"  pm.variables.set(\"UserId\", jsonData[0].id);",
											"",
											"  var url = pm.variables.get(\"baseURI\");",
											"  url = url.concat(\"/api/Companies/\" + cid + \"/roles?productCode=\" + ccP + \"&isActive=true\");",
											"",
											"  pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"      'Accept': 'application/json',",
											"      'Content-Type': 'application/json',",
											"      'x-platform-code': pm.environment.get(\"platformCode\"),",
											"      'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"    }",
											"  },",
											"    function (err, res) {",
											"      if (err) { console.log(\"error :\" + err); };",
											"      var jsonData = res.json();",
											"      // var jsonData = JSON.parse(responseBody);",
											"        for(i=0; i <= jsonData.length; i++)",
											"        {",
											"            if(jsonData[i].isActive == true)",
											"            {",
											"                var roleIdNew = jsonData[i].roleId;",
											"                var roleNameNew = jsonData[i].roleName;",
											"                console.log(\"roleId--->\" + roleIdNew);",
											"                console.log(\"roleName--->\" + roleNameNew);",
											"",
											"                pm.environment.set(\"roldeId\", roleIdNew);",
											"                break;",
											"            }",
											"        }",
											"    //   var roleIdNew = jsonData[0].roleId;",
											"    //   var roleNameNew = jsonData[0].roleName;",
											"    //   console.log(\"roleId--->\" + roleIdNew);",
											"    //   console.log(\"roleName--->\" + roleNameNew);",
											"",
											"    //   pm.environment.set(\"roldeId\", roleIdNew);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"var UserId = pm.variables.get(\"UserId\");\r",
											"\r",
											"pm.test(\"Validating userpermissions roles format from response body \", function () {\r",
											"    for (i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i]).to.have.all.keys('userParticipantId', 'permissionBundleId','permissionBundleName','isEntitled');\r",
											"    }\r",
											"});\r",
											"// var permissionBundleName = [\r",
											"//     \"SCF Admin\",\r",
											"//     \"SCF Buyer Admin\",\r",
											"//     \"SCF Buyer Read\",\r",
											"//     \"SCF Buyer Write\",\r",
											"//     \"SCF Funder Admin\",\r",
											"//     \"SCF Funder Read\",\r",
											"//     \"SCF Funder Write\",\r",
											"//     \"SCF Supplier Admin\",\r",
											"//     \"SCF Supplier Read\",\r",
											"//     \"SCF Supplier Write\",\r",
											"//     \"Group Bundle\",\r",
											"//     \"SCF Admin\",\r",
											"//     \"Subgroup Bundle\"\r",
											"// ];\r",
											"// pm.test(\"Validate the userpermissions returned for company : \" + responseJSONdata.length, function () {\r",
											"//     for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"//         var permissionBundleNameArray = Object.entries(responseJSONdata[i]);\r",
											"//         console.log(permissionBundleNameArray);\r",
											"\r",
											"//         pm.expect(permissionBundleName.includes(permissionBundleNameArray[2][1])).to.equal(true);\r",
											"//     }\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{UserId}}/roles/{{roldeId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{UserId}}",
										"roles",
										"{{roldeId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Userpermissions/{id}/roles/{roleId}?entityType=Company_OEN-1657",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var ccP = pm.environment.get(\"productCode\");",
											"// console.log(\"current product code---->\" + ccP);",
											"",
											"var cid = pm.environment.get(\"PTSAdmin\");",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/companies/\" + cid + \"/entitlements\"); //roles",
											"",
											"pm.sendRequest({",
											"  url: url,",
											"  method: 'GET',",
											"  header: {",
											"    'Accept': 'application/json',",
											"    'Content-Type': 'application/json',",
											"    'x-platform-code': pm.environment.get(\"platformCode\"),",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"  }",
											"}, function (err, res) {",
											"  var jsonData = res.json();",
											"    for(i=0; i <= jsonData.length; i++)",
											"    {",
											"        if(jsonData[i].isActive == true)",
											"        {",
											"            pm.variables.set(\"ptsRoleId\", jsonData[i].roleId);",
											"            break;",
											"        }",
											"    }",
											"    var url = pm.variables.get(\"baseURI\");",
											"    url = url.concat(\"/api/companies/\" + cid + \"/users\");",
											"",
											"    pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"    }",
											"    }, function (err, res) {",
											"    var jsonData = res.json();",
											"    pm.variables.set(\"ptsUserId\", jsonData[0].id);",
											"",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"var UserId = pm.variables.get(\"UserId\");\r",
											"\r",
											"pm.test(\"Validating userpermissions roles format from response body \", function () {\r",
											"    for (i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i]).to.have.all.keys('userParticipantId', 'permissionBundleId','permissionBundleName','isEntitled');\r",
											"    }\r",
											"});\r",
											"var permissionBundleName = [\r",
											"    \"Ops User\",\r",
											"    \"Blotter View\",\r",
											"    \"Bank Account View\",\r",
											"    \"Bank Account Write\",\r",
											"    \"Bank Account Confirm\",\r",
											"    \"Bank Entry View\",\r",
											"    \"Bank Entry Write\",\r",
											"    \"Bank Entry Confirm\",\r",
											"    \"Apply Funds View\",\r",
											"    \"Remittance Upload\",\r",
											"    \"Payment Application & Adjustments\",\r",
											"    \"Application Confirm\",\r",
											"    \"Payments View\",\r",
											"    \"Payments Action\",\r",
											"    \"Payments Transmit-API Limited\",\r",
											"    \"Payments Transmit\",\r",
											"    \"Ownership Ledger View\",\r",
											"    \"Settings View\",\r",
											"    \"Settings Write\",\r",
											"    \"Client Bank Account View\",\r",
											"    \"Client Bank Account Callback\",\r",
											"    \"Client Bank Account Write\",\r",
											"    \"Manual Asset Update\",\r",
											"    \"PushForReconciliation\"\r",
											"];\r",
											"pm.test(\"Validate the userpermissions returned for PTS Admin company \", function () {\r",
											"    for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"        var permissionBundleNameArray = Object.entries(responseJSONdata[i]);\r",
											"        console.log(permissionBundleNameArray);\r",
											"\r",
											"        pm.expect(permissionBundleName.includes(permissionBundleNameArray[2][1])).to.equal(true);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{ptsUserId}}/roles/{{ptsRoleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{ptsUserId}}",
										"roles",
										"{{ptsRoleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET UserPermissions/{id}/roles/{roleId}/bundles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var ccP = pm.environment.get(\"productCode\");",
											"// console.log(\"current product code---->\" + ccP);",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/users?count=2000&skip=0&productCode=MO\");",
											"",
											"pm.sendRequest({",
											"  url: url,",
											"  method: 'GET',",
											"  header: {",
											"    'Accept': 'application/json',",
											"    'Content-Type': 'application/json',",
											"    'x-platform-code': pm.environment.get(\"platformCode\"),",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"  }",
											"}, function (err, res) {",
											"  var jsonData = res.json();",
											"    for(i=0; i <= jsonData.length; i++)",
											"    {",
											"        if(jsonData[i].userName == pm.environment.get(\"platformUser\"))",
											"        {",
											"            pm.variables.set(\"bunddlesUserId\", jsonData[i].id);",
											"            pm.variables.set(\"bunddlesCmpName\", jsonData[i].companyName);",
											"            break;",
											"        }",
											"    }",
											"    var url = pm.variables.get(\"baseURI\");",
											"    url = url.concat(\"/api/Companies?count=2000&productCode=MO\");",
											"",
											"    pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"    }",
											"    }, function (err, res) {",
											"    var jsonData = res.json();",
											"    for(i=0; i <= jsonData.length; i++)",
											"    {",
											"        if(jsonData[i].name == pm.variables.get(\"bunddlesCmpName\"))",
											"        {",
											"            pm.variables.set(\"bunddlesCmpId\", jsonData[i].companyId);",
											"            break;",
											"        }",
											"    }",
											"",
											"    var url = pm.variables.get(\"baseURI\");",
											"    url = url.concat(\"/api/companies/\" + pm.variables.get(\"bunddlesCmpId\") + \"/entitlements\"); //roles",
											"",
											"    pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"    }",
											"    }, function (err, res) {",
											"    var jsonData = res.json();",
											"        for(i=0; i <= jsonData.length; i++)",
											"        {",
											"            if(jsonData[i].isActive == true && jsonData[i].productCode ==\"MO\")",
											"            {",
											"                pm.variables.set(\"bunddlesRoleId\", jsonData[i].roleId);",
											"                break;",
											"            }",
											"        }",
											"         });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"var UserId = pm.variables.get(\"UserId\");\r",
											"\r",
											"pm.test(\"Validating userpermissions/bundles roles format from response body \", function () {\r",
											"    for (i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name','description','bundleTypeId','productCode','permissions','roles');//,'type','productName','associatedUserPermissionsCount',\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{bunddlesUserId}}/roles/{{bunddlesRoleId}}/bundles?platformCode={{platformCode}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{bunddlesUserId}}",
										"roles",
										"{{bunddlesRoleId}}",
										"bundles"
									],
									"query": [
										{
											"key": "platformCode",
											"value": "{{platformCode}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "OEN-44 (LQX Permissions)"
				},
				{
					"name": "Lookups",
					"item": [
						{
							"name": "GET currencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check currency details: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].currencyCode).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating currency format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('currencyCode', 'name');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/currencies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"currencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET governing laws",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//try {\r",
											"if (pm.response.code == 200 && responseBody !== '') {\r",
											"    var responseJSONdata = JSON.parse(responseBody);\r",
											"    pm.test(\"To check inco-term-types details not null: \" + responseJSONdata.length, function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].governingLawId).to.not.eql(null);\r",
											"        }\r",
											"    })\r",
											"    pm.test(\"Validating inco-term-types format from response body \", function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i]).to.have.all.keys('governingLawId', 'name','isActive');\r",
											"        }\r",
											"    });\r",
											"}\r",
											"// }\r",
											"// catch (e) {\r",
											"//     pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"// }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/governing-laws",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"governing-laws"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET countries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" \r",
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check country details: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].countryCode).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating country format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('countryCode', 'name');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/countries",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"countries"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET invoice-duedate-adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check invoice-duedate-adjustments details: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating invoice-duedate-adjustments format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/invoice-duedate-adjustments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"invoice-duedate-adjustments"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET regions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check regions details: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].regionCode).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating regions format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('regionCode', 'name');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/regions",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"regions"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET relationship-statuses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check relationship-statuses details: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"                  pm.expect(responseJSONdata[i].name).to.be.oneOf(['Active','Inactive','Pending']);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating relationship-statuses format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/relationship-statuses",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"relationship-statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET sectors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" \r",
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check sectors details not null: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating sectors format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/sectors",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"sectors"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET industries",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/sectors\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"sectorId\", 6); //jsonData[jsonData.length -1 ].id);\r",
											"    console.log(pm.variables.get(\"sectorId\"));\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check sectors details not null: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating sectors format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'sectorId', 'name');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/sectors/{{sectorId}}/industries",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"sectors",
										"{{sectorId}}",
										"industries"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET institution-types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check institution-types details not null: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating institution-types format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id','name');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/institution-types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"institution-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET disclosure-types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check disclosure-types details not null: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].name).to.be.oneOf(['Disclosed', 'Undisclosed']);\r",
											"\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating disclosure-types format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/disclosure-types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"disclosure-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET state-provinces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check state-provinces details not null: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating state-provinces format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'countryCode', 'name');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"countryId\", 'US');//jsonData[6].countryCode);\r",
											"    console.log(pm.variables.get(\"countryId\"));\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/countries/{{countryId}}/state-provinces",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"countries",
										"{{countryId}}",
										"state-provinces"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET inco-term-types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//try {\r",
											"if (pm.response.code == 200 && responseBody !== '') {\r",
											"    var responseJSONdata = JSON.parse(responseBody);\r",
											"    pm.test(\"To check inco-term-types details not null: \" + responseJSONdata.length, function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"        }\r",
											"    })\r",
											"    pm.test(\"Validating inco-term-types format from response body \", function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name');\r",
											"        }\r",
											"    });    \r",
											"}\r",
											"// }\r",
											"// catch (e) {\r",
											"//     pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"// }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/inco-term-types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"inco-term-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET invoice-duedate-calenders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check invoice-due-date-calendars: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating invoice-due-date-calendars format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/invoice-due-date-calendars",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"invoice-due-date-calendars"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET baserates/types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check baserates/types: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].baseRateTypeCode).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating baserates/types format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('baseRateTypeCode', 'description','source','isManual');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/baserates/types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"baserates",
										"types"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET delegation-types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var permissionBundleName = [\r",
											"    \"Accept/Bind Quotes\",\r",
											"    \"Read Only\",\r",
											"    \"RFQ Only\"\r",
											"]\r",
											"\r",
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check delegation-types not null: \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].description).to.not.eql(null);\r",
											"\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating delegation-types format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name','description');\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validate the differnt delegation-types: \" + responseJSONdata.length, function () {\r",
											"            for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"                var permissionBundleNameArray = Object.entries(responseJSONdata[i]);\r",
											"                console.log(permissionBundleNameArray);\r",
											"\r",
											"                pm.expect(permissionBundleName.includes(permissionBundleNameArray[1][1])).to.equal(true);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/delegation-types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"delegation-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET trading-calendars",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var tradingCalendars = [\r",
											"    \"US Holiday Calendar\",\r",
											"    \"Singapore Holiday Calendar\",\r",
											"    \"US Holiday Calendar\",\r",
											"    \"Singapore Holiday Calendar\",\r",
											"    \"Canada Holiday Calendar\",\r",
											"    \"EU Holiday Calendar\",\r",
											"    \"Great Britan Holiday Calendar\",\r",
											"    \"Swiss Holiday Calendar\",\r",
											"    \"Australian Holiday Calendar\",\r",
											"    \"LIBOR US Holiday Calendar\",\r",
											"    \"SIBOR Singapore Calendar\",\r",
											"    \"Custom US Holiday Calendar\",\r",
											"    \"EU Holiday Calendar\",\r",
											"    \"UK Holiday Calendar\",\r",
											"    \"Canandian Holiday Calendar\",\r",
											"    \"Switzerland Holiday Calendar\"\r",
											"]\r",
											"\r",
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check delegation-types not null: \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].description).to.not.eql(null);\r",
											"\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating trading-calendars format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name','tradingCalendarTypeId','description');\r",
											"            }\r",
											"        });\r",
											"        // pm.test(\"Validate the differnt trading-calendars: \" + responseJSONdata.length, function () {\r",
											"        //     for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"        //         var tradingCalendarsArray = Object.entries(responseJSONdata[i]);\r",
											"        //         console.log(tradingCalendarsArray);\r",
											"\r",
											"        //         pm.expect(tradingCalendars.includes(tradingCalendarsArray[1][1])).to.equal(true);\r",
											"        //     }\r",
											"        // });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/trading-calendars",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"trading-calendars"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET program-types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var programtypesName = [\r",
											"    \"AR\",\r",
											"    \"SCF - Buyer Led\",\r",
											"    \"SCF - Supplier Led\"\r",
											"]\r",
											"\r",
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check delegation-types not null: \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].description).to.not.eql(null);\r",
											"\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating delegation-types format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name');\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validate the differnt delegation-types: \" + responseJSONdata.length, function () {\r",
											"            for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"                var programtypesNameArray = Object.entries(responseJSONdata[i]);\r",
											"                console.log(programtypesNameArray);\r",
											"\r",
											"                pm.expect(programtypesName.includes(programtypesNameArray[1][1])).to.equal(true);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/program-types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"program-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET connection-statuses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var connectionstatusesName = [\r",
											"    \"Active\",\r",
											"    \"Disabled\",\r",
											"    \"Draft\"\r",
											"]\r",
											"\r",
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check delegation-types not null: \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].description).to.not.eql(null);\r",
											"\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating delegation-types format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name');\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validate the differnt delegation-types: \" + responseJSONdata.length, function () {\r",
											"            for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"                var connectionstatusesNameArray = Object.entries(responseJSONdata[i]);\r",
											"                console.log(connectionstatusesNameArray);\r",
											"\r",
											"                pm.expect(connectionstatusesName.includes(connectionstatusesNameArray[1][1])).to.equal(true);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/connection-statuses",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"connection-statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET connection-types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var connectiontypesName = [\r",
											"    \"Bidirectional\",\r",
											"    \"Unidirectional\"\r",
											"]\r",
											"\r",
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check delegation-types not null: \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].description).to.not.eql(null);\r",
											"\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating delegation-types format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name');\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validate the differnt delegation-types: \" + responseJSONdata.length, function () {\r",
											"            for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"                var connectiontypesNameArray = Object.entries(responseJSONdata[i]);\r",
											"                console.log(connectiontypesNameArray);\r",
											"\r",
											"                pm.expect(connectiontypesName.includes(connectiontypesNameArray[1][1])).to.equal(true);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/connection-types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"connection-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET document-types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var documenttypesName = [\r",
											"    \"Assignment Agreement\",\r",
											"    \"Other\",\r",
											"    \"Participation Agreement\"\r",
											"]\r",
											"\r",
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check delegation-types not null: \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].description).to.not.eql(null);\r",
											"\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating delegation-types format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name');\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validate the differnt delegation-types: \" + responseJSONdata.length, function () {\r",
											"            for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"                var documenttypesNameArray = Object.entries(responseJSONdata[i]);\r",
											"                console.log(documenttypesNameArray);\r",
											"\r",
											"                pm.expect(documenttypesName.includes(documenttypesNameArray[1][1])).to.equal(true);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/document-types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"document-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET calculation-types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var calculationTypesName = [\r",
											"    \"Deferred Discount\",\r",
											"    \"Discount\",\r",
											"    \"Straight Discount (future)\"\r",
											"]\r",
											"\r",
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check calculation-types not null \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating calculation-types format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name');\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validate the differnt delegation-types: \" + responseJSONdata.length, function () {\r",
											"            for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"                var calculationTypesNameArray = Object.entries(responseJSONdata[i]);\r",
											"                console.log(calculationTypesNameArray);\r",
											"\r",
											"                pm.expect(calculationTypesName.includes(calculationTypesNameArray[1][1])).to.equal(true);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/calculation-types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"calculation-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET bundle-types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bundleTypes = [\r",
											"    \"Company\",\r",
											"    \"Group\",\r",
											"    \"Resource\"\r",
											"]\r",
											"\r",
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check bundleTypes null \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating bundle-types format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name');\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validate the differnt bundleTypes: \" + responseJSONdata.length, function () {\r",
											"            for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"                var bundleTypesArray = Object.entries(responseJSONdata[i]);\r",
											"                console.log(bundleTypesArray);\r",
											"\r",
											"                pm.expect(bundleTypes.includes(bundleTypesArray[1][1])).to.equal(true);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/bundle-types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"bundle-types"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseBody != null) {",
									"    if (responseBody == '[]' || responseBody == '{}') {",
									"        tests[\"Body is empty \" + responseBody] = false;",
									"        console.log(\"responseBody\", responseBody);",
									"    }",
									"    else {",
									"        tests[\"Body is not empty\"] = true;",
									"    }",
									"}",
									"else {",
									"    tests[\"Body is empty\" + responseBody] = false;",
									"    console.log(\"responseBody\", responseBody);",
									"}",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Groups",
					"item": [
						{
							"name": "GET Groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//try {\r",
											"if (pm.response.code == 200 && responseBody !== '') {\r",
											"    var responseJSONdata = JSON.parse(responseBody);\r",
											"    pm.test(\"To check group details not null: \"+responseJSONdata.length, function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"        }\r",
											"    });\r",
											"    pm.test(\"Validating group format from response body \", function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i]).to.have.any.keys('id', 'name','groupType','numberOfCompanies');\r",
											"        }\r",
											"    });    \r",
											"    // pm.test(\"To check group list count: \", function () {\r",
											"    //     pm.expect(responseJSONdata.length).to.be.eql(20);\r",
											"       \r",
											"    // });\r",
											"}\r",
											"// }\r",
											"// catch (e) {\r",
											"//     pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"// }"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Groups?platformCode={{platformCode}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Groups"
									],
									"query": [
										{
											"key": "platformCode",
											"value": "{{platformCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Groups by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//try {\r",
											"if (pm.response.code == 200 && responseBody !== '') {\r",
											"    var responseJSONdata = JSON.parse(responseBody);\r",
											"    pm.test(\"To check group details not null: \"+responseJSONdata.length, function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"        }\r",
											"    });\r",
											"    pm.test(\"Validating group format from response body \", function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i]).to.have.any.keys('id', 'name','groupType','numberOfCompanies');\r",
											"        }\r",
											"    });    \r",
											"    pm.test(\"To check group list by group Name \", function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect((responseJSONdata[i].name.includes(\"Tes\")) || (responseJSONdata[i].name.includes(\"tes\") ));\r",
											"        }\r",
											"    });\r",
											"}\r",
											"// }\r",
											"// catch (e) {\r",
											"//     pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"// }"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Groups?count=10&skip=0&groupName=tes",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Groups"
									],
									"query": [
										{
											"key": "count",
											"value": "10"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "groupName",
											"value": "tes"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Groups by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//try {\r",
											"if (pm.response.code == 200 && responseBody !== '') {\r",
											"    var responseJSONdata = JSON.parse(responseBody);\r",
											"    pm.test(\"To check group details not null: \", function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"        }\r",
											"    })\r",
											"    pm.test(\"Validating group format from response body \", function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name','recordType');\r",
											"        }\r",
											"    });    \r",
											"}\r",
											"// }\r",
											"// catch (e) {\r",
											"//     pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"// }"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Groups\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"groupId\", jsonData[0].id);\r",
											"    console.log(pm.variables.get(\"groupId\"));\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Groups/{{groupId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Groups",
										"{{groupId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "BaseRateAdmin",
					"item": [
						{
							"name": "GET baseratetypes - hasCompleteValues=false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check baseratetypes details: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].baseRateTypeCode).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating baseratetypes format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('baseRateTypeCode', 'description','tenorTerms','isManual','source');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI_plat}}/api/baseratetypes?hasCompleteValues=false",
									"host": [
										"{{baseURI_plat}}"
									],
									"path": [
										"api",
										"baseratetypes"
									],
									"query": [
										{
											"key": "hasCompleteValues",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET baseRateValues",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check baseratetypes details: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].baseRateTypeCode).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating baseratetypes format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('baseRateTypeCode', 'asOfDate','rate','termName','dayCount','baseRatePercentFloor','rateOriginal','creditSpreadAdjustment','isFloorValueUsed');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI_plat}}/api/baseratevalues/api_M7L/2020-10-27?latest=true",
									"host": [
										"{{baseURI_plat}}"
									],
									"path": [
										"api",
										"baseratevalues",
										"api_M7L",
										"2020-10-27"
									],
									"query": [
										{
											"key": "latest",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET baseratelastasofdate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check baseratetypes details: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].baseRateTypeCode).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI_plat\");\r",
											"url = url.concat(\"/api/baseratetypes\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(var i=0; i<= jsonData.length ; i++)\r",
											"    {\r",
											"        var calCode = jsonData[i].baseRateTypeCode;\r",
											"        pm.variables.set(\"calCode\", jsonData[i].baseRateTypeCode);\r",
											"        break;\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI_plat}}/api/baseratelastasofdate/{{calCode}}",
									"host": [
										"{{baseURI_plat}}"
									],
									"path": [
										"api",
										"baseratelastasofdate",
										"{{calCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET baseRateCurve",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var url = pm.environment.get(\"baseURI_plat\");\r",
											"// url = url.concat(\"/api/baseratevalues/api_M7L/2020-10-27?latest=true\");\r",
											"\r",
											"// pm.sendRequest({\r",
											"//     url: url,\r",
											"//     method: 'GET',\r",
											"//     header: {\r",
											"//         'Accept': 'application/json',\r",
											"//         'Content-Type': 'application/json',\r",
											"//         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"//     }\r",
											"\r",
											"// }, function (err, res) {\r",
											"//     var jsonData = res.json();\r",
											"//     for(var i=0; i<= 1080 ; i++)\r",
											"//     {\r",
											"//         if(jsonData[i].dayCount >= 1 && jsonData[i].dayCount <= 7 )\r",
											"//         {\r",
											"//             forecast(i,[jsonData[0].dayCount,jsonData[1].dayCount], [jsonData[0].dayCount,jsonData[1].dayCount]);\r",
											"//             console.log(i +\" : \" + forecast(i,[jsonData[0].dayCount,jsonData[1].dayCount], [jsonData[0].dayCount,jsonData[1].dayCount]));\r",
											"//         }\r",
											"//     }\r",
											"// });\r",
											"\r",
											"try{\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check baseratecurve not null: \" , function () { //+ responseJSONdata.length\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].baseRateTypeCode).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"To check baseratecurve details: \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].baseRateTypeCode).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        console.log(\"baseratecurve---> \"+ forecast(4,[0.7339,1.623], [1,7]))\r",
											"        // console.log(\"baseratecurve---> \"+ forecast(15,[0.246,0.82888], [7,30]))\r",
											"        \r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}\r",
											"\r",
											"function forecast(x, ky, kx)\r",
											"{\r",
											"    var i=0, nr=0, dr=0,ax=0,ay=0,a=0,b=0;\r",
											"    function average(ar) \r",
											"    {\r",
											"        var r=0;\r",
											"        for (i=0;i<ar.length;i++)\r",
											"        {\r",
											"            r = r+ar[i];\r",
											"        }\r",
											"        return r/ar.length;\r",
											"    }\r",
											"    ax=average(kx);\r",
											"    ay=average(ky);\r",
											"    for (i=0;i<kx.length;i++)\r",
											"    {\r",
											"        nr = nr + ((kx[i]-ax) * (ky[i]-ay));\r",
											"        dr = dr + ((kx[i]-ax)*(kx[i]-ax))\r",
											"    }\r",
											"    b=nr/dr;\r",
											"    a=ay-b*ax;\r",
											"    return (a+b*x);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI_plat}}/api/baseratecurve/api_M7L/2020-10-27?latest=true",
									"host": [
										"{{baseURI_plat}}"
									],
									"path": [
										"api",
										"baseratecurve",
										"api_M7L",
										"2020-10-27"
									],
									"query": [
										{
											"key": "latest",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET calendar-non-trading-dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check baseratetypes details: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].baseRateTypeCode).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        \r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI_plat}}/api/calendar-non-trading-dates",
									"host": [
										"{{baseURI_plat}}"
									],
									"path": [
										"api",
										"calendar-non-trading-dates"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET calendar-non-trading-dates by calendar-code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check baseratetypes details: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].baseRateTypeCode).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI_plat\");\r",
											"url = url.concat(\"/api/baseratetypes\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(var i=0; i<= jsonData.length ; i++)\r",
											"    {\r",
											"        var calCode = jsonData[i].baseRateTypeCode;\r",
											"        pm.variables.set(\"calCode\", jsonData[i].baseRateTypeCode);\r",
											"        break;\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI_plat}}/api/calendar-non-trading-dates?calendar-code={{calCode}}",
									"host": [
										"{{baseURI_plat}}"
									],
									"path": [
										"api",
										"calendar-non-trading-dates"
									],
									"query": [
										{
											"key": "calendar-code",
											"value": "{{calCode}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Relationship",
					"item": [
						{
							"name": "Get Realtionships productCode=AR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200 && responseBody !== '') {\r",
											"    var responseJSONdata = JSON.parse(responseBody);\r",
											"    pm.test(\"To check record-types details not null: \" + responseJSONdata.length, function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"        }\r",
											"    });\r",
											"    pm.test(\"To check productCode 'AR' \" , function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].productCode).to.eql(\"AR\");\r",
											"        }\r",
											"    });\r",
											"    pm.test(\"Validating record-types format from response body \", function () {\r",
											"     //   for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[0]).to.have.any.keys('id', 'productCode', 'buyerId', 'buyerName', 'supplierId', 'supplierName', 'currencyCode', 'descOfGoodsServices', 'startDate', 'retainedDays', 'incoTerms', 'invoiceDueDateAdjustmentId','invoiceDueDateAdjustement','paymentTerms',  'governingLawId',\r",
											"        'governingLaw', 'additionalDetails', 'regionCode', 'statusId', 'status', 'disclosureTypeId','isPayablesEligible',\r",
											"        'recordTypeId','recordType', 'incoTermsTypeId', 'salesforceId', 'annualSales','calendars');\r",
											"       // }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/relationships?relationshipTypeId=2",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"relationships"
									],
									"query": [
										{
											"key": "relationshipTypeId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Realtionships productCode=AR_MOadmin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200 && responseBody !== '') {\r",
											"    var responseJSONdata = JSON.parse(responseBody);\r",
											"    pm.test(\"To check record-types details not null: \" + responseJSONdata.length, function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"        }\r",
											"    });\r",
											"    pm.test(\"To check productCode 'AR' \" , function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].productCode).to.eql(\"AR\");\r",
											"        }\r",
											"    });\r",
											"    pm.test(\"Validating record-types format from response body \", function () {\r",
											"     //   for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[0]).to.have.any.keys('id', 'productCode', 'buyerId', 'buyerName', 'supplierId', 'supplierName', 'currencyCode', 'descOfGoodsServices', 'startDate', 'retainedDays', 'incoTerms', 'invoiceDueDateAdjustmentId','invoiceDueDateAdjustement','paymentTerms',  'governingLawId',\r",
											"        'governingLaw', 'additionalDetails', 'regionCode', 'statusId', 'status', 'disclosureTypeId','isPayablesEligible',\r",
											"        'recordTypeId','recordType', 'incoTermsTypeId', 'salesforceId', 'annualSales','calendars');\r",
											"       // }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Relationships?relationshipTypeId=2",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Relationships"
									],
									"query": [
										{
											"key": "relationshipTypeId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Realtionships productCode=SCF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200 && responseBody !== '') {\r",
											"    var responseJSONdata = JSON.parse(responseBody);\r",
											"    pm.test(\"To check record-types details not null: \" + responseJSONdata.length, function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"        }\r",
											"    });\r",
											"    pm.test(\"To check productCode 'SCF' \" , function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].productCode).to.eql(\"SCF\");\r",
											"        }\r",
											"    });\r",
											"    pm.test(\"Validating record-types format from response body \", function () {\r",
											"     //   for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[0]).to.have.any.keys('id', 'productCode', 'buyerId', 'buyerName', 'supplierId', 'supplierName', 'currencyCode', 'descOfGoodsServices', 'startDate', 'retainedDays', 'incoTerms', 'invoiceDueDateAdjustmentId','invoiceDueDateAdjustement','paymentTerms',  'governingLawId',\r",
											"        'governingLaw', 'additionalDetails', 'regionCode', 'statusId', 'status', 'disclosureTypeId','isPayablesEligible',\r",
											"        'recordTypeId','recordType', 'incoTermsTypeId', 'salesforceId', 'annualSales','calendars');\r",
											"       // }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Relationships?relationshipTypeId=1",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Relationships"
									],
									"query": [
										{
											"key": "relationshipTypeId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Realtionships productCode=SCF_MOadmin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200 && responseBody !== '') {\r",
											"    var responseJSONdata = JSON.parse(responseBody);\r",
											"    pm.test(\"To check record-types details not null: \" + responseJSONdata.length, function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"        }\r",
											"    });\r",
											"    pm.test(\"To check productCode 'SCF' \" , function () {\r",
											"        for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[i].productCode).to.eql(\"SCF\");\r",
											"        }\r",
											"    });\r",
											"    pm.test(\"Validating record-types format from response body \", function () {\r",
											"     //   for (i = 0; i < responseJSONdata.length; i++) {\r",
											"            pm.expect(responseJSONdata[0]).to.have.any.keys('id', 'productCode', 'buyerId', 'buyerName', 'supplierId', 'supplierName', 'currencyCode', 'descOfGoodsServices', 'startDate', 'retainedDays', 'incoTerms', 'invoiceDueDateAdjustmentId','invoiceDueDateAdjustement','paymentTerms',  'governingLawId',\r",
											"        'governingLaw', 'additionalDetails', 'regionCode', 'statusId', 'status', 'disclosureTypeId','isPayablesEligible',\r",
											"        'recordTypeId','recordType', 'incoTermsTypeId', 'salesforceId', 'annualSales','calendars');\r",
											"       // }\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Relationships?relationshipTypeId=1",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Relationships"
									],
									"query": [
										{
											"key": "relationshipTypeId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Realtionships/by Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Relationships?relationshipTypeId=2\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"relId\", jsonData[jsonData.length -1 ].id);\r",
											"    console.log(pm.variables.get(\"relId\"));\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    var responseJSONdata = JSON.parse(responseBody);\r",
											"var expRelId = pm.variables.get(\"relId\");\r",
											"    pm.test(\"To check Relationship is displayed by id \" + expRelId, function () {\r",
											"        pm.expect(responseJSONdata.id).to.eql(expRelId);\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Relationships/{{relId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Relationships",
										"{{relId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Relationships/types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Validating Relationships/types format from response body \", function () {\r",
											"    for(var i=0; i<responseJSONdata.length; i++)\r",
											"    {\r",
											"        pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name','productCode');\r",
											"        // pm.expect(responseJSONdata[i].name).to.be.oneOf(['Active','Inactive','Pending'])\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Relationships/types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Relationships",
										"types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Inblock Relationship - OEN-1296",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Validating inblockrelationships format from response body \", function () {\r",
											"    for(var i=0; i<responseJSONdata.length; i++)\r",
											"    {\r",
											"        pm.expect(responseJSONdata[i]).to.have.any.keys('status', 'supplierName', 'supplierCountryOfJurisdiction', 'customerName', 'customerCountryOfJurisdiction', 'distributorName', 'distributorCountryOfJurisdiction', 'currencyCode', 'governingLaw', 'recordType');\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/relationships?count=100&skip=0&relationshipTypeId=3",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"relationships"
									],
									"query": [
										{
											"key": "count",
											"value": "100"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "relationshipTypeId",
											"value": "3"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Participant",
					"item": [
						{
							"name": "Get Supplier_AR",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"productCodeC\", \"AR\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var code = pm.variables.get(\"productCodeC\");\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"To check Suppliers are displayed for product \" + code , function () {\r",
											"  for(var i=0; i<jsonData.length; i++){\r",
											"    pm.expect(jsonData[i].productCode).to.eql(code);\r",
											"    pm.expect(jsonData[i].participantRole).to.eql(\"Supplier\");\r",
											"  }\r",
											"}); \r",
											"// pm.test(\"Validating participant format from response body \", function () {\r",
											"//   for (i = 0; i < jsonData.length; i++) {\r",
											"//     pm.expect(jsonData[i]).to.have.all.keys('id', 'name', 'productCode', 'roleId', 'participantRole', 'isActive', 'countryOfJurisdiction');\r",
											"//   }\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Participants?role=Supplier&productCode={{productCodeC}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Participants"
									],
									"query": [
										{
											"key": "role",
											"value": "Supplier"
										},
										{
											"key": "productCode",
											"value": "{{productCodeC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Supplier_SCF",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"productCodeC\", \"AR\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var code = pm.variables.get(\"productCodeC\");\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check Suppliers are displayed for product \" + code , function () {\r",
											"  for(var i=0; i<jsonData.length; i++){\r",
											"    pm.expect(jsonData[i].productCode).to.eql(code);\r",
											"    pm.expect(jsonData[i].participantRole).to.eql(\"Supplier\");\r",
											"  }\r",
											"}); \r",
											"// pm.test(\"Validating participant format from response body \", function () {\r",
											"//   for (i = 0; i < jsonData.length; i++) {\r",
											"//     pm.expect(jsonData[i]).to.have.all.keys('id', 'name', 'productCode', 'roleId', 'participantRole', 'isActive', 'countryOfJurisdiction');\r",
											"//   }\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Participants?role=Supplier&productCode={{productCodeC}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Participants"
									],
									"query": [
										{
											"key": "role",
											"value": "Supplier"
										},
										{
											"key": "productCode",
											"value": "{{productCodeC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Buyer_AR",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"productCodeC\", \"AR\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var code = pm.variables.get(\"productCodeC\");\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check Suppliers are displayed for product \" + code , function () {\r",
											"  for(var i=0; i<jsonData.length; i++){\r",
											"    pm.expect(jsonData[i].productCode).to.eql(code);\r",
											"    pm.expect(jsonData[i].participantRole).to.eql(\"Buyer\"); //Debtor\r",
											"  }\r",
											"}); \r",
											"// pm.test(\"Validating participant format from response body \", function () {\r",
											"//   for (i = 0; i < jsonData.length; i++) {\r",
											"//     pm.expect(jsonData[i]).to.have.all.keys('id', 'name', 'productCode', 'roleId', 'participantRole', 'isActive', 'countryOfJurisdiction');\r",
											"//   }\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Participants?role=buyer&productCode={{productCodeC}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Participants"
									],
									"query": [
										{
											"key": "role",
											"value": "buyer"
										},
										{
											"key": "productCode",
											"value": "{{productCodeC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Buyer_SCF",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"productCodeC\", \"SCF\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var code = pm.variables.get(\"productCodeC\");\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check Suppliers are displayed for product \" + code , function () {\r",
											"  for(var i=0; i<jsonData.length; i++){\r",
											"    pm.expect(jsonData[i].productCode).to.eql(code);\r",
											"    pm.expect(jsonData[i].participantRole).to.eql(\"Debtor\"); \r",
											"  }\r",
											"}); \r",
											"// pm.test(\"Validating participant format from response body \", function () {\r",
											"//   for (i = 0; i < jsonData.length; i++) {\r",
											"//     pm.expect(jsonData[i]).to.have.all.keys('id', 'name', 'productCode', 'roleId', 'participantRole', 'isActive', 'countryOfJurisdiction');\r",
											"//   }\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Participants?role=debtor&productCode={{productCodeC}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Participants"
									],
									"query": [
										{
											"key": "role",
											"value": "debtor"
										},
										{
											"key": "productCode",
											"value": "{{productCodeC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Participants/{id}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Participants?role=Supplier&productCode=\"+pm.environment.get(\"productCode\"));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"participantId1\", jsonData[0].id);\r",
											"    console.log(pm.variables.get(\"participantId1\"));\r",
											"      \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var code = pm.variables.get(\"productCodeC\");\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To check participantId1 are displayed for product \" + code , function () {\r",
											"  for(var i=0; i<jsonData.length; i++){\r",
											"    pm.expect(jsonData[i].productCode).to.eql(pm.environment.get(\"productCode\"));\r",
											"    pm.expect(jsonData[i].id).to.eql(pm.variables.get(\"participantId1\"));\r",
											"\r",
											"  }\r",
											"}); \r",
											"pm.test(\"Validating participant format from response body \", function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.all.keys('id', 'name', 'productCode', 'roleId', 'participantRole', 'isActive', 'countryOfJurisdiction');\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Participants/{{participantId1}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Participants",
										"{{participantId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Partcipant by company name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/companies/\"+pm.environment.get(\"Company_Id_G\"));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"\r",
											"    pm.variables.set(\"companyName\", jsonData.legalEntityName);\r",
											"   \r",
											"    console.log(\"company name --> \"+pm.variables.get(\"companyName\"));\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/companies/\"+pm.environment.get(\"Company_Id_G\")+\"/roles\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        for(i=0; i<jsonData.length; i++)\r",
											"        {\r",
											"            if(jsonData[i].isActive  == true)\r",
											"        \r",
											"            pm.variables.set(\"productCodeC\", jsonData[i].productCode);\r",
											"        } \r",
											"        console.log(\"productCodeC --> \"+pm.variables.get(\"productCodeC\"));\r",
											"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var code = pm.variables.get(\"productCodeC\");\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"To check participant for product: \" + code , function () {\r",
											"  for(var i=0; i<jsonData.length; i++){\r",
											"    pm.expect(jsonData[i].productCode).to.eql(code);\r",
											"    pm.expect(jsonData[i].name).to.eql(pm.variables.get(\"companyName\"));\r",
											"  }\r",
											"}); \r",
											"pm.test(\"Validating participant format from response body \", function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.all.keys('id', 'name', 'productCode', 'roleId', 'participantRole', 'isActive', 'countryOfFormation');\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Participants?companyName={{companyName}}&productCode={{productCodeC}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Participants"
									],
									"query": [
										{
											"key": "companyName",
											"value": "{{companyName}}"
										},
										{
											"key": "productCode",
											"value": "{{productCodeC}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ProductRoles",
					"item": [
						{
							"name": "Get Product roles_SCF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"To check roles displayed for product SCF\"  , function () {\r",
											"  for(var i=0; i<jsonData.length; i++){\r",
											"    pm.expect(jsonData[i].productCode).to.eql(\"SCF\");\r",
											"  }\r",
											"}); \r",
											"pm.test(\"Validating participant format from response body \", function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.all.keys('id', 'name', 'productCode', 'description','roleName');\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/products/SCF/roles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"products",
										"SCF",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product roles_AR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"To check roles displayed for product AR\"  , function () {\r",
											"  for(var i=0; i<jsonData.length; i++){\r",
											"    pm.expect(jsonData[i].productCode).to.eql(\"AR\");\r",
											"  }\r",
											"}); \r",
											"pm.test(\"Validating participant format from response body \", function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.all.keys('id', 'name', 'productCode', 'description','roleName');\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/products/AR/roles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"products",
										"AR",
										"roles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Platforms",
					"item": [
						{
							"name": "Get platforms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating platform format from response body \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.any.keys('code', 'name', 'isActive', 'platformUrl');\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Validating decimalPrecision to default to 4 or not null\", function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    if( jsonData[i].decimalPrecision == 4)\r",
											"    { \r",
											"        pm.expect(jsonData[i].decimalPrecision).to.be.eql(4);\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        pm.expect(jsonData[i].decimalPrecision).not.eql(null);\r",
											"\r",
											"    }\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/platforms?count=100&skip=0",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms"
									],
									"query": [
										{
											"key": "count",
											"value": "100"
										},
										{
											"key": "skip",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get platforms by platformCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"To check Platforms details by platformCode\"  , function () {\r",
											"  for(var i=0; i<jsonData.length; i++){\r",
											"    pm.expect(jsonData.code).to.eql(pm.environment.get(\"platformCode\"));\r",
											"  }\r",
											"}); \r",
											"pm.test(\"Validating platform format from response body \", function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.all.keys('code', 'name', 'isActive', 'platformUrl','dayCountConvention','decimalPrecision','discountMarginPrecision','replyToEmailAddress','emailFontColor','emailPrimaryColor');\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Platforms/{{platformCode}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Platforms",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get platform by products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"// pm.test(\"To check Platforms details by platformCode\"  , function () {\r",
											"//   for(var i=0; i<jsonData.length; i++){\r",
											"//     pm.expect(jsonData.code).to.eql(pm.variables.get(\"codePlatform\"));\r",
											"//   }\r",
											"// }); \r",
											"pm.test(\"Validating platform format from response body \", function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.any.keys('code', 'name', 'isActive', 'platformUrl');\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=500\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].code.includes(\"API_TestPlatform\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Platforms/{{codePlatform}}/products",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Platforms",
										"{{codePlatform}}",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get platforms by currencies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=500\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].code.includes(\"API_TestPlatform\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating format from response body for total platform currencies: \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.all.keys('currencyCode', 'name','dayCountConvention');\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatform}}/currencies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatform}}",
										"currencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get platforms by {platformCode}/message-templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating format from response body for {platformCode}/message-templates: \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"        pm.expect(jsonData[i]).to.have.all.keys('id', 'typeId','typeName','name','description','template');\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"To check {platformCode}/message-templates details for products is not null \", function () {\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        pm.expect(jsonData[i].id).to.not.eql(null);\r",
											"        pm.expect(jsonData[i].typeId).to.not.eql(null);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=500\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].code.includes(\"API_TestPlatform\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatform}}/message-templates",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatform}}",
										"message-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get platforms by {platformCode}/calculation-types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating format from response body for {platformCode}/calculation-types: \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"        pm.expect(jsonData[i]).to.have.all.keys('id', 'calculationTypeId','calculationTypeName','calculationTypeDisplayName','platformCode');\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"To check {platformCode}/calculation-types details for products is not null \", function () {\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        pm.expect(jsonData[i].id).to.not.eql(null);\r",
											"        pm.expect(jsonData[i].calculationTypeName).to.not.eql(null);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=500\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].code.includes(\"API_TestPlatform\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatform}}/calculation-types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatform}}",
										"calculation-types"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "MessageTemplates",
					"item": [
						{
							"name": "GET message-templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check message-templates not null \"+responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].typeId).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].typeName).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].description).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].template).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating MessageTemplates format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'typeId', 'typeName', 'name', 'description', 'template');\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validate the differnt message-templates: \" + responseJSONdata.length, function () {\r",
											"            for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].typeId).to.be.oneOf([1,2,3]);\r",
											"            }\r",
											"            // }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/MessageTemplates",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"MessageTemplates"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET message-templates by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check message-templates not null: \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].typeId).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].description).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].template).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating MessageTemplates format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'typeId','typeName','name','description','template');\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validate the differnt message-templates: \" + responseJSONdata.length, function () {\r",
											"            for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].messageTemplateTypeId).to.be.eql(1);\r",
											"            }\r",
											"            // }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/MessageTemplates\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"msgTid\",jsonData[0].id)\r",
											"    // for(i=0; i<jsonData.length; i++)\r",
											"    // {\r",
											"    //     if(jsonData[i].code.includes(\"API_TestPlatform\"))\r",
											"    //     {\r",
											"    //         pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
											"    //         break;\r",
											"    //     }\r",
											"    // }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/MessageTemplates/{{msgTid}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"MessageTemplates",
										"{{msgTid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET MessageTemplateTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check MessageTemplateTypes not null: \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating MessageTemplateTypes format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name');\r",
											"            }\r",
											"        });\r",
											"        // pm.test(\"Validate the differnt message-templates: \" + responseJSONdata.length, function () {\r",
											"        //     for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"        //         pm.expect(responseJSONdata[i].messageTemplateTypeId).to.be.eql(1);\r",
											"        //     }\r",
											"        //     // }\r",
											"        // });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/MessageTemplateTypes",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"MessageTemplateTypes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Distributor",
					"item": [
						{
							"name": "Get Distributors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating Distributors format from response body \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.any.keys('id', 'name');\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Validating Distributors to default to count 20\", function () {\r",
											"    pm.expect(jsonData.length).to.be.below(21);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Distributors",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Distributors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Distributors by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating Distributor format from response body: \"+pm.variables.get(\"DistributorsName\"), function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.any.keys('id', 'name');\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"Validating Distributors to default to count 10\", function () {\r",
											"    pm.expect(jsonData.length).to.be.below(10);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Distributors\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    console.log(\"-- \"+jsonData.length);\r",
											"    // for(i=0; i < jsonData.length; i++)\r",
											"    // {\r",
											"    //     if(jsonData[i].userName.includes(pm.environment.get(\"platformUser\")))\r",
											"    //     {\r",
											"            pm.variables.set(\"DistributorsName\", jsonData[0].name);\r",
											"            console.log(pm.variables.get(\"DistributorsName\"));\r",
											"    //     }\r",
											"    // } \r",
											"\r",
											"      \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Distributors?name={{DistributorsName}}&skip=0&count=10",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Distributors"
									],
									"query": [
										{
											"key": "name",
											"value": "{{DistributorsName}}"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "count",
											"value": "10"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Contacts",
					"item": [
						{
							"name": "Get contactTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating contactTypes format and name from response body \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.all.keys('id', 'name');\r",
											"    pm.expect(jsonData[i].name).to.be.oneOf(['Booking Office', 'Notice Contact','Process Agent']);\r",
											"  }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Contacts/contactTypes",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Contacts",
										"contactTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get contactRoles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating contactRoles format and name from response body \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.all.keys('id', 'name');\r",
											"    pm.expect(jsonData[i].name).to.be.oneOf(['Distribution Seller', 'Distribution Funder']);\r",
											"\r",
											"  }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Contacts/contactRoles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Contacts",
										"contactRoles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CalculationTypes",
					"item": [
						{
							"name": "Get CalculationTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating CalculationTypes format and name from response body \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.all.keys('id', 'calculationTypeId','calculationTypeName','calculationTypeDisplayName','platformCode');\r",
											"    pm.expect(jsonData[i].calculationTypeName).to.be.oneOf(['Discount', 'Deferred Discount','Straight Discount (future)']);\r",
											"  }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/CalculationTypes",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"CalculationTypes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Permissions",
					"item": [
						{
							"name": "Get Permissions/catalog-values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating CalculationTypes format and name from response body \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.all.keys('id', 'name','description','permissionBundleAssociationCount');\r",
											" \r",
											"  }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Permissions/catalog-values",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Permissions",
										"catalog-values"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Permissions/catalog-values/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating CalculationTypes format and name from response body \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.all.keys('id', 'name','description');\r",
											" \r",
											"  }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Permissions/catalog-values\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"catalogValuesId\", jsonData[0].id);\r",
											"    console.log(pm.variables.get(\"catalogValuesId\"));\r",
											"      \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Permissions/catalog-values/{{catalogValuesId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Permissions",
										"catalog-values",
										"{{catalogValuesId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Permissions/bundles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating CalculationTypes format and name from response body \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    // pm.expect(jsonData[i]).to.have.all.keys('id', 'name','description','type','productName','bundleTypeId','productCode','permissions','associatedUserPermissionsCount');\r",
											"  }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Permissions/bundles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Permissions",
										"bundles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Permissions bundles-ALL products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var counter = parseInt(pm.collectionVariables.get('count1'));\r",
											"let limit = parseInt(pm.collectionVariables.get('productCount1'));\r",
											"let found = false;\r",
											"console.log(\"limit:\" + limit);\r",
											"console.log(\"counter:\" + counter);\r",
											"\r",
											"var expProductcode = pm.collectionVariables.get(\"code\");\r",
											"console.log(expProductcode);\r",
											"\r",
											"pm.test(\"To check Permissions/bundles for product \" + expProductcode, function () {\r",
											"    for (i = 0; i < jsonData.length; i++) {\r",
											"        pm.expect(jsonData[i].productCode).to.eql(expProductcode);\r",
											"    }\r",
											"});\r",
											" \r",
											"// pm.test(\"Validating Permissions/bundles format and productName from response body \"+jsonData.length, function () {\r",
											"//   for (i = 0; i < jsonData.length; i++) {\r",
											"//     pm.expect(jsonData[i]).to.have.all.keys('id', 'name','description','type','productName','bundleTypeId','productCode','permissions','roles');\r",
											"//   }\r",
											"// });\r",
											"\r",
											"\r",
											"if (counter < limit && !found) \r",
											"{\r",
											"    console.log(\"setting next request\");\r",
											"    postman.setNextRequest(\"Get Permissions bundles-ALL products\");\r",
											"    pm.collectionVariables.unset(\"count1\");\r",
											"    pm.collectionVariables.set(\"count1\", parseInt(counter) + 1);\r",
											"} \r",
											"else if (counter === limit)\r",
											"{\r",
											"    console.log(\"Condition match! Execution loop completed\");\r",
											"    pm.collectionVariables.set(\"count1\", 0);\r",
											"    pm.collectionVariables.set(\"code\", pm.environment.get(\"productCode\"));\r",
											"    console.log(\"Counter reset to \" + pm.collectionVariables.get(\"count1\"));\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codes = pm.environment.get(\"product_codes\").toString().split(',');\r",
											"console.log(\"Product codes: \" + codes);\r",
											"console.log(\"Total Product Count: \" + codes.length);\r",
											"pm.collectionVariables.set(\"productCount1\", codes.length - 1);\r",
											"\r",
											"var counter = parseInt(pm.collectionVariables.get('count1'));\r",
											"pm.collectionVariables.set('code', codes[counter]);\r",
											"console.log(\"current product code---->\" + pm.collectionVariables.get('code'));\r",
											"console.log(\"Counter:\" + counter);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Permissions/bundles?productCode={{code}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Permissions",
										"bundles"
									],
									"query": [
										{
											"key": "productCode",
											"value": "{{code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Permissions/bundles/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating bundles format and name from response body of bundle id: \"+jsonData.id, function () {\r",
											"    // pm.expect(jsonData).to.have.all.keys('id', 'name','description','type','productName','bundleTypeId','productCode','permissions');\r",
											"    pm.expect(jsonData.id).to.be.eql(pm.variables.get(\"bundleId\"));\r",
											" \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Permissions/bundles\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"bundleId\", jsonData[0].id);\r",
											"    console.log(pm.variables.get(\"bundleId\"));\r",
											"      \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Permissions/bundles/{{bundleId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Permissions",
										"bundles",
										"{{bundleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a bunles by PermissionType Company",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/bundle-types\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"permissionType\", jsonData[0].name);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200 && responseBody !== null) {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(\"Validating the PermissionbundleType in the response body \", function () {\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"            pm.expect(jsonData[i].type).to.be.eql(pm.variables.get(\"permissionType\"));\r",
											"            pm.expect(jsonData[i].bundleTypeId).to.be.eql(1);\r",
											"        }\r",
											"    });\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Permissions/{{permissionType}}/bundles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Permissions",
										"{{permissionType}}",
										"bundles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a bunles by PermissionType Group",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/bundle-types\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"permissionType\", jsonData[1].name);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200 && responseBody !== null) {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(\"Validating the PermissionbundleType in the response body \", function () {\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"            pm.expect(jsonData[i].type).to.be.eql(pm.variables.get(\"permissionType\"));\r",
											"            pm.expect(jsonData[i].bundleTypeId).to.be.eql(2);\r",
											"        }\r",
											"    });\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Permissions/{{permissionType}}/bundles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Permissions",
										"{{permissionType}}",
										"bundles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a bunles by PermissionType Resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/bundle-types\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"permissionType\", jsonData[2].name);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200 && responseBody !== null) {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(\"Validating the PermissionbundleType in the response body \", function () {\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"            pm.expect(jsonData[i].type).to.be.eql(pm.variables.get(\"permissionType\"));\r",
											"            pm.expect(jsonData[i].bundleTypeId).to.be.eql(3);\r",
											"        }\r",
											"    });\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Permissions/{{permissionType}}/bundles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Permissions",
										"{{permissionType}}",
										"bundles"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if(pm.response.code == 200)",
							"{",
							"    console.log(\"responseBody\", responseBody);",
							"    if (responseBody != null)",
							"    {",
							"        if (responseBody =='[]' || responseBody == '{}')",
							"        {",
							"             tests[\"Body is empty \" + responseBody]= false;",
							"        }",
							"        else {",
							"          tests[\"Body is not empty\"]= true;",
							"        }",
							"    }",
							"    else",
							"    {",
							"          tests[\"Body is empty\" + responseBody]= false;",
							"    }",
							"}",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				}
			]
		},
		{
			"name": "POST",
			"item": [
				{
					"name": "Companies",
					"item": [
						{
							"name": "Post Company_ARBuyer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);\r",
											"\r",
											"pm.variables.set(\"recordTypeId\", 1);\r",
											"\r",
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        {\r",
											"            var countryName =  jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \"+countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"code1\", countryCode);\r",
											"            console.log(\"country code: \"+countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        console.log(\"state Name: \"+stateName);\r",
											"        var stateId = jsonData[0].id;\r",
											"        console.log(\"state Id: \"+stateId);\r",
											"        pm.variables.set(\"stateRegion\", stateName);     \r",
											"        pm.variables.set(\"stateRegionId\", stateId);     \r",
											"\r",
											"        // var url1 = pm.variables.get(\"baseURI\");\r",
											"        // url1 = url1.concat(\"/api/country-jurisdictions\");\r",
											"\r",
											"        // pm.sendRequest({\r",
											"        //     url: url1,\r",
											"        //     method: 'GET',\r",
											"        //     header: {\r",
											"        //         'Accept': 'application/json',\r",
											"        //         'Content-Type': 'application/json',\r",
											"        //         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        //     }\r",
											"        // }, function (err, res) {\r",
											"        //     var jsonData = res.json();\r",
											"        //     for(i=0; i< jsonData.length; i++)\r",
											"        //     { \r",
											"        //         if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        //         {\r",
											"        //             var jurisdiction =  jsonData[i].name;\r",
											"        //             console.log(\"countryOfJurisdiction: \"+jurisdiction);\r",
											"        //             pm.variables.set(\"countryOfJurisdiction\", jurisdiction);\r",
											"                    \r",
											"        //             break;\r",
											"        //         }\r",
											"        //     }  \r",
											"            var url2 = pm.variables.get(\"baseURI\");\r",
											"            url2 = url2.concat(\"/api/institution-types\");\r",
											"            pm.sendRequest({\r",
											"            url: url2,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var institutionType = jsonData[0].id;\r",
											"                console.log(\"institutionType id: \"+institutionType);\r",
											"                console.log(\"institutionType name: \"+jsonData[0].name);\r",
											"                pm.variables.set(\"institutionTypeId\", institutionType);   \r",
											"\r",
											"                var url3 = pm.variables.get(\"baseURI\");\r",
											"                url3 = url3.concat(\"/api/sectors\");\r",
											"                pm.sendRequest({\r",
											"                url: url3,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var sectorId = jsonData[5].id;\r",
											"                    console.log(\"sector id: \"+sectorId);\r",
											"                    console.log(\"sector name: \"+jsonData[5].name);\r",
											"                    pm.variables.set(\"sectorId\", sectorId);   \r",
											"                    \r",
											"                    var url4 = pm.variables.get(\"baseURI\");\r",
											"                    url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
											"                    pm.sendRequest({\r",
											"                    url: url4,\r",
											"                    method: 'GET',\r",
											"                    header: {\r",
											"                        'Accept': 'application/json',\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                    }\r",
											"                    }, function (err, res) {\r",
											"                        var jsonData = res.json();\r",
											"                        var industryId = jsonData[0].id;\r",
											"                        console.log(\"industry Id : \"+industryId);\r",
											"                        console.log(\"industry name: \"+jsonData[0].name);\r",
											"                        pm.variables.set(\"industryId\", industryId);   \r",
											"\r",
											"                    }); \r",
											"                }); \r",
											"            });\r",
											"        });\r",
											"\r",
											"    });\r",
											"        \r",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for newly created company is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.id;\r",
											"\r",
											"pm.environment.set(\"newBuyerCompany_Local\", expCmpId);\r",
											"pm.environment.set(\"newBuyerCompanyName_Local\",jsonData.legalEntityName);\r",
											"\r",
											"pm.test(\"To check new company is created: \" + expCmpId, function () {\r",
											"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegARBuyer_' + suffix);\r",
											"});\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"/update-status?command=activate\";\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'PUT',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: {\r",
											"           \r",
											"            \"id\": expCmpId,                                       \r",
											"        }\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check activate company has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    var url2 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=5000&productCode=AR\";\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        var jsonData1 = res.json();\r",
											"            for (i = 0; i < jsonData1.length; i++) {\r",
											"                if (jsonData1[i].companyId == expCmpId) {\r",
											"                    \r",
											"                    pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
											"                        pm.expect(jsonData1[i].company.recordTypeId).to.eql(1);\r",
											"                        pm.expect(jsonData1[i].company.isActive).to.eql(true);\r",
											"\r",
											"                    });\r",
											"                }\r",
											"            }\r",
											"\r",
											"        var url3 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+expCmpId+\"/roles\";\r",
											"        pm.sendRequest({\r",
											"        url: url3,\r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: [\r",
											"                    {\r",
											"                        \"companyId\": expCmpId,\r",
											"                        \"participantId\":0,\r",
											"                        \"isActive\": true,\r",
											"                        \"productCode\":\"AR\",\r",
											"                        \"roleId\":10,\r",
											"                        \"roleName\":\"Accounts Receivable - Buyer\"\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"\r",
											"                pm.test(\"To check add participant has response 204\", function () {\r",
											"                    pm.expect(res.code).to.eql(204);      \r",
											"                });\r",
											"\r",
											"        var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"        pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: {\r",
											"                                                    \r",
											"                }\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"    \r",
											"            });\r",
											"            \r",
											"        });\r",
											"    });\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"legalEntityName\": \"EntlRegARBuyer_{{entityName}}\",\r\n    \"name\": \"EntlRegARBuyer_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Company_ARSupplier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);\r",
											"pm.variables.set(\"recordTypeId\", 1);\r",
											"\r",
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        {\r",
											"            var countryName =  jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \"+countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"code1\", countryCode);\r",
											"            console.log(\"country code: \"+countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        console.log(\"state Name: \"+stateName);\r",
											"        var stateId = jsonData[0].id;\r",
											"        console.log(\"state Id: \"+stateId);\r",
											"        pm.variables.set(\"stateRegion\", stateName);    \r",
											"        pm.variables.set(\"stateRegionId\", stateId);     \r",
											"\r",
											"       \r",
											"        var url2 = pm.variables.get(\"baseURI\");\r",
											"        url2 = url2.concat(\"/api/institution-types\");\r",
											"        pm.sendRequest({\r",
											"        url: url2,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        }, function (err, res) {\r",
											"            var jsonData = res.json();\r",
											"            var institutionType = jsonData[0].id;\r",
											"            console.log(\"institutionType id: \"+institutionType);\r",
											"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
											"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
											"\r",
											"            var url3 = pm.variables.get(\"baseURI\");\r",
											"            url3 = url3.concat(\"/api/sectors\");\r",
											"            pm.sendRequest({\r",
											"            url: url3,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var sectorId = jsonData[5].id;\r",
											"                console.log(\"sector id: \"+sectorId);\r",
											"                console.log(\"sector name: \"+jsonData[5].name);\r",
											"                pm.variables.set(\"sectorId\", sectorId);   \r",
											"                \r",
											"                var url4 = pm.variables.get(\"baseURI\");\r",
											"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
											"                pm.sendRequest({\r",
											"                url: url4,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var industryId = jsonData[0].id;\r",
											"                    console.log(\"industry Id : \"+industryId);\r",
											"                    console.log(\"industry name: \"+jsonData[0].name);\r",
											"                    pm.variables.set(\"industryId\", industryId);   \r",
											"\r",
											"                }); \r",
											"            }); \r",
											"        });\r",
											"    });\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for newly created company is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.id;\r",
											"\r",
											"pm.environment.set(\"newSupplierCompany_Local\", expCmpId);\r",
											"pm.environment.set(\"newSupplierCompanyName_Local\",jsonData.legalEntityName);\r",
											"\r",
											"pm.test(\"To check new company is created: \" + expCmpId, function () {\r",
											"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegARSupplier_' + suffix);\r",
											"});\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"/update-status?command=activate\";\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'PUT',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: {\r",
											"           \r",
											"            \"id\": expCmpId,                                       \r",
											"        }\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check activate company has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    var url2 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=5000&productCode=AR\";\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        var jsonData1 = res.json();\r",
											"            for (i = 0; i < jsonData1.length; i++) {\r",
											"                if (jsonData1[i].companyId == expCmpId) {\r",
											"                    \r",
											"                    pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
											"                        pm.expect(jsonData1[i].company.recordTypeId).to.eql(1);\r",
											"                        pm.expect(jsonData1[i].company.isActive).to.eql(true);\r",
											"\r",
											"                    });\r",
											"                }\r",
											"            }\r",
											"\r",
											"  var url3 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+expCmpId+\"/roles\";\r",
											"        pm.sendRequest({\r",
											"        url: url3,\r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: [\r",
											"                    {\r",
											"                        \"companyId\": expCmpId,\r",
											"                        \"participantId\":0,\r",
											"                        \"isActive\": true,\r",
											"                        \"productCode\":\"AR\",\r",
											"                        \"roleId\":8,\r",
											"                        \"roleName\":\"Accounts Receivable - Supplier\"\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"\r",
											"                pm.test(\"To check add participant has response 204\", function () {\r",
											"                    pm.expect(res.code).to.eql(204);      \r",
											"                });\r",
											"\r",
											"            var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"            pm.sendRequest({\r",
											"            url: url1,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: {\r",
											"                                                        \r",
											"                    }\r",
											"                }\r",
											"            }, function (err, res) {\r",
											"                if (err) { console.log(url + err); }\r",
											"    \r",
											"            });\r",
											"            \r",
											"        });\r",
											"    });\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"legalEntityName\": \"EntlRegARSupplier_{{entityName}}\",\r\n    \"name\": \"EntlRegARSupplier_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Company_ARFunder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);\r",
											"pm.variables.set(\"recordTypeId\", 1);\r",
											"\r",
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        {\r",
											"            var countryName =  jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \"+countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"code1\", countryCode);\r",
											"            console.log(\"country code: \"+countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        console.log(\"state Name: \"+stateName);\r",
											"        var stateId = jsonData[0].id;\r",
											"        console.log(\"state Id: \"+stateId);\r",
											"        pm.variables.set(\"stateRegion\", stateName);    \r",
											"        pm.variables.set(\"stateRegionId\", stateId);     \r",
											"\r",
											"          \r",
											"        var url2 = pm.variables.get(\"baseURI\");\r",
											"        url2 = url2.concat(\"/api/institution-types\");\r",
											"        pm.sendRequest({\r",
											"        url: url2,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        }, function (err, res) {\r",
											"            var jsonData = res.json();\r",
											"            var institutionType = jsonData[0].id;\r",
											"            console.log(\"institutionType id: \"+institutionType);\r",
											"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
											"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
											"\r",
											"            var url3 = pm.variables.get(\"baseURI\");\r",
											"            url3 = url3.concat(\"/api/sectors\");\r",
											"            pm.sendRequest({\r",
											"            url: url3,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var sectorId = jsonData[5].id;\r",
											"                console.log(\"sector id: \"+sectorId);\r",
											"                console.log(\"sector name: \"+jsonData[5].name);\r",
											"                pm.variables.set(\"sectorId\", sectorId);   \r",
											"                \r",
											"                var url4 = pm.variables.get(\"baseURI\");\r",
											"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
											"                pm.sendRequest({\r",
											"                url: url4,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var industryId = jsonData[0].id;\r",
											"                    console.log(\"industry Id : \"+industryId);\r",
											"                    console.log(\"industry name: \"+jsonData[0].name);\r",
											"                    pm.variables.set(\"industryId\", industryId);   \r",
											"\r",
											"                }); \r",
											"            }); \r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for newly created company is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.id;\r",
											"\r",
											"pm.environment.set(\"newARFunderCompany_Local\", expCmpId);\r",
											"pm.environment.set(\"newARFunderCompanyName_Local\",jsonData.legalEntityName);\r",
											"\r",
											"pm.test(\"To check new company is created: \" + expCmpId, function () {\r",
											"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegARFunder_' + suffix);\r",
											"});\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"/update-status?command=activate\";\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'PUT',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: {\r",
											"           \r",
											"            \"id\": expCmpId,                                       \r",
											"        }\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check activate company has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    var url2 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=5000&productCode=AR\";\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        var jsonData1 = res.json();\r",
											"            for (i = 0; i < jsonData1.length; i++) {\r",
											"                if (jsonData1[i].companyId == expCmpId) {\r",
											"                    \r",
											"                    pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
											"                        pm.expect(jsonData1[i].company.recordTypeId).to.eql(1);\r",
											"                        pm.expect(jsonData1[i].company.isActive).to.eql(true);\r",
											"\r",
											"                    });\r",
											"                }\r",
											"            }\r",
											"\r",
											"  var url3 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+expCmpId+\"/roles\";\r",
											"        pm.sendRequest({\r",
											"        url: url3,\r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: [\r",
											"                    {\r",
											"                        \"companyId\": expCmpId,\r",
											"                        \"participantId\":0,\r",
											"                        \"isActive\": true,\r",
											"                        \"productCode\":\"AR\",\r",
											"                        \"roleId\":9,\r",
											"                        \"roleName\":\"Accounts Receivable - Funder\"\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"\r",
											"                pm.test(\"To check add participant has response 204\", function () {\r",
											"                    pm.expect(res.code).to.eql(204);      \r",
											"                });\r",
											"\r",
											"        var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"        pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: {\r",
											"                                                    \r",
											"                }\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"    \r",
											"            });\r",
											"            \r",
											"        });\r",
											"    });\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"type": "text",
										"value": "{{platformCode}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"legalEntityName\": \"EntlRegARFunder_{{entityName}}\",\r\n    \"name\": \"EntlRegARFunder_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Company_SCFSupplier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);\r",
											"pm.variables.set(\"recordTypeId\", 1);\r",
											"\r",
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        {\r",
											"            var countryName =  jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \"+countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"code1\", countryCode);\r",
											"            console.log(\"country code: \"+countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        console.log(\"state Name: \"+stateName);\r",
											"        var stateId = jsonData[0].id;\r",
											"        console.log(\"state Id: \"+stateId);\r",
											"        pm.variables.set(\"stateRegion\", stateName);    \r",
											"        pm.variables.set(\"stateRegionId\", stateId);        \r",
											"\r",
											"       \r",
											"        var url2 = pm.variables.get(\"baseURI\");\r",
											"        url2 = url2.concat(\"/api/institution-types\");\r",
											"        pm.sendRequest({\r",
											"        url: url2,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        }, function (err, res) {\r",
											"            var jsonData = res.json();\r",
											"            var institutionType = jsonData[0].id;\r",
											"            console.log(\"institutionType id: \"+institutionType);\r",
											"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
											"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
											"\r",
											"            var url3 = pm.variables.get(\"baseURI\");\r",
											"            url3 = url3.concat(\"/api/sectors\");\r",
											"            pm.sendRequest({\r",
											"            url: url3,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var sectorId = jsonData[5].id;\r",
											"                console.log(\"sector id: \"+sectorId);\r",
											"                console.log(\"sector name: \"+jsonData[5].name);\r",
											"                pm.variables.set(\"sectorId\", sectorId);   \r",
											"                \r",
											"                var url4 = pm.variables.get(\"baseURI\");\r",
											"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
											"                pm.sendRequest({\r",
											"                url: url4,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var industryId = jsonData[0].id;\r",
											"                    console.log(\"industry Id : \"+industryId);\r",
											"                    console.log(\"industry name: \"+jsonData[0].name);\r",
											"                    pm.variables.set(\"industryId\", industryId);   \r",
											"\r",
											"                }); \r",
											"            }); \r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for newly created company is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.id;\r",
											"\r",
											"pm.environment.set(\"newSupplierCompanySCF_Local\", expCmpId);\r",
											"pm.environment.set(\"newSupplierCompanySCFName_Local\",jsonData.legalEntityName);\r",
											"\r",
											"pm.test(\"To check new company is created: \" + expCmpId, function () {\r",
											"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegSCFSupplier_' + suffix);\r",
											"});\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"/update-status?command=activate\";\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'PUT',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: {\r",
											"           \r",
											"            \"id\": expCmpId,                                       \r",
											"        }\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check activate company has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    var url2 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=SCF\";\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        var jsonData1 = res.json();\r",
											"            for (i = 0; i < jsonData1.length; i++) {\r",
											"                if (jsonData1[i].companyId == expCmpId) {\r",
											"                    \r",
											"                    pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
											"                        pm.expect(jsonData1[i].company.recordTypeId).to.eql(1);\r",
											"                        pm.expect(jsonData1[i].company.isActive).to.eql(true);\r",
											"\r",
											"                    });\r",
											"                }\r",
											"            }\r",
											"\r",
											"    var url3 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+expCmpId+\"/roles\";\r",
											"        pm.sendRequest({\r",
											"        url: url3,\r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: [\r",
											"                    {\r",
											"                        \"companyId\": expCmpId,\r",
											"                        \"participantId\":0,\r",
											"                        \"isActive\": true,\r",
											"                        \"productCode\":\"SCF\",\r",
											"                        \"roleId\":3,\r",
											"                        \"roleName\":\"Supply Chain Finance - Supplier\"\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"\r",
											"                pm.test(\"To check add participant has response 204\", function () {\r",
											"                    pm.expect(res.code).to.eql(204);      \r",
											"                });\r",
											"\r",
											"        var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"        pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"           'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: {\r",
											"                                                    \r",
											"                }\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"    \r",
											"            });\r",
											"            \r",
											"        });\r",
											"    });\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"legalEntityName\": \"EntlRegSCFSupplier_{{entityName}}\",\r\n    \"name\": \"EntlRegSCFSupplier_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Company_SCFBuyer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);\r",
											"pm.variables.set(\"recordTypeId\", 1);\r",
											"\r",
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        {\r",
											"            var countryName =  jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \"+countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"code1\", countryCode);\r",
											"            console.log(\"country code: \"+countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        console.log(\"state Name: \"+stateName);\r",
											"        var stateId = jsonData[0].id;\r",
											"        console.log(\"state Id: \"+stateId);\r",
											"        pm.variables.set(\"stateRegion\", stateName);    \r",
											"        pm.variables.set(\"stateRegionId\", stateId);    \r",
											"\r",
											"       \r",
											"        var url2 = pm.variables.get(\"baseURI\");\r",
											"        url2 = url2.concat(\"/api/institution-types\");\r",
											"        pm.sendRequest({\r",
											"        url: url2,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        }, function (err, res) {\r",
											"            var jsonData = res.json();\r",
											"            var institutionType = jsonData[0].id;\r",
											"            console.log(\"institutionType id: \"+institutionType);\r",
											"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
											"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
											"\r",
											"            var url3 = pm.variables.get(\"baseURI\");\r",
											"            url3 = url3.concat(\"/api/sectors\");\r",
											"            pm.sendRequest({\r",
											"            url: url3,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var sectorId = jsonData[5].id;\r",
											"                console.log(\"sector id: \"+sectorId);\r",
											"                console.log(\"sector name: \"+jsonData[5].name);\r",
											"                pm.variables.set(\"sectorId\", sectorId);   \r",
											"                \r",
											"                var url4 = pm.variables.get(\"baseURI\");\r",
											"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
											"                pm.sendRequest({\r",
											"                url: url4,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var industryId = jsonData[0].id;\r",
											"                    console.log(\"industry Id : \"+industryId);\r",
											"                    console.log(\"industry name: \"+jsonData[0].name);\r",
											"                    pm.variables.set(\"industryId\", industryId);   \r",
											"\r",
											"                }); \r",
											"            }); \r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for newly created company is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.id;\r",
											"\r",
											"pm.environment.set(\"newBuyerCompanySCF_Local\", expCmpId);\r",
											"pm.environment.set(\"newBuyerCompanySCFName_Local\",jsonData.legalEntityName);\r",
											"\r",
											"pm.test(\"To check new company is created: \" + expCmpId, function () {\r",
											"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegSCFBuyer_' + suffix);\r",
											"});\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"/update-status?command=activate\";\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'PUT',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: {\r",
											"           \r",
											"            \"id\": expCmpId,                                       \r",
											"        }\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check activate company has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    var url2 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=SCF\";\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        var jsonData1 = res.json();\r",
											"            for (i = 0; i < jsonData1.length; i++) {\r",
											"                if (jsonData1[i].companyId == expCmpId) {\r",
											"                    \r",
											"                    pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
											"                        pm.expect(jsonData1[i].company.recordTypeId).to.eql(1);\r",
											"                        pm.expect(jsonData1[i].company.isActive).to.eql(true);\r",
											"\r",
											"                    });\r",
											"                }\r",
											"            }\r",
											"\r",
											"       var url3 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+expCmpId+\"/roles\";\r",
											"        pm.sendRequest({\r",
											"        url: url3,\r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: [\r",
											"                    {\r",
											"                        \"companyId\": expCmpId,\r",
											"                        \"participantId\":0,\r",
											"                        \"isActive\": true,\r",
											"                        \"productCode\":\"SCF\",\r",
											"                        \"roleId\":1,\r",
											"                        \"roleName\":\"Supply Chain Finance - Buyer\"\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"\r",
											"                pm.test(\"To check add participant has response 204\", function () {\r",
											"                    pm.expect(res.code).to.eql(204);      \r",
											"                });\r",
											"\r",
											"\r",
											"        var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"        pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: {\r",
											"                                                    \r",
											"                }\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"    \r",
											"            });\r",
											"            \r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"legalEntityName\": \"EntlRegSCFBuyer_{{entityName}}\",\r\n    \"name\": \"EntlRegSCFBuyer_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Company_SCFFunder1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);\r",
											"pm.variables.set(\"recordTypeId\", 1);\r",
											"\r",
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        {\r",
											"            var countryName =  jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \"+countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"code1\", countryCode);\r",
											"            console.log(\"country code: \"+countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        console.log(\"state Name: \"+stateName);\r",
											"        var stateId = jsonData[0].id;\r",
											"        console.log(\"state Id: \"+stateId);\r",
											"        pm.variables.set(\"stateRegion\", stateName);    \r",
											"        pm.variables.set(\"stateRegionId\", stateId);     \r",
											"\r",
											"    \r",
											"        var url2 = pm.variables.get(\"baseURI\");\r",
											"        url2 = url2.concat(\"/api/institution-types\");\r",
											"        pm.sendRequest({\r",
											"        url: url2,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        }, function (err, res) {\r",
											"            var jsonData = res.json();\r",
											"            var institutionType = jsonData[0].id;\r",
											"            console.log(\"institutionType id: \"+institutionType);\r",
											"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
											"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
											"\r",
											"            var url3 = pm.variables.get(\"baseURI\");\r",
											"            url3 = url3.concat(\"/api/sectors\");\r",
											"            pm.sendRequest({\r",
											"            url: url3,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var sectorId = jsonData[5].id;\r",
											"                console.log(\"sector id: \"+sectorId);\r",
											"                console.log(\"sector name: \"+jsonData[5].name);\r",
											"                pm.variables.set(\"sectorId\", sectorId);   \r",
											"                \r",
											"                var url4 = pm.variables.get(\"baseURI\");\r",
											"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
											"                pm.sendRequest({\r",
											"                url: url4,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var industryId = jsonData[0].id;\r",
											"                    console.log(\"industry Id : \"+industryId);\r",
											"                    console.log(\"industry name: \"+jsonData[0].name);\r",
											"                    pm.variables.set(\"industryId\", industryId);   \r",
											"\r",
											"                }); \r",
											"            }); \r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for newly created company is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.id;\r",
											"\r",
											"pm.environment.set(\"newFunderCompanySCF_Local1\", expCmpId);\r",
											"pm.environment.set(\"newFunderCompanySCFName_Local1\",jsonData.legalEntityName);\r",
											"\r",
											"pm.test(\"To check new company is created: \" + expCmpId, function () {\r",
											"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegSCFFunder1_' + suffix);\r",
											"});\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"/update-status?command=activate\";\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'PUT',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: {\r",
											"           \r",
											"            \"id\": expCmpId,                                       \r",
											"        }\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check activate company has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    var url2 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=SCF\";\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        var jsonData1 = res.json();\r",
											"            for (i = 0; i < jsonData1.length; i++) {\r",
											"                if (jsonData1[i].companyId == expCmpId) {\r",
											"                    \r",
											"                    pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
											"                        pm.expect(jsonData1[i].company.recordTypeId).to.eql(1);\r",
											"                        pm.expect(jsonData1[i].company.isActive).to.eql(true);\r",
											"\r",
											"                    });\r",
											"                }\r",
											"            }\r",
											"\r",
											"        var url3 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+expCmpId+\"/roles\";\r",
											"        pm.sendRequest({\r",
											"        url: url3,\r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: [\r",
											"                    {\r",
											"                        \"companyId\": expCmpId,\r",
											"                        \"participantId\":0,\r",
											"                        \"isActive\": true,\r",
											"                        \"productCode\":\"SCF\",\r",
											"                        \"roleId\":5,\r",
											"                        \"roleName\":\"Supply Chain Finance - Funder\"\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"\r",
											"        pm.test(\"To check add participant has response 204\", function () {\r",
											"            pm.expect(res.code).to.eql(204);      \r",
											"        });\r",
											"\r",
											"        var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"        pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: {\r",
											"                                                    \r",
											"                }\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"    \r",
											"            });\r",
											"            \r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"legalEntityName\": \"EntlRegSCFFunder1_{{entityName}}\",\r\n    \"name\": \"EntlRegSCFFunder1_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Company_SCFFunder2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);\r",
											"pm.variables.set(\"recordTypeId\", 1);\r",
											"\r",
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        {\r",
											"            var countryName =  jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \"+countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"code1\", countryCode);\r",
											"            console.log(\"country code: \"+countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        console.log(\"state Name: \"+stateName);\r",
											"        var stateId = jsonData[0].id;\r",
											"        console.log(\"state Id: \"+stateId);\r",
											"        pm.variables.set(\"stateRegion\", stateName);    \r",
											"        pm.variables.set(\"stateRegionId\", stateId);    \r",
											"        \r",
											"        var url2 = pm.variables.get(\"baseURI\");\r",
											"        url2 = url2.concat(\"/api/institution-types\");\r",
											"        pm.sendRequest({\r",
											"        url: url2,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        }, function (err, res) {\r",
											"            var jsonData = res.json();\r",
											"            var institutionType = jsonData[0].id;\r",
											"            console.log(\"institutionType id: \"+institutionType);\r",
											"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
											"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
											"\r",
											"            var url3 = pm.variables.get(\"baseURI\");\r",
											"            url3 = url3.concat(\"/api/sectors\");\r",
											"            pm.sendRequest({\r",
											"            url: url3,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var sectorId = jsonData[5].id;\r",
											"                console.log(\"sector id: \"+sectorId);\r",
											"                console.log(\"sector name: \"+jsonData[5].name);\r",
											"                pm.variables.set(\"sectorId\", sectorId);   \r",
											"                \r",
											"                var url4 = pm.variables.get(\"baseURI\");\r",
											"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
											"                pm.sendRequest({\r",
											"                url: url4,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var industryId = jsonData[0].id;\r",
											"                    console.log(\"industry Id : \"+industryId);\r",
											"                    console.log(\"industry name: \"+jsonData[0].name);\r",
											"                    pm.variables.set(\"industryId\", industryId);   \r",
											"\r",
											"                }); \r",
											"            }); \r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for newly created company is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.id;\r",
											"\r",
											"pm.environment.set(\"newFunderCompanySCF_Local2\", expCmpId);\r",
											"pm.environment.set(\"newFunderCompanySCFName_Local2\",jsonData.legalEntityName);\r",
											"\r",
											"pm.test(\"To check new company is created: \" + expCmpId, function () {\r",
											"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegSCFFunder2_' + suffix);\r",
											"});\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"/update-status?command=activate\";\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'PUT',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: {\r",
											"           \r",
											"            \"id\": expCmpId,                                       \r",
											"        }\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check activate company has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    var url2 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=SCF\";\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        var jsonData1 = res.json();\r",
											"            for (i = 0; i < jsonData1.length; i++) {\r",
											"                if (jsonData1[i].companyId == expCmpId) {\r",
											"                    \r",
											"                    pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
											"                        pm.expect(jsonData1[i].company.recordTypeId).to.eql(1);\r",
											"                        pm.expect(jsonData1[i].company.isActive).to.eql(true);\r",
											"\r",
											"                    });\r",
											"                }\r",
											"            }\r",
											"\r",
											"        var url3 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+expCmpId+\"/roles\";\r",
											"        pm.sendRequest({\r",
											"        url: url3,\r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: [\r",
											"                    {\r",
											"                        \"companyId\": expCmpId,\r",
											"                        \"participantId\":0,\r",
											"                        \"isActive\": true,\r",
											"                        \"productCode\":\"SCF\",\r",
											"                        \"roleId\":5,\r",
											"                        \"roleName\":\"Supply Chain Finance - Funder\"\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"\r",
											"        pm.test(\"To check add participant has response 204\", function () {\r",
											"            pm.expect(res.code).to.eql(204);      \r",
											"        });\r",
											"\r",
											"        var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"        pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: {\r",
											"                                                    \r",
											"                }\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"    \r",
											"            });\r",
											"            \r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"legalEntityName\": \"EntlRegSCFFunder2_{{entityName}}\",\r\n    \"name\": \"EntlRegSCFFunder2_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Create_User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user = getRandomAlphaNumeric(4,\"ABCDE12345FGHIJKLMNOPQ90876RSTUVWXYZ\");",
											"pm.variables.set(\"U_ID\", user);",
											"",
											"function getRandomAlphaNumeric(len, chars) {",
											"    var result = '';",
											"    for (var i = len; i > 0; i--)",
											"    { ",
											"     result += chars[Math.floor(Math.random() * chars.length)];",
											"    }",
											"     return result;",
											"}",
											"",
											"var companyId = pm.environment.get(\"Company_Id_G\") ; ",
											"pm.variables.set(\"companyId\", companyId);",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\"+ companyId );",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
											"      }",
											"}, ",
											"function (err, res) {",
											"    if (err) {console.log(\"error :\" + err); }",
											"    var jsonData = res.json();",
											"    console.log(jsonData);",
											"",
											"    pm.variables.set(\"cid\", jsonData.id);",
											"    pm.variables.set(\"salesforceId\", jsonData.salesforceId);",
											"    pm.variables.set(\"name\", jsonData.name);",
											"    pm.variables.set(\"country\", jsonData.country);",
											"    pm.variables.set(\"stateOfIncorporation\", jsonData.stateOfIncorporation);",
											"    pm.variables.set(\"countryOfJurisdiction\", jsonData.countryOfJurisdiction);",
											"    pm.variables.set(\"isActive\", jsonData.isActive);",
											"    pm.variables.set(\"updatedOn\", jsonData.updatedOn);",
											"    pm.variables.set(\"users\", jsonData.users);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var Id = pm.variables.get(\"U_ID\");",
											"",
											"pm.test(\"To check user is created: \" + jsonData.id, function () {",
											"    pm.expect(jsonData.userName).to.eql('lqxnga+EntlReg_' + Id+'@gmail.com');",
											"});",
											"var nu = jsonData.id;",
											"pm.environment.set(\"UserID_new\", nu);",
											"console.log(pm.environment.get(\"UserID_new\"))",
											"var newID = pm.environment.get(\"UserID_new\");",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/users/\" + newID +\"?command=activate\");",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'PUT',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code' : pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"    },body: {",
											"        mode: 'raw',",
											"        raw: {",
											"            \"id\": newID,",
											"            }",
											"            } ",
											"    },",
											"    function (err, res) {",
											"        if (err) { console.log(\"error :\" + err); }",
											"        pm.test(\"To check user activate response is 200\", function () {",
											"        pm.expect(res.code).to.eql(200);      ",
											"    });",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"isPortalUser\": true,\r\n    \"isPlatformUser\": true,\r\n    \"firstName\": \"apiFN\",\r\n    \"middleInitial\": \"U\",\r\n    \"lastName\": \"apiLN {{U_ID}}\",\r\n    \"title\": \"QA\",\r\n    \"workPhone\": \"7654323467\",\r\n    \"employeeId\": \"111\",\r\n    \"email\": \"lqxnga+EntlReg_{{U_ID}}@gmail.com\",\r\n    \"userName\": \"lqxnga+EntlReg_{{U_ID}}@gmail.com\",\r\n    \"companyId\": {{companyId}},\r\n    \"groupName\": \"\",\r\n    \"subgroups\": []\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"description": "OEN-44 (LQX Permissions)"
				},
				{
					"name": "Publications-Sync",
					"item": [
						{
							"name": "POST Publications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseJSONdata = JSON.parse(responseBody);",
											" for (i = 0; i < responseJSONdata.length; i++) ",
											"{",
											"    pm.test(\"Validating Publications format from response body \", function () {",
											"        ",
											"        pm.expect(responseJSONdata[i]).to.have.all.keys('product', 'participantType','name','state','error','operationType');",
											"        ",
											"    });",
											"    pm.test(\"Validating publication/sync is successful\", function () {",
											"        ",
											"        pm.expect(responseJSONdata[i].state).equals(\"Success\");",
											"        ",
											"    });",
											"    pm.test(\"Validate publication/sync Product details\", function () {",
											" ",
											"        pm.expect(responseJSONdata[i].product).not.eql(null);",
											"",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Publications",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Publications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "BaseRateAdmin",
					"item": [
						{
							"name": "Post vaseRateType with 15 tenorTerms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"baseRateTypeCode\", randomS);\r",
											"\r",
											"pm.variables.set(\"Description\", \"QA API Test\");\r",
											"pm.variables.set(\"isManual\", true);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for baseratetype is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"try{\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check baseratetypes details: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].baseRateTypeCode).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating baseratetypes format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('baseRateTypeCode', 'description','tenorTerms','isManual');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"baseRateTypeCode\": \"EntlReg_{{baseRateTypeCode}}\",\r\n    \"Description\": \"{{Description}}\",\r\n    \"isManual\": {{isManual}},\r\n    \"tenorTerms\": [\r\n        1,\r\n        7,\r\n        30,\r\n        60,\r\n        90,\r\n        180,\r\n        360,\r\n        450,\r\n        540,\r\n        630,\r\n        720,\r\n        810,\r\n        900,\r\n        990,\r\n        1080\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI_plat}}/api/baseratetype",
									"host": [
										"{{baseURI_plat}}"
									],
									"path": [
										"api",
										"baseratetype"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post 15 BaseRate Values for baseRateCode",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"------->\"+timeT);\r",
											"pm.variables.set(\"asOfDate\", timeT);\r",
											"\r",
											"url = pm.variables.get(\"baseURI_plat\") + '/api/baseratetypes?hasCompleteValues=false';\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: url,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Accept': 'application/json',\r",
											"    'Content-Type': 'application/json',\r",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"  }\r",
											"}, function (err, res) {\r",
											"  var jsonData = res.json();\r",
											"  for(i=0; i < jsonData.length; i++)\r",
											"  {\r",
											"        if(jsonData[i].baseRateTypeCode.includes(\"EntlReg_\"))\r",
											"        {\r",
											"            pm.variables.set(\"baseRateTypeCode\", jsonData[i].baseRateTypeCode);\r",
											"            console.log(pm.variables.get(\"baseRateTypeCode\"));\r",
											"            break;\r",
											"        }\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for baserate is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// try{\r",
											"//     if (pm.response.code == 200 && responseBody !== '') {\r",
											"//         var responseJSONdata = JSON.parse(responseBody);\r",
											"//         pm.test(\"To check baseratetypes details: \" + responseJSONdata.length, function () {\r",
											"//             for (i = 0; i < responseJSONdata.length; i++) {\r",
											"//                 pm.expect(responseJSONdata[i].baseRateTypeCode).to.not.eql(null);\r",
											"//             }\r",
											"//         });\r",
											"//         pm.test(\"Validating baseratetypes format from response body \", function () {\r",
											"//             for (i = 0; i < responseJSONdata.length; i++) {\r",
											"//                 pm.expect(responseJSONdata[i]).to.have.all.keys('baseRateTypeCode', 'description','tenorTerms','isManual');\r",
											"//             }\r",
											"//         });\r",
											"//     }\r",
											"// }\r",
											"// catch (e) {\r",
											"//     pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"// }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"asOfDate\": \"{{asOfDate}}\",\r\n        \"baseRateTypeCode\": \"{{baseRateTypeCode}}\",\r\n        \"dayCount\": 1,\r\n        \"rate\": 0.7339,\r\n        \"termName\": \"\"\r\n    },\r\n    {\r\n        \"asOfDate\": \"{{asOfDate}}\",\r\n        \"baseRateTypeCode\": \"{{baseRateTypeCode}}\",\r\n        \"dayCount\": 7,\r\n        \"rate\": 1.623,\r\n        \"termName\": \"\"\r\n    },\r\n    {\r\n        \"asOfDate\": \"{{asOfDate}}\",\r\n        \"baseRateTypeCode\": \"{{baseRateTypeCode}}\",\r\n        \"dayCount\": 30,\r\n        \"rate\": 0.05262,\r\n        \"termName\": \"\"\r\n    },\r\n    {\r\n        \"asOfDate\": \"{{asOfDate}}\",\r\n        \"baseRateTypeCode\": \"{{baseRateTypeCode}}\",\r\n        \"dayCount\": 60,\r\n        \"rate\": 3.82001,\r\n        \"termName\": \"\"\r\n    },\r\n    {\r\n        \"asOfDate\": \"{{asOfDate}}\",\r\n        \"baseRateTypeCode\": \"{{baseRateTypeCode}}\",\r\n        \"dayCount\": 90,\r\n        \"rate\": 0.9863,\r\n        \"termName\": \"\"\r\n    },\r\n    {\r\n        \"asOfDate\": \"{{asOfDate}}\",\r\n        \"baseRateTypeCode\": \"{{baseRateTypeCode}}\",\r\n        \"dayCount\": 180,\r\n        \"rate\": 0.7729,\r\n        \"termName\": \"\"\r\n    },\r\n    {\r\n        \"asOfDate\": \"{{asOfDate}}\",\r\n        \"baseRateTypeCode\": \"{{baseRateTypeCode}}\",\r\n        \"dayCount\": 360,\r\n        \"rate\": 2.9802,\r\n        \"termName\": \"\"\r\n    },\r\n    {\r\n        \"asOfDate\": \"{{asOfDate}}\",\r\n        \"baseRateTypeCode\": \"{{baseRateTypeCode}}\",\r\n        \"dayCount\": 450,\r\n        \"rate\": 1.374,\r\n        \"termName\": \"\"\r\n    },\r\n    {\r\n        \"asOfDate\": \"{{asOfDate}}\",\r\n        \"baseRateTypeCode\": \"{{baseRateTypeCode}}\",\r\n        \"dayCount\": 540,\r\n        \"rate\": 3.8928,\r\n        \"termName\": \"\"\r\n    },\r\n    {\r\n        \"asOfDate\": \"{{asOfDate}}\",\r\n        \"baseRateTypeCode\": \"{{baseRateTypeCode}}\",\r\n        \"dayCount\": 630,\r\n        \"rate\": 0.1188,\r\n        \"termName\": \"\"\r\n    },\r\n    {\r\n        \"asOfDate\": \"{{asOfDate}}\",\r\n        \"baseRateTypeCode\": \"{{baseRateTypeCode}}\",\r\n        \"dayCount\": 720,\r\n        \"rate\": 1.98374,\r\n        \"termName\": \"\"\r\n    },\r\n    {\r\n        \"asOfDate\": \"{{asOfDate}}\",\r\n        \"baseRateTypeCode\": \"{{baseRateTypeCode}}\",\r\n        \"dayCount\": 810,\r\n        \"rate\": 2.83933,\r\n        \"termName\": \"\"\r\n    },\r\n    {\r\n        \"asOfDate\": \"{{asOfDate}}\",\r\n        \"baseRateTypeCode\": \"{{baseRateTypeCode}}\",\r\n        \"dayCount\": 900,\r\n        \"rate\": 1.90088,\r\n        \"termName\": \"\"\r\n    },\r\n    {\r\n        \"asOfDate\": \"{{asOfDate}}\",\r\n        \"baseRateTypeCode\": \"{{baseRateTypeCode}}\",\r\n        \"dayCount\": 990,\r\n        \"rate\": 1.00899,\r\n        \"termName\": \"\"\r\n    },\r\n    {\r\n        \"asOfDate\": \"{{asOfDate}}\",\r\n        \"baseRateTypeCode\": \"{{baseRateTypeCode}}\",\r\n        \"dayCount\": 1080,\r\n        \"rate\": 0.68399,\r\n        \"termName\": \"\"\r\n    }\r\n]\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI_plat}}/api/baserate",
									"host": [
										"{{baseURI_plat}}"
									],
									"path": [
										"api",
										"baserate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get baseratetype",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for baseratetypes is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Validating baseratetypes format from response body \", function () {\r",
											"    for (i = 0; i < responseJSONdata.length; i++) {\r",
											"        pm.expect(responseJSONdata[i]).to.have.all.keys('baseRateTypeCode', 'description','tenorTerms','isManual','source');\r",
											"    }\r",
											"});    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI_plat}}/api/baseratetypes?hasCompleteValues=false",
									"host": [
										"{{baseURI_plat}}"
									],
									"path": [
										"api",
										"baseratetypes"
									],
									"query": [
										{
											"key": "hasCompleteValues",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post vaseRateType with Currency",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var bTypeCode = getRandomAlphaNumeric(3,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"pm.variables.set(\"baseRateTypeCode\", bTypeCode);\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"currencyCode\", \"USD\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for Currencies/baseratetype is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"try{\r",
											"    if (pm.response.code == 200 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check baseratetypes details: \" + responseJSONdata.length, function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].baseRateTypeCode).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating baseratetypes format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('baseRateTypeCode', 'description','tenorTerms','isManual');\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"baseRateTypeCode\": \"EntlReg_{{baseRateTypeCode}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI_AR}}/api/Currencies/currencyCode/baseRateType",
									"host": [
										"{{baseURI_AR}}"
									],
									"path": [
										"api",
										"Currencies",
										"currencyCode",
										"baseRateType"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Relationships",
					"item": [
						{
							"name": "RegionCode-OEN-932",
							"item": [
								{
									"name": "POST Realtionships_Testing_LN",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"LN\");\r",
													"\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url1 + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//                 console.log(\"------------ \"+pm.environment.get(\"newSupplierCompany_Local\"));\r",
													"//                 console.log(\"***************    \"+jsonData1[i].company.id);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//                 console.log(\"***************    \"+jsonData1[i].company.id);\r",
													"\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.environment.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\") ;;//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.environment.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"\r",
													"pm.sendRequest({\r",
													"url: url,\r",
													"method: 'GET',\r",
													"header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"             'x-platform-code':pm.environment.get(\"platformCode\")\r",
													"       }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"\r",
													"    var jsonData1 = res.json();\r",
													"\r",
													"    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"        pm.expect(jsonData1.productCode).to.eql(\"AR\");\r",
													"        pm.expect(jsonData1.status).to.eql(\"Active\");\r",
													"\r",
													"    });     \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 314,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"{{currentTime}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_SG",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"SG\");\r",
													"\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.environment.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\") ;;//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.environment.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                   break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    \r",
													"    pm.test(\"To check update /api/Relationships/id has response 200\", function () {\r",
													"        pm.expect(res.code).to.eql(200);      \r",
													"    });\r",
													"    \r",
													"    var jsonData1 = res.json();\r",
													"                \r",
													"    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"        pm.expect(jsonData1.productCode).to.eql(\"AR\");\r",
													"        pm.expect(jsonData1.status).to.eql(\"Active\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 266,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"{{currentTime}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								}
							],
							"description": "POST Realtionships_Testing_NY : This scenario is covered in Post relationships AR in smoke folder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Currency-OEN-932",
							"item": [
								{
									"name": "POST Realtionships_Testing_SGD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"SGD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\") ;;//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    \r",
													"    pm.test(\"To check update /api/Relationships/id has response 200\", function () {\r",
													"        pm.expect(res.code).to.eql(200);      \r",
													"    });\r",
													"    \r",
													"    var jsonData1 = res.json();\r",
													"                \r",
													"    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"        pm.expect(jsonData1.productCode).to.eql(\"AR\");\r",
													"        pm.expect(jsonData1.status).to.eql(\"Active\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\":  1,\r\n    \"disclosureTypeId\": 2,\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 314,\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"descOfGoodsServices\": \"Goods\",\r\n    \"startDate\": \"{{currentTime}}\"\r\n\r\n  \r\n    // \"annualSales\": \"1000k\",\r\n    // \"paymentTerms\": \"Now\",\r\n    // \"additionalDetails\": \"any\",\r\n    // \"incoTerms\": \"1\",\r\n    // \"buyerValidationDate\": \"{{currentTime}}\",\r\n    // \"incoTermsTypeId\": 1,\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_GBP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"GBP\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\") ;;//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    \r",
													"    pm.test(\"To check update /api/Relationships/id has response 200\", function () {\r",
													"        pm.expect(res.code).to.eql(200);      \r",
													"    });\r",
													"    \r",
													"    var jsonData1 = res.json();\r",
													"                \r",
													"    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"        pm.expect(jsonData1.productCode).to.eql(\"AR\");\r",
													"        pm.expect(jsonData1.status).to.eql(\"Active\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 314,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"{{currentTime}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_CAD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"CAD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\") ;;//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    \r",
													"    pm.test(\"To check update /api/Relationships/id has response 200\", function () {\r",
													"        pm.expect(res.code).to.eql(200);      \r",
													"    });\r",
													"    \r",
													"    var jsonData1 = res.json();\r",
													"                \r",
													"    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"        pm.expect(jsonData1.productCode).to.eql(\"AR\");\r",
													"        pm.expect(jsonData1.status).to.eql(\"Active\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 314,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"{{currentTime}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_EUR",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"EUR\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\") ;;//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    \r",
													"    pm.test(\"To check update /api/Relationships/id has response 200\", function () {\r",
													"        pm.expect(res.code).to.eql(200);      \r",
													"    });\r",
													"    \r",
													"    var jsonData1 = res.json();\r",
													"                \r",
													"    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"        pm.expect(jsonData1.productCode).to.eql(\"AR\");\r",
													"        pm.expect(jsonData1.status).to.eql(\"Active\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 314,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"{{currentTime}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_AUD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"AUD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.environment.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\") ;;//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.environment.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    \r",
													"    pm.test(\"To check update /api/Relationships/id has response 200\", function () {\r",
													"        pm.expect(res.code).to.eql(200);      \r",
													"    });\r",
													"    \r",
													"    var jsonData1 = res.json();\r",
													"                \r",
													"    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"        pm.expect(jsonData1.productCode).to.eql(\"AR\");\r",
													"        pm.expect(jsonData1.status).to.eql(\"Active\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 314,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"{{currentTime}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "GoverningLaw-OEN-932",
							"item": [
								{
									"name": "POST Realtionships_Testing_Canada",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.environment.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\") ;;//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.environment.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    \r",
													"    pm.test(\"To check update /api/Relationships/id has response 200\", function () {\r",
													"        pm.expect(res.code).to.eql(200);      \r",
													"    });\r",
													"    \r",
													"    var jsonData1 = res.json();\r",
													"                \r",
													"    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"        pm.expect(jsonData1.productCode).to.eql(\"AR\");\r",
													"        pm.expect(jsonData1.status).to.eql(\"Active\");\r",
													"    });\r",
													"\r",
													"  \r",
													"    var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"    pm.sendRequest({\r",
													"    url: url3,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        \r",
													"        pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData3 = res.json();\r",
													"        for (i = 0; i < jsonData3.length; i++) {\r",
													"            console.log(\"AR for loop\");\r",
													"            if (jsonData3[i].governingLaw == \"Canada\") {\r",
													"                console.log(\"AR if loop\");\r",
													"                pm.test(\"Newly created Relationship with 'Canada' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                    pm.expect(jsonData3[i].buyerName).to.eql(pm.environment.get(\"newBuyerCompanyName_Local\"));\r",
													"                    pm.expect(jsonData3[i].supplierName).to.eql( pm.environment.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                });\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 590,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"{{currentTime}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Australia",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\") ;//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships?productCode=AR\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    console.log(\"AR for loop\");\r",
													"                    if (jsonData3[i].governingLaw == \"Australia\") {\r",
													"                        console.log(\"AR if loop\");\r",
													"                        pm.test(\"Newly created Relationship with 'Australia' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 65,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Singapore",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\") ;;//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    console.log(\"AR for loop\");\r",
													"                    if (jsonData3[i].governingLaw == \"Singapore\") {\r",
													"                        console.log(\"AR if loop\");\r",
													"                        pm.test(\"Newly created Relationship with 'Singapore' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"//  });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 266,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Belgium",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\") ;;//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    console.log(\"AR for loop\");\r",
													"                    if (jsonData3[i].governingLaw == \"Belgium\") {\r",
													"                        console.log(\"AR if loop\");\r",
													"                        pm.test(\"Newly created Relationship with 'Belgium' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 73,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Brazil",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\") ;//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    console.log(\"AR for loop\");\r",
													"                    if (jsonData3[i].governingLaw == \"Brazil\") {\r",
													"                        console.log(\"AR if loop\");\r",
													"                        pm.test(\"Newly created Relationship with 'Brazil' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 83,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Cayman Islands",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    console.log(\"AR for loop\");\r",
													"                    if (jsonData3[i].governingLaw == \"Cayman Islands\") {\r",
													"                        console.log(\"AR if loop\");\r",
													"                        pm.test(\"Newly created Relationship with 'Cayman Islands' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"//  });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 105,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Chile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\" + relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"\r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"\r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);\r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"\r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);\r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"        for (i = 0; i < jsonData1.length; i++) {\r",
													"            if (jsonData1[i].id == relationshipId) {\r",
													"\r",
													"                pm.test(\"To check newly created Relationship after activate and published: \" + relationshipId, function () {\r",
													"                    pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                    pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                });\r",
													"            }\r",
													"        }\r",
													"\r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\" + pm.variables.get(\"supplierId1\") + \"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"\r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);\r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"            for (i = 0; i < jsonData3.length; i++) {\r",
													"                if (jsonData3[i].governingLaw == \"Chile\") {\r",
													"                    pm.test(\"Newly created Relationship with 'Chile' governing law synced successfully in the AR db: \" + jsonData3[i].id, function () {\r",
													"                        pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                        pm.expect(jsonData3[i].supplierName).to.eql(pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"//  });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");;//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");;//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 108,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Colombia",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                   break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Colombia\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Colombia' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 112,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Denmark",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier;//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Denmark\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Denmark' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 124,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_England and Wales",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");;//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"England and Wales\") {\r",
													"                        pm.test(\"Newly created Relationship with 'England and Wales' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"//  });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 131,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Finland",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");;//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Finland\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Finland' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 139,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_France",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\", 2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    var jsonData = res.json();\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) {\r",
													"            pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"            console.log(\"supplierId1\", jsonData[i].id);\r",
													"            pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"    pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) {\r",
													"                pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                console.log(\"buyerId\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"France\") {\r",
													"                        pm.test(\"Newly created Relationship with 'France' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 140,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Germany",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Germany\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Germany' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 147,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Hong Kong",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Hong Kong\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Hong Kong' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 164,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Italy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Italy\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Italy' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"//  });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 174,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_India",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"India\") {\r",
													"                        pm.test(\"Newly created Relationship with 'India' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 167,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Indonesia",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Indonesia\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Indonesia' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"//  });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 168,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Japan",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                   break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Japan\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Japan' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"//  });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 176,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Luxembourg",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Luxembourg\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Luxembourg' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 194,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Malaysia",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Malaysia\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Malaysia' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 199,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Mexico",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Mexico\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Mexico' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"//  });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 208,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Netherlands",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                 pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"               break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Netherlands\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Netherlands' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 221,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Norway",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Norway\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Norway' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 231,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Peru",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Peru\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Peru' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 239,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Poland",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Poland\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Poland' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 242,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Spain",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Spain\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Spain' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"//  });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 275,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Sweden",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                   'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Sweden\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Sweden' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"//  });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 281,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Switzerland",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                 pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"               break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Switzerland\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Switzerland' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 282,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_United Arab Emirates",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"United Arab Emirates\") {\r",
													"                        pm.test(\"Newly created Relationship with 'United Arab Emirates' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 300,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_Testing_Uruguay",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeAR\", \"AR\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&&count=10000&productCode=AR\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'GET',\r",
													"// header: {\r",
													"//             'Accept': 'application/json',\r",
													"//             'Content-Type': 'application/json',\r",
													"//             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//         }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"//     pm.test(\"To check GET company has response 200\", function () {\r",
													"//                 pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"//     var jsonData1 = res.json();\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newSupplierCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARSupplierName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//         for (i = 0; i < jsonData1.length; i++) {\r",
													"//             if (jsonData1[i].company.id == pm.environment.get(\"newBuyerCompany_Local\")) {\r",
													"//                 pm.variables.set(\"ARBuyerName\", jsonData1[i].company.legalEntityName);\r",
													"//             }\r",
													"//         }\r",
													"//     console.log(\"ARSupplierName ----> \"+  pm.variables.get(\"ARSupplierName\"));\r",
													"//     console.log(\"ARBuyerName ----> \"+  pm.variables.get(\"ARBuyerName\"));\r",
													"\r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newSupplierCompanyName_Local\");//assign supplier\r",
													"    pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        var jsonData = res.json();\r",
													"        for (var i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) \r",
													"            {\r",
													"                pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
													"                console.log(\"supplierId1\", jsonData[i].id);\r",
													"                pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"    \r",
													"        var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCodeAR\")+\"&companyName=\"+pm.environment.get(\"newBuyerCompanyName_Local\");//assign buyer\r",
													"        pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            var jsonData = res.json();\r",
													"            for (var i = 0; i < jsonData.length; i++) {\r",
													"                if (jsonData[i].name === pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) \r",
													"                {\r",
													"                    pm.variables.set(\"buyerId\", jsonData[i].id);\r",
													"                    console.log(\"buyerId\", jsonData[i].id);\r",
													"                    pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
													"                    break;\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"           \r",
													"            \"id\": relationshipId,\r",
													"            \"descOfGoodsServices\": \"Treasures\",\r",
													"            \"incoTerms\": \"Any Mode or Modes of Transport\",\r",
													"            \"invoiceDueDateAdjustmentId\": 1,\r",
													"            \"paymentTerms\": 90,\r",
													"            \"additionalDisclosures\": \"100\",\r",
													"            \"statusId\": 1,\r",
													"            \"disclosureTypeId\": 2,\r",
													"            \"incoTermsTypeId\": 1,\r",
													"            \"buyerValidationDate\": pm.variables.get(\"currentTime\"),\r",
													"            \"annualSales\": \"1000k\",\r",
													"            \"calendarIds\": [\r",
													"                1\r",
													"            ]\r",
													"                                       \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    pm.test(\"To check /api/Relationships/id has response 204\", function () {\r",
													"        pm.expect(res.code).to.eql(204);      \r",
													"    });\r",
													"\r",
													"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    // pm.sendRequest({\r",
													"    // url: url1,\r",
													"    // method: 'POST',\r",
													"    // header: {\r",
													"    //     'Content-Type': 'application/json',\r",
													"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    // },\r",
													"    // body: {\r",
													"    //     mode: 'raw',\r",
													"    //     raw: {\r",
													"                                                  \r",
													"    //         }\r",
													"    //     }\r",
													"    // }, function (err, res) {\r",
													"    //     if (err) { console.log(url + err); }\r",
													"    //     pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"    //         pm.expect(res.code).to.eql(200);      \r",
													"    //     });\r",
													"   \r",
													"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
													"    pm.sendRequest({\r",
													"    url: url2,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"            for (i = 0; i < jsonData1.length; i++) {\r",
													"                if (jsonData1[i].id == relationshipId) {\r",
													"                    \r",
													"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
													"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
													"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
													"\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        \r",
													"        var url3 = pm.variables.get(\"baseURI_AR\") + \"/api/Suppliers/\"+ pm.variables.get(\"supplierId1\")+\"/supplier-buyer-relationships?command=supplier\";\r",
													"        pm.sendRequest({\r",
													"        url: url3,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"        }, function (err, res) {\r",
													"            if (err) { console.log(url + err); }\r",
													"            \r",
													"            pm.test(\"To check /api/Suppliers/id/supplier-buyer-relationships?command=supplier has response 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData3 = res.json();\r",
													"                for (i = 0; i < jsonData3.length; i++) {\r",
													"                    if (jsonData3[i].governingLaw == \"Uruguay\") {\r",
													"                        pm.test(\"Newly created Relationship with 'Uruguay' governing law synced successfully in the AR db: \"+jsonData3[i].id, function () {\r",
													"                            pm.expect(jsonData3[i].buyerName).to.eql(pm.variables.get(\"newBuyerCompanyName_Local\"));\r",
													"                            pm.expect(jsonData3[i].supplierName).to.eql( pm.variables.get(\"newSupplierCompanyName_Local\"));\r",
													"\r",
													"                        });\r",
													"                    }\r",
													"                }\r",
													"        });\r",
													"    });\r",
													"}); \r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 2,\r\n    \"productCode\": \"{{productCodeAR}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 302,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"2020-05-28T10:25:32.805Z\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"2020-05-28T10:25:32.805Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "OEN-751_To check GovLaw_Australia",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"productCode1\", \"AR\");\r",
											"pm.variables.set(\"currencyCode\", \"USD\");\r",
											"var productCode1 = pm.variables.get(\"productCode1\");\r",
											"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
											"\r",
											"var cRandom1 = getRandomAlphaNumeric(3, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"var cRandom2 = getRandomAlphaNumeric(3, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"\r",
											"var moment = require('moment');\r",
											"var timeT = moment.utc().format();\r",
											"console.log(\"Current time: \" + timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--) {\r",
											"        result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"pm.variables.set(\"entityName1\", cRandom1);\r",
											"pm.variables.set(\"entityName2\", cRandom2);\r",
											"\r",
											"var moment = require('moment');\r",
											"var timeT = moment.utc().format();\r",
											"console.log(\"Current time: \" + timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for (i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].countryCode.includes(\"AU\")) {\r",
											"            var countryName = jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \" + countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"codec\", countryCode);\r",
											"            console.log(\"country code: \" + countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/countries/\" + pm.variables.get(\"codec\") + \"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        var stateId = jsonData[0].id;\r",
											"        console.log(\"state Name: \" + stateName);\r",
											"        console.log(\"state Id: \" + stateId);\r",
											"\r",
											"        pm.variables.set(\"stateRegion\", stateName);\r",
											"        pm.variables.set(\"stateRegionId\", stateId);     \r",
											"\r",
											"        // var url1 = pm.variables.get(\"baseURI\");\r",
											"        // url1 = url1.concat(\"/api/country-jurisdictions\");\r",
											"        // pm.sendRequest({\r",
											"        //     url: url1,\r",
											"        //     method: 'GET',\r",
											"        //     header: {\r",
											"        //         'Accept': 'application/json',\r",
											"        //         'Content-Type': 'application/json',\r",
											"        //         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        //     }\r",
											"        // }, function (err, res) {\r",
											"        //     var jsonData = res.json();\r",
											"        //     for (i = 0; i < jsonData.length; i++) {\r",
											"        //         if (jsonData[i].countryCode.includes(\"AU\")) {\r",
											"        //             var jurisdiction = jsonData[i].name;\r",
											"        //             console.log(\"countryOfJurisdiction: \" + jurisdiction);\r",
											"        //             pm.variables.set(\"countryOfJurisdiction\", jurisdiction);\r",
											"        //             break;\r",
											"        //         }\r",
											"        //     }\r",
											"            var url2 = pm.variables.get(\"baseURI\");\r",
											"            url2 = url2.concat(\"/api/institution-types\");\r",
											"            pm.sendRequest({\r",
											"                url: url2,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var institutionType = jsonData[0].id;\r",
											"                console.log(\"institutionType id: \" + institutionType);\r",
											"                console.log(\"institutionType name: \" + jsonData[0].name);\r",
											"                pm.variables.set(\"institutionTypeId\", institutionType);\r",
											"\r",
											"                var url3 = pm.variables.get(\"baseURI\");\r",
											"                url3 = url3.concat(\"/api/sectors\");\r",
											"                pm.sendRequest({\r",
											"                    url: url3,\r",
											"                    method: 'GET',\r",
											"                    header: {\r",
											"                        'Accept': 'application/json',\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                    }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var sectorId = jsonData[5].id;\r",
											"                    console.log(\"sector id: \" + sectorId);\r",
											"                    console.log(\"sector name: \" + jsonData[5].name);\r",
											"                    pm.variables.set(\"sectorId\", sectorId);\r",
											"\r",
											"                    var url4 = pm.variables.get(\"baseURI\");\r",
											"                    url4 = url4.concat(\"/api/sectors/\" + pm.variables.get(\"sectorId\") + \"/industries\");\r",
											"                    pm.sendRequest({\r",
											"                        url: url4,\r",
											"                        method: 'GET',\r",
											"                        header: {\r",
											"                            'Accept': 'application/json',\r",
											"                            'Content-Type': 'application/json',\r",
											"                            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                        }\r",
											"                    }, function (err, res) {\r",
											"                        var jsonData = res.json();\r",
											"                        var industryId = jsonData[0].id;\r",
											"                        console.log(\"industry Id : \" + industryId);\r",
											"                        console.log(\"industry name: \" + jsonData[0].name);\r",
											"                        pm.variables.set(\"industryId\", industryId);\r",
											"                    \r",
											"                        var url5 = pm.variables.get(\"baseURI\") + \"/api/Companies\";\r",
											"                        pm.sendRequest({\r",
											"                            url: url5,\r",
											"                            method: 'POST',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: {\r",
											"                                    \"legalEntityName\": \"EntlRegARSupplier_A\" + pm.variables.get(\"entityName1\"),\r",
											"                                    \"name\": \"EntlRegARSupplier_A\" + pm.variables.get(\"entityName1\"),\r",
											"                                    \"country\":pm.variables.get(\"country\"),\r",
											"                                    \"countryCode\": pm.variables.get(\"codec\"),\r",
											"                                    \"formationCountryCode\":pm.variables.get(\"codec\"),\r",
											"                                    \"formationStateRegionId\": pm.variables.get(\"stateRegionId\"),\r",
											"                                    \"industryId\": null,\r",
											"                                    \"institutionTypeId\": pm.variables.get(\"institutionTypeId\"),\r",
											"                                    \"isActive\": true,\r",
											"                                    \"sectorId\": pm.variables.get(\"sectorId\"),\r",
											"                                    \"stateOfFormation\": pm.variables.get(\"stateRegion\"),\r",
											"                                    \"stateRegionId\":  pm.variables.get(\"stateRegionId\"),\r",
											"\r",
											"\r",
											"                                }\r",
											"                            }\r",
											"                        }, function (err, res) {\r",
											"                            if (err) { console.log(url + err); }\r",
											"                            var jsonData = res.json();\r",
											"                            var companyId = jsonData.id;\r",
											"                            console.log(\"Company Id1 : \" + companyId);\r",
											"                            pm.variables.set(\"companyId1\", companyId);\r",
											"                            pm.variables.set(\"companyNm\", jsonData.legalEntityName);\r",
											"\r",
											"                            var url15 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+pm.variables.get(\"companyId1\")+\"/update-status?command=activate\";//assign supplier\r",
											"                            pm.sendRequest({\r",
											"                                url: url15,\r",
											"                                method: 'PUT',\r",
											"                                header: {\r",
											"                                    'Content-Type': 'application/json',\r",
											"                                    'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                                },\r",
											"                                body: {\r",
											"                                    mode: 'raw',\r",
											"                                    raw: {\r",
											"                                        \"id\":  pm.variables.get(\"companyId1\"),\r",
											"\r",
											"                                    }\r",
											"                                }\r",
											"                            }, function (err, res) {\r",
											"                                if (err) { console.log(url + err); }\r",
											"                                //get the participant id \r",
											"\r",
											"                            var url6 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+pm.variables.get(\"companyId1\")+\"/roles\";\r",
											"                            pm.sendRequest({\r",
											"                            url: url6,\r",
											"                            method: 'PUT',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: [\r",
											"                                        {\r",
											"                                            \"companyId\": pm.variables.get(\"companyId1\"),\r",
											"                                            \"participantId\":0,\r",
											"                                            \"isActive\": true,\r",
											"                                            \"productCode\":\"AR\",\r",
											"                                            \"roleId\":8,\r",
											"                                            \"roleName\":\"Accounts Receivable - Supplier\"\r",
											"                                        }\r",
											"                                    ]\r",
											"                                }\r",
											"                            }, function (err, res) {\r",
											"                                if (err) { console.log(url + err); }\r",
											"\r",
											"                                    pm.test(\"To check add participant has response 204\", function () {\r",
											"                                        pm.expect(res.code).to.eql(204);      \r",
											"                                    });\r",
											"\r",
											"                                var url6 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCode1\")+\"&companyName=\"+pm.variables.get(\"companyNm\");//assign supplier\r",
											"                                pm.sendRequest({\r",
											"                                    url: url6,\r",
											"                                    method: 'GET',\r",
											"                                    header: {\r",
											"                                        'Content-Type': 'application/json',\r",
											"                                        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                                    }\r",
											"                                }, function (err, res) {\r",
											"                                    if (err) { console.log(url + err); }\r",
											"                                    var jsonData = res.json();\r",
											"                                    for (var i = 0; i < jsonData.length; i++) {\r",
											"                                        if (jsonData[i].name === \"EntlRegARSupplier_A\" + pm.variables.get(\"entityName1\") && jsonData[i].roleId === 8) {\r",
											"                                            pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
											"                                            console.log(\"supplierId1\", jsonData[i].id);\r",
											"                                            pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
											"                                            break;\r",
											"                                        }\r",
											"                                    }\r",
											"\r",
											"                                })\r",
											"                            });\r",
											"\r",
											"                            });\r",
											"\r",
											"                        })\r",
											"                        //L11-S\r",
											"                        pm.sendRequest({\r",
											"                            url: url5,\r",
											"                            method: 'POST',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: {\r",
											"                                     \"legalEntityName\": \"EntlRegARBuyer_A\" + pm.variables.get(\"entityName2\"),\r",
											"                                     \"name\": \"EntlRegARBuyer_A\" + pm.variables.get(\"entityName2\"),\r",
											"                                    \"country\":pm.variables.get(\"country\"),\r",
											"                                    \"countryCode\": pm.variables.get(\"codec\"),\r",
											"                                    \"formationCountryCode\":pm.variables.get(\"codec\"),\r",
											"                                    \"formationStateRegionId\": pm.variables.get(\"stateRegionId\"),\r",
											"                                    \"industryId\": null,\r",
											"                                    \"institutionTypeId\": pm.variables.get(\"institutionTypeId\"),\r",
											"                                    \"isActive\": true,\r",
											"                                    // \"sectorId\": pm.variables.get(\"sectorId\"),\r",
											"                                    \"stateOfFormation\": pm.variables.get(\"stateRegion\"),\r",
											"                                    \"stateRegion\": pm.variables.get(\"stateRegion\"),\r",
											"                                    \"stateRegionId\":  pm.variables.get(\"stateRegionId\"),\r",
											"\r",
											"                        \r",
											"                                }\r",
											"                            }\r",
											"                        }, function (err, res) {\r",
											"                            if (err) { console.log(url + err); }\r",
											"                            var jsonData = res.json();\r",
											"                            var companyId = jsonData.id;\r",
											"                            console.log(\"Company Id2 : \" + companyId);\r",
											"                            pm.variables.set(\"companyId2\", companyId);\r",
											"                            pm.variables.set(\"companyNm2\", jsonData.legalEntityName);\r",
											"                            var url16 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+pm.variables.get(\"companyId2\")+\"/update-status?command=activate\";//assign supplier\r",
											"                            pm.sendRequest({\r",
											"                                url: url16,\r",
											"                                method: 'PUT',\r",
											"                                header: {\r",
											"                                    'Content-Type': 'application/json',\r",
											"                                    'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                                },\r",
											"                                body: {\r",
											"                                    mode: 'raw',\r",
											"                                    raw: {\r",
											"                                        \"id\":  pm.variables.get(\"companyId2\"),\r",
											"\r",
											"                                    }\r",
											"                                }\r",
											"                            }, function (err, res) {\r",
											"                                if (err) { console.log(url + err); }\r",
											"                                //get the participant id \r",
											"\r",
											"                            //Create User and add to participant\r",
											"                            var url6 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+pm.variables.get(\"companyId2\")+\"/roles\";\r",
											"                            pm.sendRequest({\r",
											"                            url: url6,\r",
											"                            method: 'PUT',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: [\r",
											"                                        {\r",
											"                                            \"companyId\": pm.variables.get(\"companyId2\"),\r",
											"                                            \"participantId\":0,\r",
											"                                            \"isActive\": true,\r",
											"                                            \"productCode\":\"AR\",\r",
											"                                            \"roleId\":10,\r",
											"                                            \"roleName\":\"Accounts Receivable - Buyer\"\r",
											"                                        }\r",
											"                                    ]\r",
											"                                }\r",
											"                            }, function (err, res) {\r",
											"                                if (err) { console.log(url + err); }\r",
											"\r",
											"                                    pm.test(\"To check add participant has response 204\", function () {\r",
											"                                        pm.expect(res.code).to.eql(204);      \r",
											"                                    });\r",
											"\r",
											"                                var url6 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCode1\")+\"&companyName=\"+pm.variables.get(\"companyNm2\") ;;//assign buyer\r",
											"                                pm.sendRequest({\r",
											"                                    url: url6,\r",
											"                                    method: 'GET',\r",
											"                                    header: {\r",
											"                                        'Content-Type': 'application/json',\r",
											"                                        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                                    }\r",
											"                                }, function (err, res) {\r",
											"                                    if (err) { console.log(url + err); }\r",
											"                                    var jsonData = res.json();\r",
											"                                    for (var i = 0; i < jsonData.length; i++) {\r",
											"                                        if (jsonData[i].name === \"EntlRegARBuyer_A\" + pm.variables.get(\"entityName2\") && jsonData[i].roleId === 10) {\r",
											"                                            pm.variables.set(\"buyerId\", jsonData[i].id);\r",
											"                                            console.log(\"buyerId\", jsonData[i].id);\r",
											"                                            pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
											"                                            break;\r",
											"                                        }\r",
											"                                    }\r",
											"                                })\r",
											"\r",
											"                            });\r",
											"                            // });\r",
											"                        });\r",
											"\r",
											"                        //L11-E\r",
											"                    });\r",
											"                });\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var relationshipId = jsonData.id;\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"             'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check update /api/Relationships/id has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"    \r",
											"    var jsonData1 = res.json();  \r",
											"   \r",
											"    pm.test(\"To check newly created Relationship and governing law values for: \"+relationshipId, function () {\r",
											"        pm.expect(jsonData1.productCode).to.eql(\"AR\");\r",
											"        pm.expect(jsonData1.status).to.eql(\"Active\");\r",
											"        pm.expect(jsonData1.governingLawId).to.eql(586);\r",
											"        pm.expect(jsonData1.governingLaw).to.eql(\"Australia - Australian Capital Territory\");\r",
											"\r",
											"    });\r",
											"        \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCode1}}\",\r\n    \"regionCode\": \"NY\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 586,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Relationships",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Relationships"
									]
								}
							},
							"response": []
						},
						{
							"name": "OEN-751_To check GovLaw_Canada",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"productCode1\", \"AR\");\r",
											"pm.variables.set(\"currencyCode\", \"USD\");\r",
											"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
											"\r",
											"var productCode1 = pm.variables.get(\"productCode1\");\r",
											"var cRandom1 = getRandomAlphaNumeric(3, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"var cRandom2 = getRandomAlphaNumeric(3, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"\r",
											"var moment = require('moment');\r",
											"var timeT = moment.utc().format();\r",
											"console.log(\"Current time: \" + timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--) {\r",
											"        result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"pm.variables.set(\"entityName1\", cRandom1);\r",
											"pm.variables.set(\"entityName2\", cRandom2);\r",
											"\r",
											"var moment = require('moment');\r",
											"var timeT = moment.utc().format();\r",
											"console.log(\"Current time: \" + timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for (i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].countryCode.includes(\"CA\")) {\r",
											"            var countryName = jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \" + countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"codec\", countryCode);\r",
											"            console.log(\"country code: \" + countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/countries/\" + pm.variables.get(\"codec\") + \"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        var stateId = jsonData[0].id;\r",
											"        console.log(\"state Name: \" + stateName);\r",
											"        pm.variables.set(\"stateRegion\", stateName);\r",
											"        console.log(\"state Id: \" + stateId);\r",
											"        pm.variables.set(\"stateRegionId\", stateId);    \r",
											"\r",
											"        // var url1 = pm.variables.get(\"baseURI\");\r",
											"        // url1 = url1.concat(\"/api/country-jurisdictions\");\r",
											"        // pm.sendRequest({\r",
											"        //     url: url1,\r",
											"        //     method: 'GET',\r",
											"        //     header: {\r",
											"        //         'Accept': 'application/json',\r",
											"        //         'Content-Type': 'application/json',\r",
											"        //          'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        //         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        //     }\r",
											"        // }, function (err, res) {\r",
											"        //     var jsonData = res.json();\r",
											"        //     for (i = 0; i < jsonData.length; i++) {\r",
											"        //         if (jsonData[i].countryCode.includes(\"CA\")) {\r",
											"        //             var jurisdiction = jsonData[i].name;\r",
											"        //             console.log(\"countryOfJurisdiction: \" + jurisdiction);\r",
											"        //             pm.variables.set(\"countryOfJurisdiction\", jurisdiction);\r",
											"        //             break;\r",
											"        //         }\r",
											"        //     }\r",
											"            var url2 = pm.variables.get(\"baseURI\");\r",
											"            url2 = url2.concat(\"/api/institution-types\");\r",
											"            pm.sendRequest({\r",
											"                url: url2,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var institutionType = jsonData[0].id;\r",
											"                console.log(\"institutionType id: \" + institutionType);\r",
											"                console.log(\"institutionType name: \" + jsonData[0].name);\r",
											"                pm.variables.set(\"institutionTypeId\", institutionType);\r",
											"\r",
											"                var url3 = pm.variables.get(\"baseURI\");\r",
											"                url3 = url3.concat(\"/api/sectors\");\r",
											"                pm.sendRequest({\r",
											"                    url: url3,\r",
											"                    method: 'GET',\r",
											"                    header: {\r",
											"                        'Accept': 'application/json',\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                    }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var sectorId = jsonData[5].id;\r",
											"                    console.log(\"sector id: \" + sectorId);\r",
											"                    console.log(\"sector name: \" + jsonData[5].name);\r",
											"                    pm.variables.set(\"sectorId\", sectorId);\r",
											"\r",
											"                    var url4 = pm.variables.get(\"baseURI\");\r",
											"                    url4 = url4.concat(\"/api/sectors/\" + pm.variables.get(\"sectorId\") + \"/industries\");\r",
											"                    pm.sendRequest({\r",
											"                        url: url4,\r",
											"                        method: 'GET',\r",
											"                        header: {\r",
											"                            'Accept': 'application/json',\r",
											"                            'Content-Type': 'application/json',\r",
											"                            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                        }\r",
											"                    }, function (err, res) {\r",
											"                        var jsonData = res.json();\r",
											"                        var industryId = jsonData[0].id;\r",
											"                        console.log(\"industry Id : \" + industryId);\r",
											"                        console.log(\"industry name: \" + jsonData[0].name);\r",
											"                        pm.variables.set(\"industryId\", industryId);\r",
											"\r",
											"                        var url5 = pm.variables.get(\"baseURI\") + \"/api/Companies\";\r",
											"                        pm.sendRequest({\r",
											"                            url: url5,\r",
											"                            method: 'POST',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: {\r",
											"                                     \"legalEntityName\": \"EntlRegARSupplier_B\" + pm.variables.get(\"entityName1\"),\r",
											"                                     \"name\": \"EntlRegARSupplier_B\" + pm.variables.get(\"entityName1\"),\r",
											"                                    \"country\":pm.variables.get(\"country\"),\r",
											"                                    \"countryCode\": pm.variables.get(\"codec\"),\r",
											"                                    \"formationCountryCode\":pm.variables.get(\"codec\"),\r",
											"                                    \"formationStateRegionId\": pm.variables.get(\"stateRegionId\"),\r",
											"                                    \"industryId\": null,\r",
											"                                    \"institutionTypeId\": pm.variables.get(\"institutionTypeId\"),\r",
											"                                    \"isActive\": true,\r",
											"                                    \"sectorId\": pm.variables.get(\"sectorId\"),\r",
											"                                    \"stateOfFormation\": pm.variables.get(\"stateRegion\"),\r",
											"                                    \"stateRegion\": pm.variables.get(\"stateRegion\"),\r",
											"                                    \"stateRegionId\":  pm.variables.get(\"stateRegionId\"),\r",
											"\r",
											"                                }\r",
											"                            }\r",
											"                        }, function (err, res) {\r",
											"                            //  console.log(\"Result:\" + res.text());\r",
											"                            if (err) { console.log(url + err); }\r",
											"                            var jsonData = res.json();\r",
											"                            var companyId = jsonData.id;\r",
											"                            console.log(\"Company Id1 : \" + companyId);\r",
											"                            pm.variables.set(\"companyId1\", companyId);\r",
											"                            pm.variables.set(\"companyNm1\", jsonData.legalEntityName);\r",
											"\r",
											"                            var url15 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+pm.variables.get(\"companyId1\")+\"/update-status?command=activate\";//assign supplier\r",
											"                            pm.sendRequest({\r",
											"                                url: url15,\r",
											"                                method: 'PUT',\r",
											"                                header: {\r",
											"                                    'Content-Type': 'application/json',\r",
											"                                    'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                                },\r",
											"                                body: {\r",
											"                                    mode: 'raw',\r",
											"                                    raw: {\r",
											"                                        \"id\":  pm.variables.get(\"companyId1\"),\r",
											"\r",
											"                                    }\r",
											"                                }\r",
											"                            }, function (err, res) {\r",
											"                                if (err) { console.log(url + err); }\r",
											"                                //get the participant id \r",
											"\r",
											"                            var url6 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+pm.variables.get(\"companyId1\")+\"/roles\";\r",
											"                            pm.sendRequest({\r",
											"                            url: url6,\r",
											"                            method: 'PUT',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: [\r",
											"                                        {\r",
											"                                            \"companyId\": pm.variables.get(\"companyId1\"),\r",
											"                                            \"participantId\":0,\r",
											"                                            \"isActive\": true,\r",
											"                                            \"productCode\":\"AR\",\r",
											"                                            \"roleId\":8,\r",
											"                                            \"roleName\":\"Accounts Receivable - Supplier\"\r",
											"                                        }\r",
											"                                    ]\r",
											"                                }\r",
											"                            }, function (err, res) {\r",
											"                                if (err) { console.log(url + err); }\r",
											"\r",
											"                                    pm.test(\"To check add participant has response 204\", function () {\r",
											"                                        pm.expect(res.code).to.eql(204);      \r",
											"                                    });\r",
											"\r",
											"                                var url6 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + pm.variables.get(\"productCode1\")+\"&companyName=\"+pm.variables.get(\"companyNm1\");//assign supplier\r",
											"                                pm.sendRequest({\r",
											"                                    url: url6,\r",
											"                                    method: 'GET',\r",
											"                                    header: {\r",
											"                                        'Content-Type': 'application/json',\r",
											"                                        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                                    }\r",
											"                                }, function (err, res) {\r",
											"                                    if (err) { console.log(url + err); }\r",
											"                                    var jsonData = res.json();\r",
											"                                    for (var i = 0; i < jsonData.length; i++) {\r",
											"                                        if (jsonData[i].name === \"EntlRegARSupplier_B\" + pm.variables.get(\"entityName1\") && jsonData[i].roleId === 8) {\r",
											"                                            pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
											"                                            console.log(\"supplierId1\", jsonData[i].id);\r",
											"                                            pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
											"                                            break;\r",
											"                                        }\r",
											"                                    }\r",
											"\r",
											"                                })\r",
											"                            });\r",
											"\r",
											"                            });\r",
											"\r",
											"                        })\r",
											"                        //L11-S\r",
											"                        pm.sendRequest({\r",
											"                            url: url5,\r",
											"                            method: 'POST',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: {\r",
											"                                     \"legalEntityName\": \"EntlRegARBuyer_B\" + pm.variables.get(\"entityName2\"),\r",
											"                                     \"name\": \"EntlRegARBuyer_B\" + pm.variables.get(\"entityName2\"),\r",
											"                                    \"country\":pm.variables.get(\"country\"),\r",
											"                                    \"countryCode\": pm.variables.get(\"codec\"),\r",
											"                                    \"formationCountryCode\":pm.variables.get(\"codec\"),\r",
											"                                    \"formationStateRegionId\": pm.variables.get(\"stateRegionId\"),\r",
											"                                    \"industryId\": null,\r",
											"                                    \"institutionTypeId\": pm.variables.get(\"institutionTypeId\"),\r",
											"                                    \"isActive\": true,\r",
											"                                    \"sectorId\": pm.variables.get(\"sectorId\"),\r",
											"                                    \"stateOfFormation\": pm.variables.get(\"stateRegion\"),\r",
											"                                    \"stateRegion\": pm.variables.get(\"stateRegion\"),\r",
											"                                    \"stateRegionId\":  pm.variables.get(\"stateRegionId\"),\r",
											"\r",
											"                           \r",
											"                                }\r",
											"                            }\r",
											"                        }, function (err, res) {\r",
											"                            //  console.log(\"Result:\" + res.text());\r",
											"                            if (err) { console.log(url + err); }\r",
											"                            var jsonData = res.json();\r",
											"                            var companyId = jsonData.id;\r",
											"                            console.log(\"Company Id2 : \" + companyId);\r",
											"                            pm.variables.set(\"companyId2\", companyId);\r",
											"                            pm.variables.set(\"companyNm2\", jsonData.legalEntityName);\r",
											"\r",
											"                            var url16 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+pm.variables.get(\"companyId2\")+\"/update-status?command=activate\";//assign supplier\r",
											"                            pm.sendRequest({\r",
											"                                url: url16,\r",
											"                                method: 'PUT',\r",
											"                                header: {\r",
											"                                    'Content-Type': 'application/json',\r",
											"                                    'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                                },\r",
											"                                body: {\r",
											"                                    mode: 'raw',\r",
											"                                    raw: {\r",
											"                                        \"id\":  pm.variables.get(\"companyId2\"),\r",
											"\r",
											"                                    }\r",
											"                                }\r",
											"                            }, function (err, res) {\r",
											"                                if (err) { console.log(url + err); }\r",
											"                                //get the participant id \r",
											"\r",
											"                            //Create User and add to participant\r",
											"                            var url6 = pm.variables.get(\"baseURI\") + \"/api/companies/\"+pm.variables.get(\"companyId2\")+\"/roles\";\r",
											"                            pm.sendRequest({\r",
											"                            url: url6,\r",
											"                            method: 'PUT',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: [\r",
											"                                        {\r",
											"                                            \"companyId\": pm.variables.get(\"companyId2\"),\r",
											"                                            \"participantId\":0,\r",
											"                                            \"isActive\": true,\r",
											"                                            \"productCode\":\"AR\",\r",
											"                                            \"roleId\":10,\r",
											"                                            \"roleName\":\"Accounts Receivable - Buyer\"\r",
											"                                        }\r",
											"                                    ]\r",
											"                                }\r",
											"                            }, function (err, res) {\r",
											"                                if (err) { console.log(url + err); }\r",
											"\r",
											"                                    pm.test(\"To check add participant has response 204\", function () {\r",
											"                                        pm.expect(res.code).to.eql(204);      \r",
											"                                    });\r",
											"\r",
											"                                var url6 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + pm.variables.get(\"productCode1\")+\"&companyName=\"+pm.variables.get(\"companyNm2\") ;//assign buyer\r",
											"                                pm.sendRequest({\r",
											"                                    url: url6,\r",
											"                                    method: 'GET',\r",
											"                                    header: {\r",
											"                                        'Content-Type': 'application/json',\r",
											"                                        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                                        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                                    }\r",
											"                                }, function (err, res) {\r",
											"                                    if (err) { console.log(url + err); }\r",
											"                                    var jsonData = res.json();\r",
											"                                    for (var i = 0; i < jsonData.length; i++) {\r",
											"                                        if (jsonData[i].name === \"EntlRegARBuyer_B\" + pm.variables.get(\"entityName2\") && jsonData[i].roleId === 10) {\r",
											"                                            pm.variables.set(\"buyerId\", jsonData[i].id);\r",
											"                                            console.log(\"buyerId\", jsonData[i].id);\r",
											"                                            pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
											"                                            break;\r",
											"                                        }\r",
											"                                    }\r",
											"                                })\r",
											"\r",
											"                            });\r",
											"                            // });\r",
											"                        });\r",
											"\r",
											"                        //L11-E\r",
											"                    });\r",
											"                });\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var relationshipId = jsonData.id;\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check update /api/Relationships/id has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"    \r",
											"    var jsonData1 = res.json();  \r",
											"           \r",
											"    pm.test(\"To check newly created Relationship and governing law values for: \"+relationshipId, function () {\r",
											"        pm.expect(jsonData1.productCode).to.eql(\"AR\");\r",
											"        pm.expect(jsonData1.status).to.eql(\"Active\");\r",
											"        pm.expect(jsonData1.governingLawId).to.eql(93);\r",
											"        pm.expect(jsonData1.governingLaw).to.eql(\"Canada - British Columbia\");\r",
											"    });     \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCode1}}\",\r\n    \"regionCode\": \"NY\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 93,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Relationships",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Relationships"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseBody != null) {",
									"    if (responseBody == '[]' || responseBody == '{}') {",
									"        tests[\"Body is empty \" + responseBody] = false;",
									"        console.log(\"responseBody\", responseBody);",
									"    }",
									"    else {",
									"        tests[\"Body is not empty\"] = true;",
									"    }",
									"}",
									"else {",
									"    tests[\"Body is empty\" + responseBody] = false;",
									"    console.log(\"responseBody\", responseBody);",
									"}",
									"pm.test(\"Status code is 200\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([204,200,201]);",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Platforms",
					"item": [
						{
							"name": "CreatePlatform",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.name;\r",
											"\r",
											"pm.test(\"To check new platform is created: \" + expCmpId, function () {\r",
											"    pm.expect(jsonData.name).to.eql('RegEntl_' + suffix + '_platform' );\r",
											"    pm.expect(jsonData.code).to.eql('REGENT_' + suffix );\r",
											"    pm.expect(jsonData.platformUrl).to.eql('https://EntlReg_testPlatform_'+suffix+'.com');\r",
											"    pm.expect(jsonData.isActive).to.eql(true);\r",
											"});\r",
											"pm.test(\"To check new platform decimalPrecision is not null: \" + jsonData.name, function () {\r",
											"    pm.expect(jsonData.decimalPrecision).to.be.not.eql(null);\r",
											"    pm.expect(jsonData.helpText).to.be.not.eql(null);\r",
											"    pm.expect(jsonData.replyToEmailAddress).to.be.not.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"REGENT_{{entityName}}\",\r\n    \"name\": \"RegEntl_{{entityName}}_platform\",\r\n    \"platformUrl\": \"https://EntlReg_testPlatform_{{entityName}}.com\",\r\n    \"isActive\": true,\r\n    \"decimalPrecision\": 4,\r\n    \"helpText\": \"Test\",\r\n    \"replyToEmailAddress\": \"testPlaform-QA@gmail.com\",\r\n    \"dayCountConvention\": 360,\r\n    \"discountMarginPrecision\": 4,\r\n    \"emailFontColor\": \"#FFFFFF\",\r\n    \"emailPrimaryColor\": \"#0072C6\",\r\n    \"importsEnabled\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Platform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.name;\r",
											"var newCode = jsonData.code;\r",
											"pm.variables.set(\"NewUserCode\", newCode);\r",
											"console.log(newCode);\r",
											"\r",
											"pm.test(\"To check new platform is created: \" + expCmpId, function () {\r",
											"    pm.expect(jsonData.name).to.eql('RegEntl_' + suffix + '_platform' );\r",
											"    pm.expect(jsonData.code).to.eql('REGENT_' + suffix );\r",
											"    pm.expect(jsonData.platformUrl).to.eql('https://EntlReg_testPlatform_'+suffix+'.com');\r",
											"    pm.expect(jsonData.isActive).to.eql(true);\r",
											"});\r",
											"pm.test(\"To check new platform decimalPrecision is not null: \" + jsonData.decimalPrecision, function () {\r",
											"    pm.expect(jsonData.decimalPrecision).to.be.not.eql(null);\r",
											"    pm.expect(jsonData.helpText).to.be.not.eql(null);\r",
											"    pm.expect(jsonData.replyToEmailAddress).to.be.not.eql(null);\r",
											"\r",
											"});\r",
											"pm.test(\"To check MFA checkbox is Enabled or not : \"+jsonData.mfaenabled, function () {\r",
											"    if(jsonData.mfaenabled===true){\r",
											"    console.log(\"MFA is Enabled\");\r",
											"    }else{\r",
											"        console.log(\"MFA is Disabled\")\r",
											"    }\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"REGENT_{{entityName}}\",\r\n    \"name\": \"RegEntl_{{entityName}}_platform\",\r\n    \"platformUrl\": \"https://EntlReg_testPlatform_{{entityName}}.com\",\r\n    \"isActive\": true,\r\n    \"decimalPrecision\": 4,\r\n    \"helpText\": \"Test\",\r\n    \"replyToEmailAddress\": \"testPlaform-QA@gmail.com\",\r\n    \"dayCountConvention\": 360,\r\n    \"discountMarginPrecision\": 4,\r\n    \"emailFontColor\": \"#FFFFFF\",\r\n    \"emailPrimaryColor\": \"#0072C6\",\r\n    \"importsEnabled\": true\r\n    // \"mfaenabled\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Publications/platforms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseJSONdata = JSON.parse(responseBody);",
											" for (i = 0; i < responseJSONdata.length; i++) ",
											"{",
											"    pm.test(\"Validating Publications/platforms format from response body \", function () {",
											"        ",
											"            pm.expect(responseJSONdata[i]).to.have.all.keys('error', 'name','operationType','participantType','product','state');",
											"        ",
											"    });",
											"    pm.test(\"Validating publication/sync is successful\", function () {",
											"        ",
											"            pm.expect(responseJSONdata[i].state).equals(\"Success\");",
											"        ",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Publications/platforms",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Publications",
										"platforms"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Products to Platform",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var productCodePlatform = \"AR\";\r",
											"pm.variables.set(\"productCodePlatform\",productCodePlatform);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].code.includes(\"ENTREG_\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // var url1 = pm.variables.get(\"baseURI\");\r",
											"    // url1 = url1.concat(\"/api/products\");\r",
											"\r",
											"    // pm.sendRequest({\r",
											"    //     url: url,\r",
											"    //     method: 'GET',\r",
											"    //     header: {\r",
											"    //         'Accept': 'application/json',\r",
											"    //         'Content-Type': 'application/json',\r",
											"    //         'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"    //     }\r",
											"        \r",
											"    // }, function (err, res) {\r",
											"    //     var jsonData = res.json();\r",
											"    // });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var url1 = pm.variables.get(\"baseURI\");\r",
											"url1 = url1.concat(\"/api/platforms/\"+pm.variables.get(\"codePlatform\")+\"/products\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"    \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"\r",
											"    pm.test(\"Validating platform format from response body \", function () {\r",
											"        for (i = 0; i < jsonData.length; i++) \r",
											"        {\r",
											"            pm.expect(jsonData[i].code).to.be.eql(pm.variables.get(\"productCodePlatform\"));\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    \"{{productCodePlatform}}\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatform}}/products",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatform}}",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add platforms currencies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=100&skip=0\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].name.includes(\"EntlReg_\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatformCurrency\", jsonData[i].code);\r",
											"            console.log(\"---------------- \"+jsonData[i].code);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/currencies\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        // for(i=0; i<jsonData.length; i++)\r",
											"        // {\r",
											"            \r",
											"            pm.variables.set(\"codeCurrency\", jsonData[0].currencyCode);\r",
											"            pm.variables.set(\"nameCurrency\", jsonData[0].name);\r",
											"            \r",
											"        // }\r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var url1 = pm.variables.get(\"baseURI\");\r",
											"url1 = url1.concat(\"/api/platforms/\"+pm.variables.get(\"codePlatformCurrency\")+\"/currencies\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"    \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"\r",
											"    pm.test(\"Validating currency code: \"+ pm.variables.get(\"codeCurrency\"), function () {\r",
											"        for (i = 0; i < jsonData.length; i++) \r",
											"        {\r",
											"            pm.expect(jsonData[i].currencyCode).to.be.eql(pm.variables.get(\"codeCurrency\"));\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validating format from response body for total platform currencies: \"+jsonData.length, function () {\r",
											"    for (i = 0; i < jsonData.length; i++) {\r",
											"        pm.expect(jsonData[i]).to.have.all.keys('currencyCode', 'name','dayCountConvention');\r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											"    var codeCurrencyL = pm.variables.get(\"codeCurrency\");\r",
											"    var nameCurrencyL = pm.variables.get(\"nameCurrencyL\");\r",
											"  \r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"        url = url.concat(\"/api/platforms/\"+ pm.variables.get(\"codePlatformCurrency\")+\"/currencies\");\r",
											"    var codeCurrency = pm.variables.get(\"codeCurrency\");\r",
											"        pm.sendRequest({\r",
											"            url: url,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: [\r",
											"                    {\r",
											"                        \"currencyCode\":codeCurrencyL,\r",
											"                        \"name\":nameCurrencyL,\r",
											"                        \"dayCountConvention\":360\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"            }, function (err, res) {\r",
											"            if (err) { console.log(err); }\r",
											"            // var jsonData = res.json();\r",
											"            // var newId = jsonData.id;\r",
											"            // console.log(\"NewUserID:\" + newId);\r",
											"            // pm.variables.set(\"NewUserID\", newId);\r",
											"        });\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[ \r\n    {\r\n        \"currencyCode\":\"{{codeCurrency}}\",\r\n        \"name\":\"{{nameCurrency}}\",\r\n        \"dayCountConvention\":360\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatformCurrency}}/currencies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatformCurrency}}",
										"currencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add {platformCode}/message-templates",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=100&skip=0\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].name.includes(\"EntlReg_\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatformMessageTemplate\", jsonData[i].code);\r",
											"            console.log(\"codePlatformMessageTemplate---- \"+pm.variables.get(\"codePlatformMessageTemplate\"));\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/message-templates\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        // for(i=0; i<jsonData.length; i++)\r",
											"        // {\r",
											"            \r",
											"            pm.variables.set(\"messageTemplateId\", jsonData[0].id);\r",
											"            \r",
											"        // }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var url1 = pm.variables.get(\"baseURI\");\r",
											"url1 = url1.concat(\"/api/platforms/\"+pm.variables.get(\"codePlatformMessageTemplate\")+\"/message-templates\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"    \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"\r",
											"    pm.test(\"Validating message-templates: \"+ pm.variables.get(\"codePlatformMessageTemplate\"), function () {\r",
											"        for (i = 0; i < jsonData.length; i++) \r",
											"        {\r",
											"            pm.expect(jsonData[i].id).to.be.eql(pm.variables.get(\"messageTemplateId\"));\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validating format from response body for {platformCode}/message-templates: \"+jsonData.length, function () {\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"            pm.expect(jsonData[i]).to.have.all.keys('id','messageTemplateTypeId', 'description','message');\r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											"    //  var url = pm.variables.get(\"baseURI\");\r",
											"    //     url = url.concat(\"/api/platforms/\"+ pm.variables.get(\"codePlatformMessageTemplate\")+\"/message-templates\");\r",
											"    // // var messageTemplateId = pm.variables.get(\"messageTemplateId\");\r",
											"    //     pm.sendRequest({\r",
											"    //         url: url,\r",
											"    //         method: 'POST',\r",
											"    //         header: {\r",
											"    //             'Content-Type': 'application/json',\r",
											"    //             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    //         },\r",
											"    //         body: {\r",
											"    //             mode: 'raw',\r",
											"    //             raw: []\r",
											"    //         }\r",
											"    //         }, function (err, res) {\r",
											"    //         if (err) { console.log(err); }\r",
											"    //         // var jsonData = res.json();\r",
											"    //         // var newId = jsonData.id;\r",
											"    //         // console.log(\"NewUserID:\" + newId);\r",
											"    //         // pm.variables.set(\"NewUserID\", newId);\r",
											"    //     });\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{{messageTemplateId}}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatformMessageTemplate}}/message-templates",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatformMessageTemplate}}",
										"message-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove {platformCode}/message-templates",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"codePlatformMessageTemplate\", pm.variables.get(\"codePlatformMessageTemplate\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatformMessageTemplate}}/message-templates",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatformMessageTemplate}}",
										"message-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add {platformCode}/calculation-types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var  cRandom = getRandomAlphaNumeric(4,\"ABC0123DE45FGHIJ678KLMNOPQR9STUVWXYZ\");\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"pm.variables.set(\"displayName\", cRandom);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=100&skip=0\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].name.includes(\"EntlReg_\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatformCalculationTypes\", jsonData[i].code);\r",
											"            // console.log(\"codePlatformCalculationTypes---- \"+pm.variables.get(\"codePlatformCalculationTypes\"));\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/calculation-types\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"            \r",
											"        pm.variables.set(\"calculationTypeId\", jsonData[0].id);\r",
											"        pm.variables.set(\"calculationTypeName\", jsonData[0].name);\r",
											"             \r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var prefix = pm.variables.get(\"calculationTypeName\");\r",
											"var url1 = pm.variables.get(\"baseURI\");\r",
											"url1 = url1.concat(\"/api/platforms/\"+pm.variables.get(\"codePlatformCalculationTypes\")+\"/calculation-types\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"    \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"\r",
											"    pm.test(\"Validating calculation-types: \"+ pm.variables.get(\"codePlatformCalculationTypes\"), function () {\r",
											"        for (i = 0; i < jsonData.length; i++) \r",
											"        {\r",
											"            pm.expect(jsonData[i].calculationTypeId).to.be.eql(pm.variables.get(\"calculationTypeId\"));\r",
											"            pm.expect(jsonData[i].calculationTypeDisplayName).to.be.eql(prefix+'_QA');     \r",
											"            pm.expect(jsonData[i].platformCode).to.be.eql(pm.variables.get(\"codePlatformCalculationTypes\"));\r",
											"\r",
											"        }\r",
											"\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validating format from response body for {platformCode}/calculation-types: \"+jsonData.length, function () {\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"            pm.expect(jsonData[i]).to.have.all.keys('id', 'calculationTypeId','calculationTypeName','calculationTypeDisplayName','platformCode');\r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											"    //  var url = pm.variables.get(\"baseURI\");\r",
											"    //     url = url.concat(\"/api/platforms/\"+ pm.variables.get(\"codePlatformMessageTemplate\")+\"/message-templates\");\r",
											"    // // var messageTemplateId = pm.variables.get(\"messageTemplateId\");\r",
											"    //     pm.sendRequest({\r",
											"    //         url: url,\r",
											"    //         method: 'POST',\r",
											"    //         header: {\r",
											"    //             'Content-Type': 'application/json',\r",
											"    //             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    //         },\r",
											"    //         body: {\r",
											"    //             mode: 'raw',\r",
											"    //             raw: []\r",
											"    //         }\r",
											"    //         }, function (err, res) {\r",
											"    //         if (err) { console.log(err); }\r",
											"    //         // var jsonData = res.json();\r",
											"    //         // var newId = jsonData.id;\r",
											"    //         // console.log(\"NewUserID:\" + newId);\r",
											"    //         // pm.variables.set(\"NewUserID\", newId);\r",
											"    //     });\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"calculationTypeId\": {{calculationTypeId}},\r\n        \"name\": \"{{calculationTypeName}}\",\r\n        \"displayName\": \"{{calculationTypeName}}_QA\",\r\n        \"platformCode\": \"{{codePlatformCalculationTypes}}\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatformCalculationTypes}}/calculation-types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatformCalculationTypes}}",
										"calculation-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove {platformCode}/calculation-types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var  cRandom = getRandomAlphaNumeric(4,\"ABC0123DE45FGHIJ678KLMNOPQR9STUVWXYZ\");\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"pm.variables.set(\"displayName\", cRandom);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=100&skip=0\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].name.includes(\"EntlReg_\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatformCalculationTypes\", jsonData[i].code);\r",
											"            // console.log(\"codePlatformCalculationTypes---- \"+pm.variables.get(\"codePlatformCalculationTypes\"));\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/calculation-types\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"            \r",
											"        pm.variables.set(\"calculationTypeId\", jsonData[0].id);\r",
											"        pm.variables.set(\"calculationTypeName\", jsonData[0].name);\r",
											"             \r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var prefix = pm.variables.get(\"calculationTypeName\");\r",
											"var url1 = pm.variables.get(\"baseURI\");\r",
											"url1 = url1.concat(\"/api/platforms/\"+pm.variables.get(\"codePlatformCalculationTypes\")+\"/calculation-types\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"    \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"\r",
											"    pm.test(\"Validating calculation-types: \"+ pm.variables.get(\"codePlatformCalculationTypes\"), function () {\r",
											"        for (i = 0; i < jsonData.length; i++) \r",
											"        {\r",
											"            pm.expect(jsonData[i].calculationTypeId).to.be.eql(pm.variables.get(\"calculationTypeId\"));\r",
											"            pm.expect(jsonData[i].calculationTypeDisplayName).to.be.eql(prefix+'_QA');     \r",
											"            pm.expect(jsonData[i].platformCode).to.be.eql(pm.variables.get(\"codePlatformCalculationTypes\"));\r",
											"\r",
											"        }\r",
											"\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validating format from response body for {platformCode}/calculation-types: \"+jsonData.length, function () {\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"            pm.expect(jsonData[i]).to.have.all.keys('id', 'calculationTypeId','calculationTypeName','calculationTypeDisplayName','platformCode');\r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											"    //  var url = pm.variables.get(\"baseURI\");\r",
											"    //     url = url.concat(\"/api/platforms/\"+ pm.variables.get(\"codePlatformMessageTemplate\")+\"/message-templates\");\r",
											"    // // var messageTemplateId = pm.variables.get(\"messageTemplateId\");\r",
											"    //     pm.sendRequest({\r",
											"    //         url: url,\r",
											"    //         method: 'POST',\r",
											"    //         header: {\r",
											"    //             'Content-Type': 'application/json',\r",
											"    //             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    //         },\r",
											"    //         body: {\r",
											"    //             mode: 'raw',\r",
											"    //             raw: []\r",
											"    //         }\r",
											"    //         }, function (err, res) {\r",
											"    //         if (err) { console.log(err); }\r",
											"    //         // var jsonData = res.json();\r",
											"    //         // var newId = jsonData.id;\r",
											"    //         // console.log(\"NewUserID:\" + newId);\r",
											"    //         // pm.variables.set(\"NewUserID\", newId);\r",
											"    //     });\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatformCalculationTypes}}/calculation-types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatformCalculationTypes}}",
										"calculation-types"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Resources",
					"item": [
						{
							"name": "Post Resources",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require(\"uuid\");\r",
											"var myUUID = uuid.v4();\r",
											"console.log(myUUID);\r",
											"pm.variables.set(\"myUUID\",myUUID)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Resources/\"+pm.variables.get(\"myUUID\"));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.test(\"To check details of Resources id: \"+pm.variables.get(\"myUUID\"), function () {\r",
											"        pm.expect(jsonData.id).to.eql(pm.variables.get(\"myUUID\"));\r",
											"        pm.expect(jsonData.resourceType).to.eql(\"Insurance Policy\");\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Status code is 200 for api/Resources/resourceId\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"      \r",
											"});\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Resources/\"+pm.variables.get(\"myUUID\")+\"/users\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    // pm.test(\"To check details of Resources id: \"+pm.variables.get(\"myUUID\"), function () {\r",
											"    //     pm.expect(jsonData.id).to.eql(pm.variables.get(\"myUUID\"));\r",
											"    //     pm.expect(jsonData.resourceType).to.eql(\"Insurance Policy\");\r",
											"    // }); \r",
											"\r",
											"    pm.test(\"Status code is 200 for api/Resources/resourceId/users\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{myUUID}}\",\r\n  \"resourceTypeId\": 1,\r\n  \"platformCode\": \"LQX\",\r\n  \"productCode\": \"INS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Resources",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update IP user permission resources_add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([204,200]);\r",
											" });\r",
											"\r",
											"var userId = pm.variables.get(\"resUserId\");\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/userpermissions/\") + userId + \"/resources/\"+pm.variables.get(\"myUUID\");\r",
											"// url = url.concat(\"/api/userpermissions/898037/resources/f4c72243-7a7a-46ac-8014-68e2294cafd9\") ;\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenPlatformUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.test(\"Status code is 200 for api/userpermissions/id/Resources/resourceId\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"//     pm.test(\"Validate the INS resource permissions updated for user \" + userId , function(){\r",
											"//         for( var i=0; i< jsonData.length; i++)\r",
											"//         {\r",
											"//             pm.expect(jsonData[i].type).to.be.eql(\"Resource\");\r",
											"//         }\r",
											"//    });\r",
											"});   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"myUUID\",pm.variables.get(\"myUUID\"));\r",
											"\r",
											"var currentCode = \"INS\";\r",
											"console.log(\"current product code---->\"+currentCode);\r",
											"\r",
											"var companies;\r",
											"console.log(\"In INS companies loop\");\r",
											"companies = pm.environment.get(\"INS_Companies\").split(',');\r",
											"console.log(\"INS comapny ids: \"+companies);\r",
											"\r",
											"//This code is used to find the total count of product specific companies in the array.\r",
											"pm.collectionVariables.set('cmp_count', companies.length -1) ;\r",
											"console.log(\"Total Company------>:\"+pm.collectionVariables.get(\"cmp_count\"));\r",
											"pm.variables.set('company', companies[1]);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/companies/\" + pm.variables.get('company')+\"/users\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"    }\r",
											"\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"resUserId\", jsonData[0].id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[124,125]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{resUserId}}/resources/{{myUUID}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{resUserId}}",
										"resources",
										"{{myUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update IP user permission resources_remove",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([204,200]);\r",
											" });\r",
											"\r",
											"var userId = pm.variables.get(\"resUserId\");\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/userpermissions/\") + userId + \"/resources/\"+pm.variables.get(\"myUUID\");\r",
											"// url = url.concat(\"/api/userpermissions/898037/resources/f4c72243-7a7a-46ac-8014-68e2294cafd9\") ;\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenPlatformUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.test(\"Status code is 200 for api/userpermissions/id/Resources/resourceId\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"//     pm.test(\"Validate the INS resource permissions updated for user \" + userId , function(){\r",
											"//         for( var i=0; i< jsonData.length; i++)\r",
											"//         {\r",
											"//             pm.expect(jsonData[i].type).to.be.eql(\"Resource\");\r",
											"//         }\r",
											"//    });\r",
											"});   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"myUUID\",pm.variables.get(\"myUUID\"));\r",
											"\r",
											"var currentCode = \"INS\";\r",
											"console.log(\"current product code---->\"+currentCode);\r",
											"\r",
											"var companies;\r",
											"console.log(\"In INS companies loop\");\r",
											"companies = pm.environment.get(\"INS_Companies\").split(',');\r",
											"console.log(\"INS comapny ids: \"+companies);\r",
											"\r",
											"//This code is used to find the total count of product specific companies in the array.\r",
											"pm.collectionVariables.set('cmp_count', companies.length -1) ;\r",
											"console.log(\"Total Company------>:\"+pm.collectionVariables.get(\"cmp_count\"));\r",
											"pm.variables.set('company', companies[1]);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/companies/\" + pm.variables.get('company')+\"/users\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"    }\r",
											"\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"resUserId\", jsonData[0].id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{resUserId}}/resources/{{myUUID}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{resUserId}}",
										"resources",
										"{{myUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update IC user permission resources_add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([204,200]);\r",
											" });\r",
											"\r",
											"var userId = pm.variables.get(\"resUserId\");\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/userpermissions/\") + userId + \"/resources/\"+pm.variables.get(\"myUUID\");\r",
											"// url = url.concat(\"/api/userpermissions/898037/resources/f4c72243-7a7a-46ac-8014-68e2294cafd9\") ;\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenPlatformUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.test(\"Status code is 200 for api/userpermissions/id/Resources/resourceId\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"//     pm.test(\"Validate the INS resource permissions updated for user \" + userId , function(){\r",
											"//         for( var i=0; i< jsonData.length; i++)\r",
											"//         {\r",
											"//             pm.expect(jsonData[i].type).to.be.eql(\"Resource\");\r",
											"//         }\r",
											"//    });\r",
											"});   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"myUUID\",pm.variables.get(\"myUUID\"));\r",
											"\r",
											"var currentCode = \"INS\";\r",
											"console.log(\"current product code---->\"+currentCode);\r",
											"\r",
											"var companies;\r",
											"console.log(\"In INS companies loop\");\r",
											"companies = pm.environment.get(\"INS_Companies\").split(',');\r",
											"console.log(\"INS comapny ids: \"+companies);\r",
											"\r",
											"//This code is used to find the total count of product specific companies in the array.\r",
											"pm.collectionVariables.set('cmp_count', companies.length -1) ;\r",
											"console.log(\"Total Company------>:\"+pm.collectionVariables.get(\"cmp_count\"));\r",
											"pm.variables.set('company', companies[0]);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/companies/\" + pm.variables.get('company')+\"/users\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"    }\r",
											"\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"resUserId\", jsonData[0].id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[126,127]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{resUserId}}/resources/{{myUUID}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{resUserId}}",
										"resources",
										"{{myUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update IC user permission resources_remove",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([204,200]);\r",
											" });\r",
											"\r",
											"var userId = pm.variables.get(\"resUserId\");\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/userpermissions/\") + userId + \"/resources/\"+pm.variables.get(\"myUUID\");\r",
											"// url = url.concat(\"/api/userpermissions/898037/resources/f4c72243-7a7a-46ac-8014-68e2294cafd9\") ;\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenPlatformUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.test(\"Status code is 200 for api/userpermissions/id/Resources/resourceId\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"//     pm.test(\"Validate the INS resource permissions updated for user \" + userId , function(){\r",
											"//         for( var i=0; i< jsonData.length; i++)\r",
											"//         {\r",
											"//             pm.expect(jsonData[i].type).to.be.eql(\"Resource\");\r",
											"//         }\r",
											"//    });\r",
											"});   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"myUUID\",pm.variables.get(\"myUUID\"));\r",
											"\r",
											"var currentCode = \"INS\";\r",
											"console.log(\"current product code---->\"+currentCode);\r",
											"\r",
											"var companies;\r",
											"console.log(\"In INS companies loop\");\r",
											"companies = pm.environment.get(\"INS_Companies\").split(',');\r",
											"console.log(\"INS comapny ids: \"+companies);\r",
											"\r",
											"//This code is used to find the total count of product specific companies in the array.\r",
											"pm.collectionVariables.set('cmp_count', companies.length -1) ;\r",
											"console.log(\"Total Company------>:\"+pm.collectionVariables.get(\"cmp_count\"));\r",
											"pm.variables.set('company', companies[0]);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/companies/\" + pm.variables.get('company')+\"/users\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"    }\r",
											"\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"resUserId\", jsonData[0].id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{resUserId}}/resources/{{myUUID}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{resUserId}}",
										"resources",
										"{{myUUID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "MessageTemplates",
					"item": [
						{
							"name": "Add message-templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (pm.response.code == 201 && responseBody !== '') {\r",
											"        var responseJSONdata = JSON.parse(responseBody);\r",
											"        pm.test(\"To check message-templates not null: \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].typeId).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].typeName).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].description).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].template).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating MessageTemplates format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'typeId','typeName','name','description','template');\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validate the new message-templates: \" , function () {\r",
											"            for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].name).to.be.eql(\"Testing NOA \"+pm.variables.get(\"randomD\"));\r",
											"            }\r",
											"            // }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomD = getRandomAlphaNumeric(4,\"ABCDE12345FGHIJKLMNOPQ90876RSTUVWXYZ\");\r",
											"pm.variables.set(\"randomD\", randomD);\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"EntlReg_NOA {{randomD}}\",\r\n    \"description\": \"Testing NOA {{randomD}}\",\r\n    \"template\": \"This is test api NOA. \\n\\nPASS!!!!! \\n\\n{{randomD}}\",\r\n    \"typeId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/MessageTemplates",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"MessageTemplates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit message-templates by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// try {\r",
											"//     if (pm.response.code == 204 && responseBody !== '') {\r",
											"\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/MessageTemplates/\"+pm.variables.get(\"msgTid\"));\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        var responseJSONdata = res.json();\r",
											"        pm.test(\"To check message-templates not null: \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].typeId).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].description).to.not.eql(null);\r",
											"                pm.expect(responseJSONdata[i].template).to.not.eql(null);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validating MessageTemplates format from response body \", function () {\r",
											"            for (i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'typeId','typeName','name','description','template');\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Validate the differnt message-templates: \", function () {\r",
											"            for (var i = 0; i < responseJSONdata.length; i++) {\r",
											"                pm.expect(responseJSONdata[i].name).to.be.eql(\"EntlReg_NOA \"+pm.variables.get(\"randomD\"));\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"// }\r",
											"// }\r",
											"// catch (e) {\r",
											"//     pm.test(\"Empty body response\", () => { throw new Error(e.message) });\r",
											"// }"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomD = getRandomAlphaNumeric(3,\"ABCDE12345FGHIJKLMNOPQ90876RSTUVWXYZ\");\r",
											"pm.variables.set(\"randomD\", randomD);\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/MessageTemplates\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].name.includes(\"EntlReg_NOA\"))\r",
											"        {\r",
											"            pm.variables.set(\"msgTid\",jsonData[i].id)\r",
											"            pm.variables.set(\"msgTname\",jsonData[i].name)\r",
											"            pm.variables.set(\"msgTdescription\",jsonData[i].description)\r",
											"            pm.variables.set(\"msgTtemplate\",jsonData[i].template)\r",
											"            pm.variables.set(\"msgTtypeId\",jsonData[i].typeId)\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"TestQA - NOA {{randomD}}\",\r\n    \"description\": \"Testing NOA {{randomD}}\",\r\n    \"template\": \"This is test NOA for edit. \\n\\nPASS!!!!! \\n\\n{{randomD}}\",\r\n    \"typeId\": 1,\r\n    \"id\": {{msgTid}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/MessageTemplates/{{msgTid}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"MessageTemplates",
										"{{msgTid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Contacts",
					"item": [
						{
							"name": "Create  Contacts-Booking Office-Distribution Seller",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.variables.set(\"contactId\",jsonData.id);\r",
											"\r",
											"pm.test(\"Validating mandatory Contacts format from response body \", function () {\r",
											"//   for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData).to.have.any.keys('id','companyId','contactTypeId','contactRoleId','bookingOfficeName', 'address1', 'city','stateRegion','postalCode','countryCode');\r",
											"//   }\r",
											"});\r",
											"\r",
											"pm.test(\"Validating Contacts details\", function () {\r",
											"    pm.expect(jsonData.bookingOfficeName).to.be.eql(\"EntlReg_BO_\"+pm.variables.get(\"contactName\"));\r",
											"    pm.expect(jsonData.contactTypeId).to.be.eql(1);\r",
											"    pm.expect(jsonData.contactRoleId).to.be.eql(1);    \r",
											" \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var  cRandom = getRandomAlphaNumeric(4,\"ABCDE012345FGHIJKLMNOPQR6789STUVWXYZ\");\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"pm.variables.set(\"contactName\", cRandom);\r",
											"\r",
											"pm.variables.set(\"cCmpId\", pm.environment.get(\"newFunderCompanySCF_Local1\"));\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Contacts/contactTypes\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].name.includes(\"Booking Office\"))\r",
											"        {\r",
											"            pm.variables.set(\"contactTypeId\", jsonData[i].id);\r",
											"            console.log(\"contactTypeId: \"+jsonData[i].id);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Contacts/contactRoles\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        for(i=0; i< jsonData.length; i++)\r",
											"        { \r",
											"            if(jsonData[i].name.includes(\"Distribution Seller\"))\r",
											"            {\r",
											"                pm.variables.set(\"contactRoleId\", jsonData[i].id);\r",
											"                console.log(\"contactRoleId: \"+jsonData[i].id);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"companyId\": {{cCmpId}},\r\n    \"contactTypeId\": {{contactTypeId}},\r\n    \"contactRoleId\": {{contactRoleId}},\r\n    \"name\": \"EntlReg_{{contactName}}\",\r\n    \"emailAddress\": \"EntlReg_BO_{{contactName}}.qa@gmail.com\",\r\n    \"phone\": \"98765432456\",\r\n    \"address1\": \"West Avenue\",\r\n    \"address2\": \"Link Road\",\r\n    \"city\": \"NY\",\r\n    \"stateRegion\": \"NY\",\r\n    \"postalCode\": \"PC123\",\r\n    \"countryCode\": \"US\",\r\n    \"isDefault\": true,\r\n    \"bookingOfficeName\": \"EntlReg_BO_{{contactName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Contacts",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Contacts by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Validating mandatory Contacts format from response body \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.any.keys('id','companyId','contactTypeId','contactRoleId','bookingOfficeName', 'address1', 'city','stateRegion','postalCode','countryCode');\r",
											"  }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"contactId\",pm.variables.get(\"contactId\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Contacts/{{contactId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Contacts",
										"{{contactId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Contacts-Booking Office-Distribution Seller",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"contactId\",pm.variables.get(\"contactId\"));\r",
											"// pm.variables.set(\"contactId\",5173);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Contacts/\"+pm.variables.get(\"contactId\"));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"nameC\",jsonData.bookingOfficeName)\r",
											"    pm.variables.set(\"emailAddressC\",jsonData.emailAddress)\r",
											"    pm.variables.set(\"phoneC\",jsonData.phone)\r",
											"    pm.variables.set(\"address1C\",jsonData.address1)\r",
											"    pm.variables.set(\"address2C\",jsonData.address2)\r",
											"    pm.variables.set(\"cityC\",jsonData.city)\r",
											"    pm.variables.set(\"stateRegionS\",jsonData.stateRegion)\r",
											"    pm.variables.set(\"countryCodeC\",jsonData.countryCode)\r",
											"    pm.variables.set(\"postalCodeC\",jsonData.postalCode)\r",
											"    pm.variables.set(\"bookingOfficeNameC\",jsonData.bookingOfficeName )\r",
											"    pm.variables.set(\"contactId\",jsonData.id)\r",
											"    pm.variables.set(\"companyIdCt\",jsonData.companyId)\r",
											"\r",
											"});     "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{nameC}}_update\",\r\n    \"emailAddress\": \"{{emailAddressC}}\",\r\n    \"phone\": {{phoneC}},\r\n    \"address1\":  \"{{address1C}}\",\r\n    \"address2\":  \"{{address2C}}\",\r\n    \"city\": \"{{cityC}}\",\r\n    \"contactTypeId\": 1,\r\n    \"contactRoleId\": 1,\r\n    \"countryCode\":  \"{{countryCodeC}}\",\r\n    \"postalCode\": \"{{postalCodeC}}\",\r\n    \"stateRegion\": \"{{stateRegionS}}\",\r\n    \"companyId\": {{companyIdCt}},\r\n    \"isDefault\": false,\r\n    \"bookingOfficeName\": \"{{bookingOfficeNameC}}\",\r\n    \"id\": {{contactId}},\r\n    \"contactTypeName\": \"Booking Office\",\r\n    \"contactRoleName\": \"Distribution Seller\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/contacts/{{contactId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"contacts",
										"{{contactId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create  Contacts-Booking Office-Distribution Funder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.variables.set(\"contactsBO\",jsonData.id);\r",
											"\r",
											"pm.test(\"Validating Contacts format from response body \", function () {\r",
											"//   for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData).to.have.any.keys('id','companyId','contactTypeId','contactRoleId','bookingOfficeName', 'address1', 'city','stateRegion','postalCode','countryCode');\r",
											"//   }\r",
											"});\r",
											"\r",
											"pm.test(\"Validating Contacts details\", function () {\r",
											"    pm.expect(jsonData.bookingOfficeName).to.be.eql(\"EntlReg_BO_\"+pm.variables.get(\"contactName\"));\r",
											"    pm.expect(jsonData.contactTypeId).to.be.eql(1);\r",
											"    pm.expect(jsonData.contactRoleId).to.be.eql(2);    \r",
											" \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var  cRandom = getRandomAlphaNumeric(4,\"ABCDE012345FGHIJKLMNOPQR6789STUVWXYZ\");\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"pm.variables.set(\"contactName\", cRandom);\r",
											"\r",
											"pm.variables.set(\"cCmpId\", pm.environment.get(\"newFunderCompanySCF_Local1\"));\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Contacts/contactTypes\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].name.includes(\"Booking Office\"))\r",
											"        {\r",
											"            pm.variables.set(\"contactTypeId\", jsonData[i].id);\r",
											"            console.log(\"contactTypeId: \"+jsonData[i].id);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Contacts/contactRoles\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        for(i=0; i< jsonData.length; i++)\r",
											"        { \r",
											"            if(jsonData[i].name.includes(\"Distribution Funder\"))\r",
											"            {\r",
											"                pm.variables.set(\"contactRoleId\", jsonData[i].id);\r",
											"                console.log(\"contactRoleId: \"+jsonData[i].id);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"companyId\": {{cCmpId}},\r\n    \"contactTypeId\": {{contactTypeId}},\r\n    \"contactRoleId\": {{contactRoleId}},\r\n    \"name\": \"EntlReg_{{contactName}}\",\r\n    \"emailAddress\": \"EntlReg_BO_{{contactName}}.qa@gmail.com\",\r\n    \"phone\": \"98765432456\",\r\n    \"address1\": \"West Avenue\",\r\n    \"address2\": \"Link Road\",\r\n    \"city\": \"NY\",\r\n    \"stateRegion\": \"NY\",\r\n    \"postalCode\": \"PC123\",\r\n    \"countryCode\": \"US\",\r\n    \"isDefault\": true,\r\n    \"bookingOfficeName\": \"EntlReg_BO_{{contactName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Contacts",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create  Contacts-Notice Contact-Distribution Funder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.variables.set(\"contactsBO\",jsonData.id);\r",
											"\r",
											"pm.test(\"Validating Contacts format from response body \", function () {\r",
											"//   for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData).to.have.any.keys('id','companyId','contactTypeId','contactRoleId','name','emailAddress','phone', 'address1', 'city','stateRegion','postalCode','countryCode','swiftCode');\r",
											"//   }\r",
											"});\r",
											"\r",
											"pm.test(\"Validating Contacts details\", function () {\r",
											"    pm.expect(jsonData.name).to.be.eql(\"EntlReg_\"+pm.variables.get(\"contactName\"));\r",
											"    pm.expect(jsonData.contactTypeId).to.be.eql(2);\r",
											"    pm.expect(jsonData.contactRoleId).to.be.eql(2);    \r",
											" \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var  cRandom = getRandomAlphaNumeric(4,\"ABCDE012345FGHIJKLMNOPQR6789STUVWXYZ\");\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"pm.variables.set(\"contactName\", cRandom);\r",
											"\r",
											"pm.variables.set(\"cCmpId\", pm.environment.get(\"newFunderCompanySCF_Local1\"));\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Contacts/contactTypes\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].name.includes(\"Notice Contact\"))\r",
											"        {\r",
											"            pm.variables.set(\"contactTypeId\", jsonData[i].id);\r",
											"            console.log(\"contactTypeId: \"+jsonData[i].id);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Contacts/contactRoles\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        for(i=0; i< jsonData.length; i++)\r",
											"        { \r",
											"            if(jsonData[i].name.includes(\"Distribution Funder\"))\r",
											"            {\r",
											"                pm.variables.set(\"contactRoleId\", jsonData[i].id);\r",
											"                console.log(\"contactRoleId: \"+jsonData[i].id);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"companyId\": {{cCmpId}},\r\n    \"contactTypeId\": {{contactTypeId}},\r\n    \"contactRoleId\": {{contactRoleId}},\r\n    \"name\": \"EntlReg_{{contactName}}\",\r\n    \"emailAddress\": \"EntlReg_NC_{{contactName}}.qa@gmail.com\",\r\n    \"phone\": \"98765432456\",\r\n    \"address1\": \"West Avenue\",\r\n    \"address2\": \"Link Road\",\r\n    \"city\": \"NY\",\r\n    \"stateRegion\": \"NY\",\r\n    \"postalCode\": \"PC123\",\r\n    \"countryCode\": \"US\",\r\n    \"isDefault\": true,\r\n    \"swiftCode\": \"QWERTY12\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Contacts",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create  Contacts-Notice Contact-Distribution Seller",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.variables.set(\"contactsBO\",jsonData.id);\r",
											"\r",
											"pm.test(\"Validating Contacts format from response body \", function () {\r",
											"//   for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData).to.have.any.keys('id','companyId','contactTypeId','contactRoleId','name','emailAddress','phone', 'address1', 'city','stateRegion','postalCode','countryCode','swiftCode');\r",
											"//   }\r",
											"});\r",
											"\r",
											"pm.test(\"Validating Contacts details\", function () {\r",
											"    pm.expect(jsonData.name).to.be.eql(\"EntlReg_\"+pm.variables.get(\"contactName\"));\r",
											"    pm.expect(jsonData.contactTypeId).to.be.eql(2);\r",
											"    pm.expect(jsonData.contactRoleId).to.be.eql(1);    \r",
											" \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var  cRandom = getRandomAlphaNumeric(4,\"ABCDE012345FGHIJKLMNOPQR6789STUVWXYZ\");\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"pm.variables.set(\"contactName\", cRandom);\r",
											"\r",
											"pm.variables.set(\"cCmpId\", pm.environment.get(\"newFunderCompanySCF_Local1\"));\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Contacts/contactTypes\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].name.includes(\"Notice Contact\"))\r",
											"        {\r",
											"            pm.variables.set(\"contactTypeId\", jsonData[i].id);\r",
											"            console.log(\"contactTypeId: \"+jsonData[i].id);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Contacts/contactRoles\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        for(i=0; i< jsonData.length; i++)\r",
											"        { \r",
											"            if(jsonData[i].name.includes(\"Distribution Seller\"))\r",
											"            {\r",
											"                pm.variables.set(\"contactRoleId\", jsonData[i].id);\r",
											"                console.log(\"contactRoleId: \"+jsonData[i].id);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"companyId\": {{cCmpId}},\r\n    \"contactTypeId\": {{contactTypeId}},\r\n    \"contactRoleId\": {{contactRoleId}},\r\n    \"name\": \"EntlReg_{{contactName}}\",\r\n    \"emailAddress\": \"EntlReg_NC_{{contactName}}.qa@gmail.com\",\r\n    \"phone\": \"98765432456\",\r\n    \"address1\": \"West Avenue\",\r\n    \"address2\": \"Link Road\",\r\n    \"city\": \"NY\",\r\n    \"stateRegion\": \"NY\",\r\n    \"postalCode\": \"PC123\",\r\n    \"countryCode\": \"US\",\r\n    \"isDefault\": true,\r\n    \"swiftCode\": \"QWERTY12\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Contacts",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create  Contacts-Process Agent-Distribution Seller",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.variables.set(\"contactsBO\",jsonData.id);\r",
											"\r",
											"pm.test(\"Validating Contacts format from response body \", function () {\r",
											"//   for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData).to.have.any.keys('id','companyId','contactTypeId','contactRoleId','name','emailAddress', 'address1', 'city','stateRegion','postalCode','countryCode');\r",
											"//   }\r",
											"});\r",
											"\r",
											"pm.test(\"Validating Contacts details\", function () {\r",
											"    pm.expect(jsonData.name).to.be.eql(\"EntlReg_\"+pm.variables.get(\"contactName\"));\r",
											"    pm.expect(jsonData.contactTypeId).to.be.eql(3);\r",
											"    pm.expect(jsonData.contactRoleId).to.be.eql(1);    \r",
											" \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var  cRandom = getRandomAlphaNumeric(4,\"ABCDE012345FGHIJKLMNOPQR6789STUVWXYZ\");\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"pm.variables.set(\"contactName\", cRandom);\r",
											"\r",
											"pm.variables.set(\"cCmpId\", pm.environment.get(\"newFunderCompanySCF_Local1\"));\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Contacts/contactTypes\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].name.includes(\"Process Agent\"))\r",
											"        {\r",
											"            pm.variables.set(\"contactTypeId\", jsonData[i].id);\r",
											"            console.log(\"contactTypeId: \"+jsonData[i].id);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Contacts/contactRoles\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        for(i=0; i< jsonData.length; i++)\r",
											"        { \r",
											"            if(jsonData[i].name.includes(\"Distribution Seller\"))\r",
											"            {\r",
											"                pm.variables.set(\"contactRoleId\", jsonData[i].id);\r",
											"                console.log(\"contactRoleId: \"+jsonData[i].id);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"companyId\": {{cCmpId}},\r\n    \"contactTypeId\": {{contactTypeId}},\r\n    \"contactRoleId\": {{contactRoleId}},\r\n    \"name\": \"EntlReg_{{contactName}}\",\r\n    \"emailAddress\": \"EntlReg_PA_{{contactName}}.qa@gmail.com\",\r\n    \"phone\": \"98765432456\",\r\n    \"address1\": \"West Avenue\",\r\n    \"address2\": \"Link Road\",\r\n    \"city\": \"NY\",\r\n    \"stateRegion\": \"NY\",\r\n    \"postalCode\": \"PC123\",\r\n    \"countryCode\": \"US\",\r\n    \"isDefault\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Contacts",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create  Contacts-Process Agent-Distribution Funder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.variables.set(\"contactsBO\",jsonData.id);\r",
											"\r",
											"pm.test(\"Validating Contacts format from response body \", function () {\r",
											"//   for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData).to.have.any.keys('id','companyId','contactTypeId','contactRoleId','name','emailAddress', 'address1', 'city','stateRegion','postalCode','countryCode');\r",
											"//   }\r",
											"});\r",
											"\r",
											"pm.test(\"Validating Contacts details\", function () {\r",
											"    pm.expect(jsonData.name).to.be.eql(\"EntlReg_\"+pm.variables.get(\"contactName\"));\r",
											"    pm.expect(jsonData.contactTypeId).to.be.eql(3);\r",
											"    pm.expect(jsonData.contactRoleId).to.be.eql(2);    \r",
											" \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var  cRandom = getRandomAlphaNumeric(4,\"ABCDE012345FGHIJKLMNOPQR6789STUVWXYZ\");\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"pm.variables.set(\"contactName\", cRandom);\r",
											"\r",
											"pm.variables.set(\"cCmpId\", pm.environment.get(\"newFunderCompanySCF_Local1\"));\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Contacts/contactTypes\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].name.includes(\"Process Agent\"))\r",
											"        {\r",
											"            pm.variables.set(\"contactTypeId\", jsonData[i].id);\r",
											"            console.log(\"contactTypeId: \"+jsonData[i].id);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Contacts/contactRoles\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        for(i=0; i< jsonData.length; i++)\r",
											"        { \r",
											"            if(jsonData[i].name.includes(\"Distribution Funder\"))\r",
											"            {\r",
											"                pm.variables.set(\"contactRoleId\", jsonData[i].id);\r",
											"                console.log(\"contactRoleId: \"+jsonData[i].id);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"companyId\": {{cCmpId}},\r\n    \"contactTypeId\": {{contactTypeId}},\r\n    \"contactRoleId\": {{contactRoleId}},\r\n    \"name\": \"EntlReg_{{contactName}}\",\r\n    \"emailAddress\": \"EntlReg_PA_{{contactName}}.qa@gmail.com\",\r\n    \"phone\": \"98765432456\",\r\n    \"address1\": \"West Avenue\",\r\n    \"address2\": \"Link Road\",\r\n    \"city\": \"NY\",\r\n    \"stateRegion\": \"NY\",\r\n    \"postalCode\": \"PC123\",\r\n    \"countryCode\": \"US\",\r\n    \"isDefault\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Contacts",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Contacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Validating mandatory Contacts format from response body \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.any.keys('id','companyId','contactTypeId','contactRoleId','bookingOfficeName', 'address1', 'city','stateRegion','postalCode','countryCode');\r",
											"  }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Contacts?companyId={{newFunderCompanySCF_Local1}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Contacts"
									],
									"query": [
										{
											"key": "companyId",
											"value": "{{newFunderCompanySCF_Local1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create  Contacts-CompanyBased-ENT-1540",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.variables.set(\"contactId\",jsonData.id);\r",
											"\r",
											"pm.test(\"Validating mandatory Contacts format from response body \", function () {\r",
											"//   for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData).to.have.any.keys('id','companyId','contactTypeId','contactRoleId','bookingOfficeName', 'address1', 'city','stateRegion','postalCode','countryCode');\r",
											"//   }\r",
											"});\r",
											"\r",
											"pm.test(\"Validating Contacts details\", function () {\r",
											"    pm.expect(jsonData.bookingOfficeName).to.be.eql(\"EntlReg_BO_\"+pm.variables.get(\"contactName\"));\r",
											"    pm.expect(jsonData.contactTypeId).to.be.eql(1);\r",
											"    pm.expect(jsonData.contactRoleId).to.be.eql(1);    \r",
											" \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var  cRandom = getRandomAlphaNumeric(4,\"ABCDE012345FGHIJKLMNOPQR6789STUVWXYZ\");\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"pm.variables.set(\"contactName\", cRandom);\r",
											"\r",
											"pm.variables.set(\"cCmpId\", pm.environment.get(\"newSupplierCompany_Local\"));\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Contacts/contactTypes\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].name.includes(\"Booking Office\"))\r",
											"        {\r",
											"            pm.variables.set(\"contactTypeId\", jsonData[i].id);\r",
											"            console.log(\"contactTypeId: \"+jsonData[i].id);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Contacts/contactRoles\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        for(i=0; i< jsonData.length; i++)\r",
											"        { \r",
											"            if(jsonData[i].name.includes(\"Distribution Seller\"))\r",
											"            {\r",
											"                pm.variables.set(\"contactRoleId\", jsonData[i].id);\r",
											"                console.log(\"contactRoleId: \"+jsonData[i].id);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"companyId\": {{cCmpId}},\r\n    \"contactTypeId\": {{contactTypeId}},\r\n    \"contactRoleId\": {{contactRoleId}},\r\n    \"name\": \"EntlReg_{{contactName}}\",\r\n    // \"emailAddress\": \"EntlReg_BO_{{contactName}}.qa@gmail.com\",\r\n    \"phone\": \"98765432456\",\r\n    \"address1\": \"West Avenue\",\r\n    \"address2\": \"Link Road\",\r\n    \"city\": \"NY\",\r\n    \"stateRegion\": \"NY\",\r\n    \"postalCode\": \"PC123\",\r\n    \"countryCode\": \"US\",\r\n    \"isDefault\": true,\r\n    \"bookingOfficeName\": \"EntlReg_BO_{{contactName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Contacts",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Contacts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Participants",
					"item": [
						{
							"name": "Create Participants/{id} aliases",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var code = pm.variables.get(\"productCodeC\");\r",
											"var jsonData = pm.response.json();\r",
											"pm.variables.set(\"aliasesId\", jsonData.id);\r",
											"\r",
											"pm.test(\"To check details for participant aliases \" + code , function () {\r",
											"    pm.expect(jsonData.name).to.eql(\"EntlReg_Aliase_\"+pm.variables.get(\"aliasesName\"));\r",
											"    pm.expect(jsonData.participantId).to.eql(pm.variables.get(\"participantIdC\"));\r",
											"}); \r",
											"\r",
											"pm.test(\"Validating participant aliases format from response body \", function () {\r",
											"    pm.expect(jsonData).to.have.all.keys('id', 'name', 'isDisabled', 'participantId');\r",
											"});\r",
											"\r",
											"// var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"// pm.sendRequest({\r",
											"// url: url1,\r",
											"// method: 'POST',\r",
											"// header: {\r",
											"//     'Content-Type': 'application/json',\r",
											"//      'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"//     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"// },\r",
											"// body: {\r",
											"//     mode: 'raw',\r",
											"//     raw: {\r",
											"                                            \r",
											"//         }\r",
											"//     }\r",
											"// }, function (err, res) {\r",
											"//     if (err) { console.log(url + err); }\r",
											"//     var jsonData1 = res.json();\r",
											"    \r",
											"//     pm.test(\"To check Publications has response 200\", function () {\r",
											"//         pm.expect(res.code).to.eql(200);      \r",
											"//     });\r",
											"    // for(i = 0; i<jsonData1.length; i++)\r",
											"    // {\r",
											"    //     if(jsonData1[i].participantType == 'ParticipantAlias')\r",
											"    //     {\r",
											"    //         pm.test(\"To check success Sync of Alias productName and State \", function () {\r",
											"    //             pm.expect(jsonData1[i].product).to.be.oneOf([\"SCF\",\"Settlement\",\"PARM\"]);\r",
											"    //             pm.expect(jsonData1[i].state).to.eql(\"Success\");\r",
											"    //         });\r",
											"    //     }\r",
											"    // }\r",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"    var  cRandom = getRandomAlphaNumeric(4,\"ABC56789DEFGHIJKLMNOPQ01234RSTUVWXYZ\");\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"aliasesName\", cRandom);\r",
											"\r",
											"// var url = pm.variables.get(\"baseURI\");\r",
											"// url = url.concat(\"/api/companies?count=10000&format=company-only&productCode=SCF\");\r",
											"\r",
											"// pm.sendRequest({\r",
											"//     url: url,\r",
											"//     method: 'GET',\r",
											"//     header: {\r",
											"//         'Accept': 'application/json',\r",
											"//         'Content-Type': 'application/json',\r",
											"//         'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"//         'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"//       }\r",
											"// }, function (err, res) {\r",
											"//     var jsonData = res.json();\r",
											"//     for(i=0; i<jsonData.length; i++)\r",
											"//     {\r",
											"//         if(jsonData[i].companyId  == pm.environment.get(\"newSupplierCompanySCF_Local\"))\r",
											"//             pm.variables.set(\"companyName\", jsonData[i].name);\r",
											"//     } \r",
											"//     console.log(\"company name --> \"+pm.variables.get(\"companyName\"));\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/companies/\"+pm.environment.get(\"newSupplierCompanySCF_Local\")+\"/entitlements\"); //roles\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        for(i=0; i<jsonData.length; i++)\r",
											"        {\r",
											"            if(jsonData[i].isActive  == true)\r",
											"            {\r",
											"                pm.variables.set(\"productCodeC\", jsonData[i].productCode);\r",
											"                pm.variables.set(\"participantIdC\", jsonData[i].participantId);\r",
											"            }\r",
											"        } \r",
											"        console.log(\"productCodeC --> \"+pm.variables.get(\"productCodeC\"));\r",
											"        console.log(\"participantIdC --> \"+pm.variables.get(\"participantIdC\"));\r",
											"\r",
											"    });\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"EntlReg_Aliase_{{aliasesName}}\",\r\n    \"participantId\": {{participantIdC}},\r\n    \"isDisabled\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/participants/{{participantIdC}}/aliases?platformCode={{platformCode}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"participants",
										"{{participantIdC}}",
										"aliases"
									],
									"query": [
										{
											"key": "platformCode",
											"value": "{{platformCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Participants/{id} aliases",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"participantIdC\", pm.variables.get(\"participantIdC\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var code = pm.variables.get(\"productCodeC\");\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.variables.set(\"aliasesId\", jsonData[0].id);\r",
											"console.log(\"aliasesId-- \"+pm.variables.get(\"aliasesId\"));\r",
											"pm.variables.set(\"aliasesName\", jsonData[0].name);\r",
											"console.log(\"aliasesName-- \"+pm.variables.get(\"aliasesName\"));\r",
											"\r",
											"pm.test(\"Validating participant aliases format from response body \", function (){\r",
											"   for(var i = 0; i<jsonData.length; i++)\r",
											"   {\r",
											"        pm.expect(jsonData[i]).to.have.all.keys('id', 'name', 'isDisabled', 'participantId');\r",
											"   }\r",
											"});\r",
											"\r",
											"// pm.test(\"To check details for participant aliases \" + code , function () {\r",
											"//    for(var i = 0; i<jsonData.length; i++)\r",
											"//    {\r",
											"//         pm.expect(jsonData[i].name).to.eql(\"Aliase_\"+pm.variables.get(\"aliasesName\"));\r",
											"//         pm.expect(jsonData[i].participantId).to.eql(pm.variables.get(\"participantIdC\"));\r",
											"//    }\r",
											"// }); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Participants/{{participantIdC}}/aliases",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Participants",
										"{{participantIdC}}",
										"aliases"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Participants/{id}/aliases{id} isDisabled= false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"aliasesId\", pm.variables.get(\"aliasesId\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"// var code = pm.variables.get(\"productCodeC\");\r",
											"// var jsonData = pm.response.json();\r",
											"// pm.variables.set(\"aliasesId\", jsonData[0].id);\r",
											"// console.log(\"aliasesId-- \"+pm.variables.set(\"aliasesId\"));\r",
											"// // pm.test(\"To check details for participant aliases \" + code , function () {\r",
											"// //    for(var i = 0; i<jsonData.length; i++)\r",
											"// //    {\r",
											"// //         pm.expect(jsonData[i].name).to.eql(\"Aliase_\"+pm.variables.get(\"aliasesName\"));\r",
											"// //         pm.expect(jsonData[i].participantId).to.eql(pm.variables.get(\"participantIdC\"));\r",
											"// //    }\r",
											"// // }); \r",
											"// pm.test(\"Validating participant aliases format from response body \", function (){\r",
											"//    for(var i = 0; i<jsonData.length; i++)\r",
											"//    {\r",
											"//         pm.expect(jsonData[i]).to.have.all.keys('id', 'name', 'isDisabled', 'participantId');\r",
											"//    }\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isDisabled\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Participants/{{participantIdC}}/aliases/{{aliasesId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Participants",
										"{{participantIdC}}",
										"aliases",
										"{{aliasesId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Participants/{id}/aliases{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 501\", function () {\r",
											"    pm.response.to.have.status(501);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"aliasesId\", pm.variables.get(\"aliasesId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isDisabled\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Participants/{{participantIdC}}/aliases/{{aliasesId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Participants",
										"{{participantIdC}}",
										"aliases",
										"{{aliasesId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Participants/{id}/aliases{id}  isDisabled= true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"aliasesId\", pm.variables.get(\"aliasesId\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"// var code = pm.variables.get(\"productCodeC\");\r",
											"// var jsonData = pm.response.json();\r",
											"// pm.variables.set(\"aliasesId\", jsonData[0].id);\r",
											"// console.log(\"aliasesId-- \"+pm.variables.set(\"aliasesId\"));\r",
											"// // pm.test(\"To check details for participant aliases \" + code , function () {\r",
											"// //    for(var i = 0; i<jsonData.length; i++)\r",
											"// //    {\r",
											"// //         pm.expect(jsonData[i].name).to.eql(\"Aliase_\"+pm.variables.get(\"aliasesName\"));\r",
											"// //         pm.expect(jsonData[i].participantId).to.eql(pm.variables.get(\"participantIdC\"));\r",
											"// //    }\r",
											"// // }); \r",
											"// pm.test(\"Validating participant aliases format from response body \", function (){\r",
											"//    for(var i = 0; i<jsonData.length; i++)\r",
											"//    {\r",
											"//         pm.expect(jsonData[i]).to.have.all.keys('id', 'name', 'isDisabled', 'participantId');\r",
											"//    }\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isDisabled\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Participants/{{participantIdC}}/aliases/{{aliasesId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Participants",
										"{{participantIdC}}",
										"aliases",
										"{{aliasesId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Connection",
					"item": [
						{
							"name": "Create Connection - Active - Bidirectional",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var ConnectionId = jsonData.id;\r",
											"pm.variables.set(\"ConnectionId\",ConnectionId);\r",
											"console.log(\"Connection - Active - Bidirectional - ID: \"+ConnectionId)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"connectionStatusId\": 2,\r\n    \"connectionTypeId\": 2,\r\n    \"calendars\": [\r\n        10\r\n    ],\r\n    \"programTypes\": [\r\n        2\r\n    ],\r\n    \"notRestrictedByCurrency\": false,\r\n    \"currencies\": [\r\n        \"USD\"\r\n    ],\r\n    \"additionalTerms\": null,\r\n    \"sanctionsAuthority\": null,\r\n    \"company1Id\": {{newFunderCompanySCF_Local1}},\r\n    \"company2Id\": {{newFunderCompanySCF_Local2}},\r\n    \"creationDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Connections",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Connections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Connections/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating Connections id \"+jsonData.id, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i].connectionStatusId).to.be.eql(2);\r",
											"  }\r",
											"});\r",
											"pm.test(\"Validating Connections format from response body  \"+jsonData.id, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"        pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'company1Id','company1Name','company2Id','company2Name','connectionStatusId','connectionStatusName','connectionTypeId','connectionTypeName','creationDate','notRestrictedByCurrency','calendars','currencies','programTypes');\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"myConnectionId\",pm.variables.get(\"ConnectionId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Connections/{{myConnectionId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Connections",
										"{{myConnectionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Connections?participantId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating available Connections : \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i].company1Id).to.be.eql(pm.environment.get(\"newFunderCompanySCF_Local1\"));\r",
											"  }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"myConnectionId\",pm.variables.get(\"ConnectionId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Connections?participantId={{newFunderCompanySCF_Local1}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Connections"
									],
									"query": [
										{
											"key": "participantId",
											"value": "{{newFunderCompanySCF_Local1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Connection - Draft - Unidirectional",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var ConnectionId = jsonData.id;\r",
											"pm.variables.set(\"ConnectionId\",ConnectionId);\r",
											"console.log(\"Connection - Draft - Unidirectional- ID: \"+ConnectionId)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"connectionStatusId\": 1,\r\n    \"connectionTypeId\": 1,\r\n    \"calendars\": [],\r\n    \"programTypes\": [\r\n        3,\r\n        1\r\n    ],\r\n    \"notRestrictedByCurrency\": true,\r\n    \"currencies\": [],\r\n    \"additionalTerms\": null,\r\n    \"sanctionsAuthority\": null,\r\n    \"company1Id\": {{newFunderCompanySCF_Local1}},\r\n    \"company2Id\": {{newFunderCompanySCF_Local2}},\r\n    \"creationDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Connections",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Connections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Connection - DraftToActive - Unidirectional",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"pm.variables.set(\"myConnectionId\",pm.variables.get(\"ConnectionId\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"connectionStatusId\": 2,\r\n    \"connectionTypeId\": 1,\r\n    \"calendars\": [23],\r\n    \"programTypes\": [\r\n        3,\r\n        1\r\n    ],\r\n    \"notRestrictedByCurrency\": true,\r\n    \"currencies\": [],\r\n    \"additionalTerms\": null,\r\n    \"sanctionsAuthority\": null,\r\n    \"company1Id\": {{newFunderCompanySCF_Local1}},\r\n    \"company2Id\": {{newFunderCompanySCF_Local2}},\r\n    \"creationDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Connections/{{myConnectionId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Connections",
										"{{myConnectionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Connection - ActiveToDisable - Unidirectional",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"pm.variables.set(\"myConnectionId\",pm.variables.get(\"ConnectionId\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"connectionStatusId\": 3,\r\n    \"connectionTypeId\": 1,\r\n    \"calendars\": [23],\r\n    \"programTypes\": [\r\n        3,\r\n        1\r\n    ],\r\n    \"notRestrictedByCurrency\": true,\r\n    \"currencies\": [],\r\n    \"additionalTerms\": null,\r\n    \"sanctionsAuthority\": null,\r\n    \"company1Id\": {{newFunderCompanySCF_Local1}},\r\n    \"company2Id\": {{newFunderCompanySCF_Local2}},\r\n    \"creationDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Connections/{{myConnectionId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Connections",
										"{{myConnectionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Connection - DisableToEnable - Unidirectional",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"pm.variables.set(\"myConnectionId\",pm.variables.get(\"ConnectionId\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"connectionStatusId\": 2,\r\n    \"connectionTypeId\": 1,\r\n    \"calendars\": [23],\r\n    \"programTypes\": [\r\n        3,\r\n        1\r\n    ],\r\n    \"notRestrictedByCurrency\": true,\r\n    \"currencies\": [],\r\n    \"additionalTerms\": null,\r\n    \"sanctionsAuthority\": null,\r\n    \"company1Id\": {{newFunderCompanySCF_Local1}},\r\n    \"company2Id\": {{newFunderCompanySCF_Local2}},\r\n    \"creationDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Connections/{{myConnectionId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Connections",
										"{{myConnectionId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "PUT",
			"item": [
				{
					"name": "Companies",
					"item": [
						{
							"name": "Deactivate_Companies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var cid = pm.environment.get(\"Company_Id_G\");",
											"",
											"// var url = pm.variables.get(\"baseURI\");",
											"// url = url.concat(\"/api/companies/\"+cid);",
											"",
											"// pm.sendRequest({",
											"//     url: url,",
											"//     method: 'GET',",
											"//     header: {",
											"//         'Accept': 'application/json',",
											"//         'Content-Type': 'application/json',",
											"//         'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
											"//       }",
											"      ",
											"// }, function (err, res) {",
											"//     var jsonData = res.json();",
											"//     pm.variables.set(\"CompanyId\", jsonData.id);",
											"//     pm.variables.set(\"salesforceId\", jsonData.salesforceId);",
											"//     pm.variables.set(\"name\", jsonData.name);",
											"//     pm.variables.set(\"country\", jsonData.country);",
											"//     pm.variables.set(\"stateOfIncorporation\", jsonData.stateOfIncorporation);",
											"//     pm.variables.set(\"countryOfJurisdiction\", jsonData.countryOfJurisdiction);",
											"//     pm.variables.set(\"isActive\", jsonData.isActive);",
											"//     pm.variables.set(\"updatedOn\", jsonData.updatedOn);",
											"//     pm.variables.set(\"users\", jsonData.users);",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"To check company is inActive \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isActive).to.eql(false);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n\t\"id\": {{CompanyId}}\r\n}\t\r\n"
								},
								"url": {
									"raw": "{{baseURI}}/api/Companies/{{Company_Id_G}}/update-status?command=deactivate",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Companies",
										"{{Company_Id_G}}",
										"update-status"
									],
									"query": [
										{
											"key": "command",
											"value": "deactivate"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate_Companies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"To check company is active \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var cid = pm.environment.get(\"Company_Id_G\");",
											"",
											"// var url = pm.variables.get(\"baseURI\");",
											"// url = url.concat(\"/api/companies/\"+cid);",
											"",
											"// pm.sendRequest({",
											"//     url: url,",
											"//     method: 'GET',",
											"//     header: {",
											"//         'Accept': 'application/json',",
											"//         'Content-Type': 'application/json',",
											"//         'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
											"//       }",
											"      ",
											"// }, function (err, res) {",
											"//     var jsonData = res.json();",
											"//     pm.variables.set(\"CompanyId\", jsonData.id);",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n\t\"id\": {{CompanyId}}\r\n}\t\r\n\r\n"
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/{{Company_Id_G}}/update-status?command=activate",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{Company_Id_G}}",
										"update-status"
									],
									"query": [
										{
											"key": "command",
											"value": "activate"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Company Roles_deactivate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\" + pm.environment.get(\"Company_Id_G\") + \"/entitlements\");",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"        }",
											"    },",
											"    function (err, res) {",
											"    if (err) { console.log(\"error :\" + err); };",
											"",
											"    var responseJSONdata = res.json();",
											"    for (var i = 0; i < responseJSONdata.length; i++) {",
											"        if(responseJSONdata[i].roleId == pm.variables.get(\"roleId\"))",
											"        {",
											"            pm.test(\"To check /companies/{id} returns company details\", function () {",
											"                pm.expect(responseJSONdata[i].companyId).to.eql(parseInt(pm.environment.get(\"Company_Id_G\")));",
											"      ",
											"            }); ",
											"            pm.test(\"To check Company Roles_activate\", function () {",
											"                pm.expect(responseJSONdata[i].isActive).to.eql(false);",
											"  ",
											"            }); ",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\" + pm.environment.get(\"Company_Id_G\") + \"/entitlements\");",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"        }",
											"    },",
											"    function (err, res) {",
											"    if (err) { console.log(\"error :\" + err); };",
											"",
											"    var responseJSONdata = res.json();",
											"    pm.variables.set(\"participantId\",responseJSONdata[0].participantId);",
											"    pm.variables.set(\"roleName\", responseJSONdata[0].roleName);",
											"    pm.variables.set(\"roldeId\", responseJSONdata[0].roleId);",
											"    pm.variables.set(\"isActive\", false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"participantId\":{{participantId}},\n\t\t\"isActive\": {{isActive}},\n\t\t\"companyId\":{{Company_Id_G}},\n\t\t\"productCode\":\"{{productCode}}\",\n\t\t\"roleId\":{{roldeId}},\n\t\t\"roleName\":\"{{roleName}}\"\n\t}\n]"
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/{{Company_Id_G}}/roles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{Company_Id_G}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Company Roles_activate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\" + pm.environment.get(\"Company_Id_G\") + \"/entitlements\");",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"        }",
											"    },",
											"    function (err, res) {",
											"    if (err) { console.log(\"error :\" + err); };",
											"",
											"    var responseJSONdata = res.json();",
											"    for (var i = 0; i < responseJSONdata.length; i++) {",
											"        if(responseJSONdata[i].roleId == pm.variables.get(\"roleId\"))",
											"        {",
											"            pm.test(\"To check /companies/{id} returns company details\", function () {",
											"                pm.expect(responseJSONdata[i].companyId).to.eql(parseInt(pm.environment.get(\"Company_Id_G\")));",
											"      ",
											"            }); ",
											"            pm.test(\"To check Company Roles_activate\", function () {",
											"                pm.expect(responseJSONdata[i].isActive).to.eql(true);",
											"  ",
											"            }); ",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\" + pm.environment.get(\"Company_Id_G\") + \"/entitlements\");",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"        }",
											"    },",
											"    function (err, res) {",
											"    if (err) { console.log(\"error :\" + err); };",
											"",
											"    var responseJSONdata = res.json();",
											"    pm.variables.set(\"participantId\",responseJSONdata[0].participantId);",
											"    pm.variables.set(\"roleName\", responseJSONdata[0].roleName);",
											"    pm.variables.set(\"roldeId\", responseJSONdata[0].roleId);",
											"    pm.variables.set(\"isActive\", true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"participantId\":{{participantId}},\n\t\t\"isActive\": {{isActive}},\n\t\t\"companyId\":{{Company_Id_G}},\n\t\t\"productCode\":\"{{productCode}}\",\n\t\t\"roleId\":{{roldeId}},\n\t\t\"roleName\":\"{{roleName}}\"\n\t}\n]"
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/{{Company_Id_G}}/roles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{Company_Id_G}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Company/platforms/id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var  cRandom = getRandomAlphaNumeric(3,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"pm.variables.set(\"entityName\", cRandom);\r",
											"console.log(\"--->\"+cRandom);\r",
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/companies?format=list&count=20000&\");\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for (i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].name.includes(\"EntlReg\")) {\r",
											"            var compId = jsonData[i].companyId;\r",
											"            var compName = jsonData[i].name;\r",
											"            var compcountryCode = jsonData[i].countryCode;\r",
											"            console.log(\"company id: \" + compId);\r",
											"            console.log(\"company Name: \" + compName);\r",
											"            console.log(\"company countryCode: \" + compcountryCode);\r",
											"            pm.variables.set(\"legalEntityName\", compName);\r",
											"            pm.variables.set(\"compcountryCode\", compcountryCode);\r",
											"            pm.variables.set(\"compIdPut\", compId);\r",
											"            pm.variables.set(\"name\", \"EntlReg_CmpUpdated_\"+pm.variables.get(\"entityName\")   );\r",
											"            pm.variables.set(\"stateRegion\", jsonData[i].company.stateOfIncorporation);\r",
											"\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([204,200]);\r",
											" });\r",
											" \r",
											"var currentId = pm.variables.get(\"compIdPut\");\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Companies/platform-companies/\"+currentId);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    \r",
											"    pm.test(\"Status code name has string\", function () {\r",
											"        pm.expect(jsonData.name).to.eql(\"EntlReg_CmpUpdated_\"+pm.variables.get(\"entityName\"));\r",
											"        console.log(\"Updated company name: \"+\"EntlReg_CmpUpdated_\"+pm.variables.get(\"entityName\"));\r",
											"    });\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"companyId\": {{compIdPut}},\r\n    \"platformCode\": \"{{platformCode}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"isActive\": true,\r\n    \"countryCode\":\"{{compcountryCode}}\",\r\n    \"company\": {\r\n        \"id\": {{compIdPut}},\r\n        \"salesforceId\": \"\",\r\n        \"legalEntityName\": \"{{legalEntityName}}\",\r\n        \"stateOfIncorporation\": \"Alberta\",\r\n        \"countryOfJurisdiction\": \"United States of America\",\r\n        \"isActive\": true,\r\n        \"recordTypeId\": 1,\r\n        \"institutionTypeId\": 1,\r\n        \"sectorId\": 6,\r\n        \"industryId\": 3,\r\n        \"onboardingPlatformCode\": \"LQX\",\r\n        \"geographicRegion\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Companies/platform/{{compIdPut}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Companies",
										"platform",
										"{{compIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Companies Platform",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var  cRandom = getRandomAlphaNumeric(3,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"\r",
											"// function getRandomAlphaNumeric(len, chars) {\r",
											"//     var result = '';\r",
											"//     for (var i = len; i > 0; i--)\r",
											"//     { \r",
											"//      result += chars[Math.floor(Math.random() * chars.length)];\r",
											"//     }\r",
											"//      return result;\r",
											"// }\r",
											"// pm.variables.set(\"entityName\", cRandom);\r",
											"// console.log(\"--->\"+cRandom);\r",
											"// var moment = require('moment'); \r",
											"// var timeT = moment.utc().format();  \r",
											"// console.log(\"Current time: \"+timeT)\r",
											"// pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/companies?count=20000&skip=0&includeInactive=true\");\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for (i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].name.includes(\"EntilementQA\")) {\r",
											"            var compId = jsonData[i].companyId;\r",
											"            var compName = jsonData[i].name;\r",
											"            console.log(\"company id: \" + compId);\r",
											"            console.log(\"company Name: \" + compName);\r",
											"            pm.variables.set(\"compIdPut\", compId);\r",
											"            // pm.variables.set(\"name\", \"API_CmpUpdated_\"+pm.variables.get(\"entityName\")   );\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/Platforms?count=1000\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        for(i=0; i<jsonData.length; i++)\r",
											"        {\r",
											"            if(jsonData[i].code.includes(\"API_TestPlatform\"))\r",
											"            {\r",
											"                pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"var currentId = pm.variables.get(\"compIdPut\");\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Companies/\"+currentId+\"/platforms\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    \r",
											"    pm.test(\"To verify company platform whose code :\"+pm.variables.get(\"codePlatform\") +\" is added\", function () {\r",
											"        for(i=0;i<jsonData.length; i++)\r",
											"        {\r",
											"            if(jsonData[i].code == pm.variables.get(\"codePlatform\"))\r",
											"            {\r",
											"                pm.expect(jsonData[i].code).to.eql(pm.variables.get(\"codePlatform\"));\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"{{codePlatform}}\"",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/{{compIdPut}}/platforms/{{codePlatform}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{compIdPut}}",
										"platforms",
										"{{codePlatform}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Companies Platform",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var  cRandom = getRandomAlphaNumeric(3,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"\r",
											"// function getRandomAlphaNumeric(len, chars) {\r",
											"//     var result = '';\r",
											"//     for (var i = len; i > 0; i--)\r",
											"//     { \r",
											"//      result += chars[Math.floor(Math.random() * chars.length)];\r",
											"//     }\r",
											"//      return result;\r",
											"// }\r",
											"// pm.variables.set(\"entityName\", cRandom);\r",
											"// console.log(\"--->\"+cRandom);\r",
											"// var moment = require('moment'); \r",
											"// var timeT = moment.utc().format();  \r",
											"// console.log(\"Current time: \"+timeT)\r",
											"// pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/companies?count=15000&skip=0&includeInactive=true\");\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for (i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].name.includes(\"EntilementQA\")) {\r",
											"            var compId = jsonData[i].companyId;\r",
											"            var compName = jsonData[i].name;\r",
											"            console.log(\"company id: \" + compId);\r",
											"            console.log(\"company Name: \" + compName);\r",
											"            pm.variables.set(\"compIdPut\", compId);\r",
											"            // pm.variables.set(\"name\", \"API_CmpUpdated_\"+pm.variables.get(\"entityName\")   );\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/Platforms?count=500\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        for(i=0; i<jsonData.length; i++)\r",
											"        {\r",
											"            if(jsonData[i].code.includes(\"API_TestPlatform\"))\r",
											"            {\r",
											"                pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"var currentId = pm.variables.get(\"compIdPut\");\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Companies/\"+currentId+\"/platforms\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    \r",
											"    pm.test(\"To verify company platform whose code :\"+pm.variables.get(\"codePlatform\") +\" is deleted\", function () {\r",
											"        for(i=0;i<jsonData.length; i++)\r",
											"        {\r",
											"            if(jsonData[i].code == pm.variables.get(\"codePlatform\"))\r",
											"            {\r",
											"                pm.expect(jsonData[i].code).to.eql(pm.variables.get(\"codePlatform\"));\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"{{codePlatform}}\"",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/{{compIdPut}}/platforms/{{codePlatform}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{compIdPut}}",
										"platforms",
										"{{codePlatform}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DIGI Sync/roles ENT-1942",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/companies?count=1000&productCode=DIGI\");",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"    }",
											"}, function (err, res) {",
											"    var jsonData = res.json();",
											"",
											"    for(i=0;i,jsonData.length;i++)",
											"    {",
											"        if(jsonData[i].name.includes(\"QAtesting\"))",
											"        {",
											"            pm.variables.set(\"companyIdDIGI\", jsonData[i].companyId);",
											"            pm.variables.set(\"companynameDIGI\", jsonData[i].name);",
											"",
											"            console.log(\"companyId-----> \"+jsonData[i].companyId);",
											"            console.log(\"name-----> \"+jsonData[i].name);",
											"",
											"            break;",
											"        }",
											"    } ",
											"",
											"    var url = pm.variables.get(\"baseURI\");",
											"    url = url.concat(\"/api/companies/\"+pm.variables.get(\"companyIdDIGI\")+\"/entitlements?productCode=DIGI\");",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: 'GET',",
											"        header: {",
											"            'Accept': 'application/json',",
											"            'Content-Type': 'application/json',",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"        }",
											"    }, function (err, res) {",
											"        var jsonData = res.json();",
											"",
											"        for(i=0;i,jsonData.length;i++)",
											"        {",
											"            if(jsonData[i].roleName.includes(\"Digitization\"))",
											"            {",
											"                pm.variables.set(\"participantIdDIGI\", jsonData[i].participantId);",
											"                pm.variables.set(\"roleNameDIGI\",jsonData[i].roleName);",
											"                pm.variables.set(\"roldeIdDIGI\", jsonData[i].roleId);",
											"                console.log(\"participantId-----> \"+jsonData[i].participantId);",
											"                console.log(\"roleId-----> \"+jsonData[i].roleId);",
											"                console.log(\"roleName-----> \"+jsonData[i].roleName);",
											"                break;",
											"            }",
											"        } ",
											"        pm.variables.set(\"isActiveDIGI\", true);",
											"        pm.variables.set(\"productCodeDIGI\", \"DIGI\");",
											"",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"var companyId = pm.variables.get(\"companyIdDIGI\");",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\" + companyId + \"/entitlements\");",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"        }",
											"    },",
											"    function (err, res) {",
											"    if (err) { console.log(\"error :\" + err); };",
											"",
											"    var responseJSONdata = res.json();",
											"    for (var i = 0; i < responseJSONdata.length; i++) {",
											"        if(responseJSONdata[i].roldeId == pm.variables.get(\"roldeIdDIGI\"))",
											"        {",
											"        pm.test(\"To check /companies/{id} returns company details\", function () {",
											"            // for (var i = 0; i < responseJSONdata.length; i++) {",
											"            pm.expect(responseJSONdata[i].companyId).to.eql(parseInt(companyId));",
											"            // }",
											"        }); ",
											"        pm.test(\"To check Company Roles_activate\", function () {",
											"            // for (var i = 0; i < responseJSONdata.length; i++) {",
											"            pm.expect(responseJSONdata[i].isActive).to.eql(true);",
											"            // }",
											"        }); ",
											"        }",
											"    }",
											"/*DIGI data from entitlement is getting sync automatically in DIGI db for company, participants, aliases. Hence we cannot verify it by publication call. This story is partially automated*/",
											"    //  var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";",
											"    //     pm.sendRequest({",
											"    //     url: url1,",
											"    //     method: 'POST',",
											"    //     header: {",
											"    //         'Content-Type': 'application/json',",
											"    //         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")",
											"    //     },",
											"    //     body: {",
											"    //         mode: 'raw',",
											"    //         raw: {",
											"                                                    ",
											"    //             }",
											"    //         }",
											"    //     }, function (err, res) {",
											"    //         if (err) { console.log(url + err); }",
											"    ",
											"    //     var responseJSONdata = JSON.parse(responseBody);",
											"    //     for (i = 0; i < responseJSONdata.length; i++) ",
											"    //     {",
											"    //         if(responseJSONdata[i].product == \"DIGI\")",
											"    //         {",
											"    //         pm.test(\"Validating publication/sync is successful\", function () {",
											"    //             pm.expect(responseJSONdata[i].state).equals(\"Success\");",
											"                ",
											"    //         });",
											"    //         }",
											"        ",
											"    //     }",
											"    // });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"participantId\":{{participantIdDIGI}},\n\t\t\"isActive\": {{isActiveDIGI}},\n\t\t\"companyId\":{{companyIdDIGI}},\n\t\t\"productCode\":\"{{productCodeDIGI}}\",\n\t\t\"roleId\":{{roldeIdDIGI}},\n\t\t\"roleName\":\"{{roleNameDIGI}}\"\n\t}\n]"
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/{{companyIdDIGI}}/roles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{companyIdDIGI}}",
										"roles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Edit User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user = getRandomAlphaNumeric(2, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");",
											"pm.variables.set(\"U_ID\", user);",
											"",
											"function getRandomAlphaNumeric(len, chars) {",
											"    var result = '';",
											"    for (var i = len; i > 0; i--) {",
											"        result += chars[Math.floor(Math.random() * chars.length)];",
											"    }",
											"    return result;",
											"}",
											"",
											"",
											"var cid = pm.environment.get(\"Company_Id_G\");",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/companies/\" + cid + \"/users\");",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"    }",
											"",
											"}, function (err, res) {",
											"    var jsonData = res.json();",
											"    pm.variables.set(\"UserID1\", pm.environment.get(\"UserID_new\"));",
											"    var uid = pm.environment.get(\"UserID_new\");",
											"   // var uid = pm.variables.get(\"UserID1\");",
											"",
											"",
											"    // });",
											"",
											"    // var uid = pm.variables.get(\"User_Id_P\");",
											"    var url = pm.variables.get(\"baseURI\");",
											"    url = url.concat(\"/api/users/\" + uid);",
											"",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: 'GET',",
											"        header: {",
											"            'Accept': 'application/json',",
											"            'Content-Type': 'application/json',",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"        }",
											"    },",
											"        function (err, res) {",
											"            var jsonData = res.json();",
											"            pm.variables.set(\"UserId\", jsonData.id);",
											"",
											"            pm.variables.set(\"UpdatedOn\", jsonData.updatedOn);",
											"            var updatedFName = \"Test123_\" + user;",
											"            pm.variables.set(\"updatedFName\", updatedFName);",
											"            var UpdatedOn = pm.variables.get(\"UpdatedOn\");",
											"",
											"            console.log(updatedFName);",
											"            console.log(UpdatedOn);",
											"            pm.variables.set(\"email\", jsonData.email);",
											"",
											"        ",
											"            var companyId = pm.environment.get(\"Company_Id_G\");",
											"            pm.variables.set(\"companyId\", companyId);",
											"            var url = pm.variables.get(\"baseURI\");",
											"            url = url.concat(\"/api/Companies/\" + companyId);",
											"",
											"            pm.sendRequest({",
											"                url: url,",
											"                method: 'GET',",
											"                header: {",
											"                    'Accept': 'application/json',",
											"                    'Content-Type': 'application/json',",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"                }",
											"            },",
											"                function (err, res) {",
											"                    if (err) { console.log(\"error :\" + err); }",
											"                    var jsonData = res.json();",
											"                    console.log(jsonData);",
											"",
											"                    pm.variables.set(\"cid\", jsonData.id);",
											"                    pm.variables.set(\"salesforceId\", jsonData.salesforceId);",
											"                    pm.variables.set(\"name\", jsonData.name);",
											"                    pm.variables.set(\"country\", jsonData.country);",
											"                    pm.variables.set(\"stateOfIncorporation\", jsonData.stateOfIncorporation);",
											"                    pm.variables.set(\"countryOfJurisdiction\", jsonData.countryOfJurisdiction);",
											"                    pm.variables.set(\"isActive\", jsonData.isActive);",
											"                    pm.variables.set(\"updatedOn\", jsonData.updatedOn);",
											"                    pm.variables.set(\"users\", jsonData.users);",
											"                });",
											"        });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedupdatedFName = pm.variables.get(\"updatedFName\");",
											"",
											"pm.test(\"To check updated first name: \"+expectedupdatedFName, function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.eql(expectedupdatedFName);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"companyId\": {{Company_Id_G}},\r\n    \"email\": \"{{email}}\",\r\n    \"id\": {{UserID1}},\r\n    \"firstName\": \"{{updatedFName}}\",\r\n    \"middleInitial\": \"U\",\r\n    \"lastName\": \"UserFY\",\r\n    \"isActive\": false,\r\n    \"userName\": \"{{email}}\",\r\n    \"title\": \"QA\",\r\n    \"workPhone\": \"45657668\",\r\n    \"isLqxUser\": false,\r\n    \"updatedOn\": \"{{UpdatedOn}}\",\r\n    \"isDeleted\": false,\r\n    \"isPortalUser\": true,\r\n    \"isAuthorizedSignatory\": false,\r\n    \"isAuthorizedAdmin\": true,\r\n    \"isPlatformUser\": true,\r\n    \"isPublished\": true,\r\n    \"employeeId\": \"222\",\r\n    \"company\": {\r\n        \"id\": {{cid}},\r\n        \"salesforceId\": \"{{salesforceId}}\",\r\n        \"name\": \"{{name}}\",\r\n        \"country\": \"{{country}}\",\r\n        \"stateOfIncorporation\": \"{{stateOfIncorporation}}\",\r\n        \"countryOfJurisdiction\": \"{{countryOfJurisdiction}}\",\r\n        \"isActive\": {{isActive}}\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/Users/{{UserId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Users",
										"{{UserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate_User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"To check user is  Active \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user = getRandomAlphaNumeric(5, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"pm.variables.set(\"U_ID\", user);\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--) {\r",
											"        result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"var companyId = pm.environment.get(\"Company_Id_G\");\r",
											"pm.variables.set(\"companyId\", companyId);\r",
											"\r",
											"var cid, salesforceId, name, country, stateOfIncorporation, countryOfJurisdiction, isActive, updatedOn, users;\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Companies/\" + companyId);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"    }\r",
											"},\r",
											"    function (err, res) {\r",
											"        if (err) { console.log(\"error :\" + err); }\r",
											"        var jsonData = res.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        pm.variables.set(\"cid\", jsonData.id);\r",
											"        pm.variables.set(\"salesforceId\", jsonData.salesforceId);\r",
											"        pm.variables.set(\"name\", jsonData.name);\r",
											"        pm.variables.set(\"country\", jsonData.country);\r",
											"        pm.variables.set(\"stateOfIncorporation\", jsonData.stateOfIncorporation);\r",
											"        pm.variables.set(\"countryOfJurisdiction\", jsonData.countryOfJurisdiction);\r",
											"        pm.variables.set(\"isActive\", jsonData.isActive);\r",
											"        pm.variables.set(\"updatedOn\", jsonData.updatedOn);\r",
											"        pm.variables.set(\"users\", jsonData.users);\r",
											"\r",
											"        var url = pm.variables.get(\"baseURI\");\r",
											"        url = url.concat(\"/api/users\");\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: url,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: {\r",
											"                    \"id\": 280,\r",
											"                    \"salesforceId\": \"a090j000001Tq8XAAS\",\r",
											"                    \"firstName\": \"TestAPI_\" + user,\r",
											"                    \"middleInitial\": \"U\",\r",
											"                    \"lastName\": \"User\" + user,\r",
											"                    \"email\": \"lqxnga+EntlReg_\" + user + \"@gmail.com\",\r",
											"                    \"companyId\": companyId,\r",
											"                    \"isActive\": false,\r",
											"                    \"userName\": \"lqxnga+EntlReg_\" + user + \"@gmail.com\",\r",
											"                    \"title\": \"QA\",\r",
											"                    \"workPhone\": \"45657668\",\r",
											"                    \"isLqxUser\": false,\r",
											"                    \"updatedOn\": \"2019-11-12T11:34:00.0066667\",\r",
											"                    \"isDeleted\": false,\r",
											"                    \"isPortalUser\": true,\r",
											"                    \"isAuthorizedSignatory\": false,\r",
											"                    \"isAuthorizedAdmin\": true,\r",
											"                    \"isPlatformUser\": true,\r",
											"                    \"company\": {\r",
											"                        \"id\": cid,\r",
											"                        \"salesforceId\": salesforceId,\r",
											"                        \"name\": name,\r",
											"                        \"country\": country,\r",
											"                        \"stateOfIncorporation\": stateOfIncorporation,\r",
											"                        \"countryOfJurisdiction\": countryOfJurisdiction,\r",
											"                        \"isActive\": isActive,\r",
											"                        \"updatedOn\": updatedOn,\r",
											"                        \"users\": users\r",
											"                    }\r",
											"                }\r",
											"\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(err); }\r",
											"            var jsonData = res.json();\r",
											"            var newId = jsonData.id;\r",
											"            console.log(\"NewUserID:\" + newId);\r",
											"            pm.variables.set(\"NewUserID\", newId);\r",
											"        });\r",
											"\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"{{NewUserID}}\",\r\n    \"salesforceId\": \"a090j000001Tq8XAAS\",\r\n    \"firstName\": \"Test{{U_ID}}\",\r\n    \"middleInitial\": \"U\",\r\n    \"lastName\": \"User{{U_ID}}\",\r\n    \"email\": \"TestUser+api_{{U_ID}}@gmail.com\",\r\n    \"companyId\": {{Company_Id_G}},\r\n    \"isActive\": true,\r\n    \"userName\": \"TestUser+api_{{U_ID}}@gmail.com\",\r\n    \"title\": \"QA\",\r\n    \"workPhone\": \"45657668\",\r\n    \"isLqxUser\": false,\r\n    \"updatedOn\": \"2019-11-12T11:34:00.0066667\",\r\n    \"isDeleted\": false,\r\n    \"isPortalUser\": true,\r\n    \"isAuthorizedSignatory\": false,\r\n    \"isAuthorizedAdmin\": true,\r\n    \"isPlatformUser\": true,\r\n    \"company\": {\r\n        \"id\": {{cid}},\r\n        \"salesforceId\": \"{{salesforceId}}\",\r\n        \"name\": \"{{name}}\",\r\n        \"country\": \"{{country}}\",\r\n        \"stateOfIncorporation\": \"{{stateOfIncorporation}}\",\r\n        \"countryOfJurisdiction\": \"{{countryOfJurisdiction}}\",\r\n        \"isActive\": {{isActive}},\r\n        \"updatedOn\": \"{{updatedOn}}\",\r\n        \"users\": []\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/users/{{NewUserID}}?command=activate",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"{{NewUserID}}"
									],
									"query": [
										{
											"key": "command",
											"value": "activate"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User-send-welcome-letter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newID = pm.variables.get(\"NewUserID\");\r",
											"console.log(newID)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"isPortalUser\":false,\r\n    \"isPlatformUser\":false,\r\n    \"id\":\"{{NewUserID}}\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/users/{{NewUserID}}?command=send-welcome-letter",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"{{NewUserID}}"
									],
									"query": [
										{
											"key": "command",
											"value": "send-welcome-letter"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User-notifications",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function greet(){\r",
											"var newID = pm.variables.get(\"NewUserID\");\r",
											"console.log(newID)\r",
											"\r",
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('YYYY-MM-DD');\r",
											"console.log(\"timeToday time: \" + timeToday)\r",
											"pm.variables.set(\"timeToday\", timeToday);\r",
											"\r",
											"var timeYesterday = moment().subtract(30, \"days\").format(\"YYYY-MM-DD\");\r",
											"console.log(\"timeYesterday time: \" + timeYesterday)\r",
											"pm.variables.set(\"timeYesterday\", timeYesterday);\r",
											"}\r",
											"setTimeout(greet,5000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"pm.test(\"Validating response body \", function () {\r",
											"    pm.expect(responseJSONdata[0]).to.have.keys('templateId', 'timestamp', 'events');\r",
											"    pm.expect(responseJSONdata[0].templateId).eqls('WelcomeLetter.html');\r",
											"    console.log(responseJSONdata[0].templateId)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/users/{{NewUserID}}/notifications?dateFrom={{timeYesterday}}&dateTo={{timeToday}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"{{NewUserID}}",
										"notifications"
									],
									"query": [
										{
											"key": "dateFrom",
											"value": "{{timeYesterday}}"
										},
										{
											"key": "dateTo",
											"value": "{{timeToday}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User-email-events",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"   function greet(){\r",
											"       var newID = pm.variables.get(\"NewUserID\");\r",
											"    console.log(newID)\r",
											"\r",
											"    var moment = require('moment');\r",
											"    var timeToday = moment.utc().format('YYYY-MM-DD');\r",
											"    console.log(\"timeToday time: \" + timeToday)\r",
											"    pm.variables.set(\"timeToday\", timeToday);\r",
											"\r",
											"    var timeYesterday = moment().subtract(365, \"days\").format(\"YYYY-MM-DD\");\r",
											"    console.log(\"timeYesterday time: \" + timeYesterday)\r",
											"    pm.variables.set(\"timeYesterday\", timeYesterday);\r",
											"   }\r",
											"   setTimeout(greet,30000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validating response body\", function () {\r",
											"    var responseJSONdata = JSON.parse(responseBody);\r",
											"    pm.expect(responseJSONdata[0]).to.have.keys('eventTimestamp', 'event');\r",
											"    console.log(responseJSONdata[0].eventTimestamp)  \r",
											"}\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/users/{{NewUserID}}/email-events?dateFrom={{timeYesterday}}&dateTo={{timeToday}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"{{NewUserID}}",
										"email-events"
									],
									"query": [
										{
											"key": "dateFrom",
											"value": "{{timeYesterday}}"
										},
										{
											"key": "dateTo",
											"value": "{{timeToday}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User-lastPasswordChanges",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newID = pm.variables.get(\"NewUserID\");\r",
											"console.log(newID)\r",
											"\r",
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('YYYY-MM-DD');\r",
											"console.log(\"timeToday time: \" + timeToday)\r",
											"pm.variables.set(\"timeToday\", timeToday);\r",
											"\r",
											"var timeYesterday = moment().subtract(365, \"days\").format(\"YYYY-MM-DD\");\r",
											"console.log(\"timeYesterday time: \" + timeYesterday)\r",
											"pm.variables.set(\"timeYesterday\", timeYesterday);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/users/{{NewUserID}}/lastPasswordChanges?dateFrom={{timeYesterday}}&dateTo={{timeToday}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"{{NewUserID}}",
										"lastPasswordChanges"
									],
									"query": [
										{
											"key": "dateFrom",
											"value": "{{timeYesterday}}"
										},
										{
											"key": "dateTo",
											"value": "{{timeToday}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deactivate_User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newID = pm.variables.get(\"NewUserID\");\r",
											"console.log(newID)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"To check user is  inActive: \", function () { //+expUserId",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isActive).to.eql(false);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var nuid = pm.variables.get(\"NewUserID\");",
											"",
											"//var exUSer = jsonData.id;",
											"console.log(nuid);",
											"",
											"// pm.variables.set(\"NId\", nuid);",
											"    var newID = pm.variables.get(\"NewUserID\");",
											"    console.log(newID)",
											"",
											"    var url = pm.variables.get(\"baseURI\");",
											"    url = url.concat(\"/api/Users/\" + newID);",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: 'DELETE',",
											"        header: {",
											"            'Accept': 'application/json',",
											"            'Content-Type': 'application/json',",
											"            'x-platform-code': pm.environment.get(\"platformCode\"),",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"        }",
											"    },",
											"        function (err, res) {",
											"            if (err) { console.log(\"error :\" + err); }",
											"            //var jsonData = res.json();",
											"            // pm.test(\"To check user Successfully deleted: \"+ newID, function ()",
											"            // {",
											"            //     var jsonData = pm.response.json();",
											"            //     pm.expect(jsonData.result).to.eql(\"User \"+newID+ \" deleted\");",
											"            // });",
											"",
											"        });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{NewUserID}}\"\r\n    \r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/users/{{NewUserID}}?command=deactivate",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"{{NewUserID}}"
									],
									"query": [
										{
											"key": "command",
											"value": "deactivate"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UserPermissions",
					"item": [
						{
							"name": "Update Base Rate Administrator permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
											" });\r",
											"\r",
											"var userId = pm.variables.get(\"userId\");\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Company\";\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.test(\"To check /api/userpermissions/id is 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });   \r",
											"\r",
											"    pm.test(\"Validate the Base Rate Administrator permissions updated for user \" + userId , function(){\r",
											"        var permissionFlag = false;\r",
											"        for( var i=0; i< jsonData.length; i++)\r",
											"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
											"            if (jsonData[i].permissionBundleName == \"Base Rate Administrator\")\r",
											"            {\r",
											"                pm.expect(jsonData[i].entityType).to.be.eql(\"Company\");\r",
											"                // pm.expect(jsonData[i].productCode).to.be.eql(\"MO\");\r",
											"                pm.expect(jsonData[i].roleName).to.be.eql(\"Administrator\");\r",
											"                permissionFlag = true;\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"        pm.expect(permissionFlag).to.be.eql(true);\r",
											"   });\r",
											"\r",
											"//     var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"//     pm.sendRequest({\r",
											"//     url: url1,\r",
											"//     method: 'POST',\r",
											"//     header: {\r",
											"//         'Content-Type': 'application/json',\r",
											"//         'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"//         'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"//     },\r",
											"//     body: {\r",
											"//         mode: 'raw',\r",
											"//         raw: {\r",
											"                                                \r",
											"//             }\r",
											"//         }\r",
											"//     }, function (err, res) {\r",
											"//         if (err) { console.log(url + err); }\r",
											"//         pm.test(\"To check /api/Publications has response 200\", function () {\r",
											"//             pm.expect(res.code).to.eql(200);      \r",
											"//         });\r",
											"\r",
											"       \r",
											"//     });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/users?count=1000&productCode=MO\");\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    \r",
											"    pm.test(\"To check /api/users response is 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].userName === pm.environment.get(\"platformUser\"))\r",
											"        {\r",
											"            var guid =  jsonData[i].id;\r",
											"            console.log(\"userId: \"+jsonData[i].id);\r",
											"            console.log(\"companyName: \"+jsonData[i].companyName);\r",
											"            pm.variables.set(\"userId\", guid);\r",
											"            pm.variables.set(\"platCmpName\", jsonData[i].companyName);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/companies?format=company-only&count=2500&productCode=MO\");\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData1 = res.json();\r",
											"        pm.test(\"To check /api/companies response is 200\", function () {\r",
											"            pm.expect(res.code).to.eql(200);      \r",
											"        });\r",
											"\r",
											"        for(i=0; i< jsonData1.length; i++)\r",
											"        { \r",
											"            if(jsonData1[i].name == pm.variables.get(\"platCmpName\"))\r",
											"            {\r",
											"                var gcmpId =  jsonData1[i].companyId;\r",
											"                console.log(\"companyId: \"+gcmpId);\r",
											"                pm.variables.set(\"gcmpId\", gcmpId);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"\r",
											"        var url0 = pm.variables.get(\"baseURI\");\r",
											"        url0 = url0.concat(\"/api/companies/\"+pm.variables.get(\"gcmpId\")+\"/entitlements\");\r",
											"        pm.sendRequest({\r",
											"            url: url0,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            var jsonData1 = res.json();\r",
											"            pm.test(\"To check /api/companies/id/roles response is 200\", function () {\r",
											"                pm.expect(res.code).to.eql(200);      \r",
											"            });\r",
											"            \r",
											"            for(i=0; i< jsonData1.length; i++)\r",
											"            { \r",
											"                if(jsonData1[i].productCode == \"MO\" && jsonData1[i].isActive==true)\r",
											"                {\r",
											"                    var brRoleId =  jsonData1[i].roleId;\r",
											"                    console.log(\"brRoleId: \"+brRoleId);\r",
											"                    pm.variables.set(\"roldeId\", brRoleId);\r",
											"\r",
											"                }\r",
											"            }\r",
											"            // pm.variables.set(\"roldeId\", 14);\r",
											"\r",
											"            var url = pm.variables.get(\"baseURI\");\r",
											"            url = url.concat(\"/api/userpermissions/\" + pm.variables.get(\"userId\") + \"/roles/\" + pm.variables.get(\"roldeId\") + \"?entityType=Company\");\r",
											"            pm.sendRequest({\r",
											"                url: url,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"                }\r",
											"            },\r",
											"            function (err, res) {\r",
											"                if (err) { console.log(\"error :\" + err); }\r",
											"                var jsonData = res.json();\r",
											"\r",
											"                pm.test(\"To check /api/userpermissions/id/roles/id response is 200\", function () {\r",
											"                    pm.expect(res.code).to.eql(200);      \r",
											"                });\r",
											"                \r",
											"                for (i = 0; i < jsonData.length; i++) {\r",
											"                    if (jsonData[i].permissionBundleName.includes(\"Base Rate Administrator\")) {\r",
											"                            pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);\r",
											"                            pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);\r",
											"                            pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);\r",
											"                            pm.variables.set(\"isEntitled\", true);\r",
											"                            break;                \r",
											"                    }\r",
											"                }\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"userParticipantId\": {{userParticipantId}},\r\n        \"permissionBundleId\": {{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"isEntitled\": {{isEntitled}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{userId}}",
										"roles",
										"{{roldeId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Base Rate Administrator permission Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
											" });\r",
											"\r",
											"var userId = pm.variables.get(\"userId\");\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Company\";\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.test(\"To check /api/userpermissions/id is 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });   \r",
											"\r",
											"    pm.test(\"Validate the Base Rate Administrator permissions updated for user \" + userId , function(){\r",
											"        var permissionFlag = false;\r",
											"        for( var i=0; i< jsonData.length; i++)\r",
											"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
											"            if (jsonData[i].permissionBundleName == \"Base Rate Administrator\")\r",
											"            {\r",
											"                pm.expect(jsonData[i].entityType).to.be.eql(\"Company\");\r",
											"                // pm.expect(jsonData[i].productCode).to.be.eql(\"MO\");\r",
											"                pm.expect(jsonData[i].roleName).to.be.eql(\"Administrator\");\r",
											"                permissionFlag = true;\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"        pm.expect(permissionFlag).to.be.eql(true);\r",
											"   });\r",
											"\r",
											"//     var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"//     pm.sendRequest({\r",
											"//     url: url1,\r",
											"//     method: 'POST',\r",
											"//     header: {\r",
											"//         'Content-Type': 'application/json',\r",
											"//         'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"//         'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"//     },\r",
											"//     body: {\r",
											"//         mode: 'raw',\r",
											"//         raw: {\r",
											"                                                \r",
											"//             }\r",
											"//         }\r",
											"//     }, function (err, res) {\r",
											"//         if (err) { console.log(url + err); }\r",
											"//         pm.test(\"To check /api/Publications has response 200\", function () {\r",
											"//             pm.expect(res.code).to.eql(200);      \r",
											"//         });\r",
											"\r",
											"       \r",
											"//     });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/users?count=1000&productCode=MO\");\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    \r",
											"    pm.test(\"To check /api/users response is 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].userName === pm.environment.get(\"platformUser\"))\r",
											"        {\r",
											"            var guid =  jsonData[i].id;\r",
											"            console.log(\"userId: \"+jsonData[i].id);\r",
											"            console.log(\"companyName: \"+jsonData[i].companyName);\r",
											"            pm.variables.set(\"userId\", guid);\r",
											"            pm.variables.set(\"platCmpName\", jsonData[i].companyName);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/companies?format=company-only&count=2500&productCode=MO\");\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData1 = res.json();\r",
											"        pm.test(\"To check /api/companies response is 200\", function () {\r",
											"            pm.expect(res.code).to.eql(200);      \r",
											"        });\r",
											"\r",
											"        for(i=0; i< jsonData1.length; i++)\r",
											"        { \r",
											"            if(jsonData1[i].name == pm.variables.get(\"platCmpName\"))\r",
											"            {\r",
											"                var gcmpId =  jsonData1[i].companyId;\r",
											"                console.log(\"companyId: \"+gcmpId);\r",
											"                pm.variables.set(\"gcmpId\", gcmpId);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"\r",
											"        var url0 = pm.variables.get(\"baseURI\");\r",
											"        url0 = url0.concat(\"/api/companies/\"+pm.variables.get(\"gcmpId\")+\"/entitlements\");\r",
											"        pm.sendRequest({\r",
											"            url: url0,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            var jsonData1 = res.json();\r",
											"            pm.test(\"To check /api/companies/id/roles response is 200\", function () {\r",
											"                pm.expect(res.code).to.eql(200);      \r",
											"            });\r",
											"            \r",
											"            for(i=0; i< jsonData1.length; i++)\r",
											"            { \r",
											"                if(jsonData1[i].productCode == \"MO\" && jsonData1[i].isActive==true)\r",
											"                {\r",
											"                    var brRoleId =  jsonData1[i].roleId;\r",
											"                    console.log(\"brRoleId: \"+brRoleId);\r",
											"                    pm.variables.set(\"roldeId\", brRoleId);\r",
											"\r",
											"                }\r",
											"            }\r",
											"            // pm.variables.set(\"roldeId\", 14);\r",
											"\r",
											"            var url = pm.variables.get(\"baseURI\");\r",
											"            url = url.concat(\"/api/userpermissions/\" + pm.variables.get(\"userId\") + \"/roles/\" + pm.variables.get(\"roldeId\") + \"?entityType=Company\");\r",
											"            pm.sendRequest({\r",
											"                url: url,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"                }\r",
											"            },\r",
											"            function (err, res) {\r",
											"                if (err) { console.log(\"error :\" + err); }\r",
											"                var jsonData = res.json();\r",
											"\r",
											"                pm.test(\"To check /api/userpermissions/id/roles/id response is 200\", function () {\r",
											"                    pm.expect(res.code).to.eql(200);      \r",
											"                });\r",
											"                \r",
											"                for (i = 0; i < jsonData.length; i++) {\r",
											"                    if (jsonData[i].permissionBundleName.includes(\"Base Rate Administrator\")) {\r",
											"                            pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);\r",
											"                            pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);\r",
											"                            pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);\r",
											"                            pm.variables.set(\"isEntitled\", true);\r",
											"                            break;                \r",
											"                    }\r",
											"                }\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"userParticipantId\": {{userParticipantId}},\r\n        \"permissionBundleId\": {{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"isEntitled\": {{isEntitled}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{userId}}",
										"roles",
										"{{roldeId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Global Admin permission - OEN-1341",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
											" });\r",
											"\r",
											"var userId = pm.variables.get(\"bunddlesUserId\");\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/userpermissions/\") + userId + \"/roles/\"+ pm.variables.get(\"bunddlesRoleId\") +\"/bundles?platformCode=\"+pm.environment.get(\"platformCode\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.test(\"To check /api/userpermissions/id/roles/bundleid/bundle is 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });   \r",
											"   \r",
											"    pm.test(\"Validating userpermissions/bundles roles format from response body \", function () {\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"            pm.expect(jsonData[i]).to.have.all.keys('id', 'name','description','bundleTypeId','productCode','permissions','roles'); //,'associatedUserPermissionsCount'\r",
											"        }\r",
											"    });\r",
											"    pm.test(\"Validating userpermissions/bundles roles name\", function () {\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"            // pm.expect(jsonData[i].name).to.be.eql(\"MO Admin\");\r",
											"            pm.expect(jsonData[i].name).to.be.oneOf([\"MO Admin\",\"Platform Administrator\"]);\r",
											"\r",
											"        }\r",
											"    });\r",
											"    \r",
											"//     var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"//     pm.sendRequest({\r",
											"//     url: url1,\r",
											"//     method: 'POST',\r",
											"//     header: {\r",
											"//         'Content-Type': 'application/json',\r",
											"//         'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"//         'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"//     },\r",
											"//     body: {\r",
											"//         mode: 'raw',\r",
											"//         raw: {\r",
											"                                                \r",
											"//             }\r",
											"//         }\r",
											"//     }, function (err, res) {\r",
											"//         if (err) { console.log(url + err); }\r",
											"//         pm.test(\"To check /api/Publications has response 200\", function () {\r",
											"//             pm.expect(res.code).to.eql(200);      \r",
											"//         });\r",
											"   \r",
											"//     });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/users?count=2000&skip=0&productCode=MO\");\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: url,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Accept': 'application/json',\r",
											"    'Content-Type': 'application/json',\r",
											"    'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"  }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.test(\"To check /api/users response is 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"    for(i=0; i <= jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].userName == pm.environment.get(\"globalAdminUser\"))\r",
											"        {\r",
											"            pm.variables.set(\"bunddlesUserId\", jsonData[i].id);\r",
											"            pm.variables.set(\"bunddlesCmpName\", jsonData[i].companyName);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/Companies?count=2000&productCode=MO\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        pm.test(\"To check /api/companies response is 200\", function () {\r",
											"            pm.expect(res.code).to.eql(200);      \r",
											"        });\r",
											"        for(i=0; i <= jsonData.length; i++)\r",
											"        {\r",
											"            if(jsonData[i].name == pm.variables.get(\"bunddlesCmpName\"))\r",
											"            {\r",
											"                pm.variables.set(\"bunddlesCmpId\", jsonData[i].companyId);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"\r",
											"        var url = pm.variables.get(\"baseURI\");\r",
											"        url = url.concat(\"/api/companies/\" + pm.variables.get(\"bunddlesCmpId\") + \"/entitlements\");\r",
											"\r",
											"        pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            var jsonData = res.json();\r",
											"            pm.test(\"To check /api/companies/buldleid/roles response is 200\", function () {\r",
											"                pm.expect(res.code).to.eql(200);      \r",
											"            });\r",
											"            for(i=0; i <= jsonData.length; i++)\r",
											"            {\r",
											"                if(jsonData[i].isActive == true && jsonData[i].productCode ==\"MO\")\r",
											"                {\r",
											"                    pm.variables.set(\"bunddlesRoleId\", jsonData[i].roleId);\r",
											"                    break;\r",
											"                }\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{bunddlesUserId}}/roles/{{bunddlesRoleId}}/bundles/Global Admin/?platformCode=LQX",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{bunddlesUserId}}",
										"roles",
										"{{bunddlesRoleId}}",
										"bundles",
										"Global Admin",
										""
									],
									"query": [
										{
											"key": "platformCode",
											"value": "LQX"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Global Admin permission - OEN-1341",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
											" });\r",
											"\r",
											"var permissionBundleName = [\"MO Admin\",\"Global Admin\",\"Platform Administrator\"];\r",
											"\r",
											"var userId = pm.variables.get(\"bunddlesUserId\");\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/userpermissions/\") + userId + \"/roles/\"+ pm.variables.get(\"bunddlesRoleId\") +\"/bundles?platformCode=\"+pm.environment.get(\"platformCode\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.test(\"To check /api/userpermissions/id/roles/id/bundles is 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });      \r",
											"    pm.test(\"Validating userpermissions/bundles roles format from response body \", function () {\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"            pm.expect(jsonData[i]).to.have.all.keys('id', 'name','description','bundleTypeId','productCode','permissions','roles'); //,'associatedUserPermissionsCount'\r",
											"        }\r",
											"    });\r",
											"    pm.test(\"Validating userpermissions/bundles roles name \", function () {\r",
											"        for (var i = 0; i < jsonData.length; i++) {\r",
											"            var permissionBundleNameArray = Object.entries(jsonData[i]);\r",
											"            pm.expect(permissionBundleName.includes(permissionBundleNameArray[1][1])).to.equal(true);\r",
											"        }\r",
											"    });\r",
											"\r",
											"//     var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"//     pm.sendRequest({\r",
											"//     url: url1,\r",
											"//     method: 'POST',\r",
											"//     header: {\r",
											"//         'Content-Type': 'application/json',\r",
											"//         'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"//         'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"//     },\r",
											"//     body: {\r",
											"//         mode: 'raw',\r",
											"//         raw: {\r",
											"                                                \r",
											"//             }\r",
											"//         }\r",
											"//     }, function (err, res) {\r",
											"//         if (err) { console.log(url + err); }\r",
											"//         pm.test(\"To check /api/Publications has response 200\", function () {\r",
											"//             pm.expect(res.code).to.eql(200);      \r",
											"//         });\r",
											"//     });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/users?count=2000&skip=0&productCode=MO\");\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: url,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Accept': 'application/json',\r",
											"    'Content-Type': 'application/json',\r",
											"    'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"  }\r",
											"}, function (err, res) {\r",
											"  var jsonData = res.json();\r",
											"    pm.test(\"To check /api/users response is 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"    for(i=0; i <= jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].userName == pm.environment.get(\"globalAdminUser\"))\r",
											"        {\r",
											"            pm.variables.set(\"bunddlesUserId\", jsonData[i].id);\r",
											"            pm.variables.set(\"bunddlesCmpName\", jsonData[i].companyName);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/Companies?count=2000&productCode=MO\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"    }\r",
											"    }, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.test(\"To check /api/companies response is 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    for(i=0; i <= jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].name == pm.variables.get(\"bunddlesCmpName\"))\r",
											"        {\r",
											"            pm.variables.set(\"bunddlesCmpId\", jsonData[i].companyId);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/companies/\" + pm.variables.get(\"bunddlesCmpId\") + \"/entitlements\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"    }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        pm.test(\"To check /api/companies/id/roles response is 200\", function () {\r",
											"            pm.expect(res.code).to.eql(200);      \r",
											"        });\r",
											"            \r",
											"        for(i=0; i <= jsonData.length; i++)\r",
											"        {\r",
											"            if(jsonData[i].isActive == true && jsonData[i].productCode ==\"MO\")\r",
											"            {\r",
											"                pm.variables.set(\"bunddlesRoleId\", jsonData[i].roleId);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"         });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": {{bunddlesUserId}},\r\n    \"roleId\": {{bunddlesRoleId}},\r\n    \"platformCode\": \"{{platformCode}}\",\r\n    \"bundleName\": \"Global Admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{bunddlesUserId}}/roles/{{bunddlesRoleId}}/bundles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{bunddlesUserId}}",
										"roles",
										"{{bunddlesRoleId}}",
										"bundles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Groups",
					"item": [
						{
							"name": "PUT Group - Update name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updatedName = getRandomAlphaNumeric(3,\"ABC567DEFG34HIJKLMNOPQRS89TUVWXYZ012\");\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Groups?count=10000&skip=0\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].name.includes(\"EntlRegAPIGroup_\"))\r",
											"        {\r",
											"            var gId =  jsonData[i].id;\r",
											"            var gName =  jsonData[i].name;\r",
											"            console.log(\"Group Id: \"+gId);\r",
											"            console.log(\"Group name: \"+gName);\r",
											"            pm.variables.set(\"groupId\", gId);\r",
											"            pm.variables.set(\"groupName\", \"EntlRegAPIGroup_Updated_\"+updatedName);\r",
											"            console.log(pm.variables.get(\"groupName\"));\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"});\r",
											"//     // var cRandom1 = getRandomAlphaNumeric(3, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"//     // function getRandomAlphaNumeric(len, chars) {\r",
											"//     //     var result = '';\r",
											"//     //     for (var i = len; i > 0; i--) {\r",
											"//     //         result += chars[Math.floor(Math.random() * chars.length)];\r",
											"//     //     }\r",
											"//     //     return result;\r",
											"//     // }\r",
											"//     pm.variables.set(\"entityName1\", updatedName);\r",
											"//     var moment = require('moment');\r",
											"//     var timeT = moment.utc().format();\r",
											"//     console.log(\"Current time: \" + timeT)\r",
											"//     pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"//     var url = pm.variables.get(\"baseURI\");\r",
											"//     url = url.concat(\"/api/countries\");\r",
											"//     pm.sendRequest({\r",
											"//         url: url,\r",
											"//         method: 'GET',\r",
											"//         header: {\r",
											"//             'Accept': 'application/json',\r",
											"//             'Content-Type': 'application/json',\r",
											"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"//         }\r",
											"//     }, function (err, res) {\r",
											"//         var jsonData = res.json();\r",
											"//         for (i = 0; i < jsonData.length; i++) {\r",
											"//             if (jsonData[i].countryCode.includes(\"US\")) {\r",
											"//                 var countryName = jsonData[i].name;\r",
											"//                 var countryCode = jsonData[i].countryCode;\r",
											"//                 console.log(\"country Name: \" + countryName);\r",
											"//                 pm.variables.set(\"country\", countryName);\r",
											"//                 pm.variables.set(\"codec\", countryCode);\r",
											"//                 console.log(\"country code: \" + countryCode);\r",
											"//                 break;\r",
											"//             }\r",
											"//         }\r",
											"\r",
											"//         var url = pm.variables.get(\"baseURI\");\r",
											"//         url = url.concat(\"/api/countries/\" + pm.variables.get(\"codec\") + \"/state-provinces\");\r",
											"//         pm.sendRequest({\r",
											"//             url: url,\r",
											"//             method: 'GET',\r",
											"//             header: {\r",
											"//                 'Accept': 'application/json',\r",
											"//                 'Content-Type': 'application/json',\r",
											"//                 'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"//             }\r",
											"//         }, function (err, res) {\r",
											"//             var jsonData = res.json();\r",
											"//             var stateName = jsonData[0].name;\r",
											"//             console.log(\"state Name: \" + stateName);\r",
											"//             pm.variables.set(\"stateRegion\", stateName);\r",
											"\r",
											"//             var url1 = pm.variables.get(\"baseURI\");\r",
											"//             url1 = url1.concat(\"/api/country-jurisdictions\");\r",
											"//             pm.sendRequest({\r",
											"//                 url: url1,\r",
											"//                 method: 'GET',\r",
											"//                 header: {\r",
											"//                     'Accept': 'application/json',\r",
											"//                     'Content-Type': 'application/json',\r",
											"//                     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"//                 }\r",
											"//             }, function (err, res) {\r",
											"//                 var jsonData = res.json();\r",
											"//                 for (i = 0; i < jsonData.length; i++) {\r",
											"//                     if (jsonData[i].countryCode.includes(\"US\")) {\r",
											"//                         var jurisdiction = jsonData[i].name;\r",
											"//                         console.log(\"countryOfJurisdiction: \" + jurisdiction);\r",
											"//                         pm.variables.set(\"countryOfJurisdiction\", jurisdiction);\r",
											"//                         break;\r",
											"//                     }\r",
											"//                 }\r",
											"//                 var url2 = pm.variables.get(\"baseURI\");\r",
											"//                 url2 = url2.concat(\"/api/institution-types\");\r",
											"//                 pm.sendRequest({\r",
											"//                     url: url2,\r",
											"//                     method: 'GET',\r",
											"//                     header: {\r",
											"//                         'Accept': 'application/json',\r",
											"//                         'Content-Type': 'application/json',\r",
											"//                         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"//                     }\r",
											"//                 }, function (err, res) {\r",
											"//                     var jsonData = res.json();\r",
											"//                     var institutionType = jsonData[0].id;\r",
											"//                     console.log(\"institutionType id: \" + institutionType);\r",
											"//                     console.log(\"institutionType name: \" + jsonData[0].name);\r",
											"//                     pm.variables.set(\"institutionTypeId\", institutionType);\r",
											"\r",
											"//                     var url3 = pm.variables.get(\"baseURI\");\r",
											"//                     url3 = url3.concat(\"/api/sectors\");\r",
											"//                     pm.sendRequest({\r",
											"//                         url: url3,\r",
											"//                         method: 'GET',\r",
											"//                         header: {\r",
											"//                             'Accept': 'application/json',\r",
											"//                             'Content-Type': 'application/json',\r",
											"//                             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"//                         }\r",
											"//                     }, function (err, res) {\r",
											"//                         var jsonData = res.json();\r",
											"//                         var sectorId = jsonData[5].id;\r",
											"//                         console.log(\"sector id: \" + sectorId);\r",
											"//                         console.log(\"sector name: \" + jsonData[5].name);\r",
											"//                         pm.variables.set(\"sectorId\", sectorId);\r",
											"\r",
											"//                         var url4 = pm.variables.get(\"baseURI\");\r",
											"//                         url4 = url4.concat(\"/api/sectors/\" + pm.variables.get(\"sectorId\") + \"/industries\");\r",
											"//                         pm.sendRequest({\r",
											"//                             url: url4,\r",
											"//                             method: 'GET',\r",
											"//                             header: {\r",
											"//                                 'Accept': 'application/json',\r",
											"//                                 'Content-Type': 'application/json',\r",
											"//                                 'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"//                             }\r",
											"//                         }, function (err, res) {\r",
											"//                             var jsonData = res.json();\r",
											"//                             var industryId = jsonData[0].id;\r",
											"//                             console.log(\"industry Id : \" + industryId);\r",
											"//                             console.log(\"industry name: \" + jsonData[0].name);\r",
											"//                             pm.variables.set(\"industryId\", industryId);\r",
											"//                             var url5 = pm.variables.get(\"baseURI\") + \"/api/Companies\";\r",
											"//                             pm.sendRequest({\r",
											"//                                 url: url5,\r",
											"//                                 method: 'POST',\r",
											"//                                 header: {\r",
											"//                                     'Content-Type': 'application/json',\r",
											"//                                     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"//                                 },\r",
											"//                                 body: {\r",
											"//                                     mode: 'raw',\r",
											"//                                     raw: {\r",
											"//                                         \"id\": 0,\r",
											"//                                         \"salesforceId\": \"\",\r",
											"//                                         \"name\": \"API_Company_\" + pm.variables.get(\"entityName1\"),\r",
											"//                                         \"dba\": \"\",\r",
											"//                                         \"phone\": \"\",\r",
											"//                                         \"addressLine1\": \"\",\r",
											"//                                         \"addressLine2\": \"\",\r",
											"//                                         \"city\": \"\",\r",
											"//                                         \"stateRegion\": pm.variables.get(\"stateRegion\"),\r",
											"//                                         \"country\": pm.variables.get(\"country\"),\r",
											"//                                         \"entityType\": \"\",\r",
											"//                                         \"duns\": \"\",\r",
											"//                                         \"taxId\": \"\",\r",
											"//                                         \"stateOfIncorporation\": \"\",\r",
											"//                                         \"countryOfJurisdiction\": pm.variables.get(\"countryOfJurisdiction\"),\r",
											"//                                         \"isActive\": true,\r",
											"//                                         \"lastSalesforceUpdateUtc\": pm.variables.get(\"currentTime\"),\r",
											"//                                         \"isLqXcompany\": true,\r",
											"//                                         \"legacyId\": \"\",\r",
											"//                                         \"isLegacyAccount\": true,\r",
											"//                                         \"recordTypeId\": 1,\r",
											"//                                         \"legalEntityName\": \"\",\r",
											"//                                         \"institutionTypeId\": pm.variables.get(\"institutionTypeId\"),\r",
											"//                                         \"sectorId\": pm.variables.get(\"sectorId\"),\r",
											"//                                         \"industryId\": pm.variables.get(\"industryId\"),\r",
											"//                                         \"postalCode\": \"\",\r",
											"//                                         \"updatedOn\": pm.variables.get(\"currentTime\"),\r",
											"//                                         \"users\": []\r",
											"//                                     }\r",
											"//                                 }\r",
											"//                             }, function (err, res) {\r",
											"//                                 //  console.log(\"Result:\" + res.text());\r",
											"//                                 if (err) { console.log(url + err); }\r",
											"//                                 var jsonData = res.json();\r",
											"//                                 var companyId = jsonData.id;\r",
											"//                                 console.log(\"Company Id1 : \" + companyId);\r",
											"//                                 pm.variables.set(\"companyId1\", companyId);\r",
											"//         }); \r",
											"//                     }); \r",
											"//                 });\r",
											"//             });\r",
											"\r",
											"//         });\r",
											"//     });       \r",
											"//     });\r",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"// if (pm.response.code == 201 && responseBody !== '') {\r",
											"//     var responseJSONdata = JSON.parse(responseBody);\r",
											"//     var newGrpId = responseJSONdata.id;\r",
											"//     console.log(\"New created group id: \"+newGrpId);\r",
											"\r",
											"//     var url = pm.variables.get(\"baseURI\");\r",
											"//     url = url.concat(\"/api/Groups/\"+newGrpId);\r",
											"\r",
											"//     pm.sendRequest({\r",
											"//         url: url,\r",
											"//         method: 'GET',\r",
											"//         header: {\r",
											"//             'Accept': 'application/json',\r",
											"//             'Content-Type': 'application/json',\r",
											"//             'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"//         }\r",
											"//     }, function (err, res) {\r",
											"//         var jsonData = res.json();\r",
											"        \r",
											"//         pm.test(\"Verifying newly created group id: \"+jsonData.id, function () {\r",
											"//             pm.expect(jsonData.id).to.eql(newGrpId);\r",
											"//         });\r",
											"//     });\r",
											"// }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{groupId}},\r\n  \"name\": \"{{groupName}}\",\r\n  \"companyIds\": [  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Groups/{{groupId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Groups",
										"{{groupId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Platforms",
					"item": [
						{
							"name": "EditBaseRates-Add-OEN-1880",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=100\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].code.includes(\"API_\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
											"            pm.variables.set(\"name\", jsonData[i].name);\r",
											"            pm.variables.set(\"platformUrl\", jsonData[i].platformUrl);\r",
											"            pm.variables.set(\"isActive\", jsonData[i].isActive);\r",
											"            console.log(pm.variables.get(\"codePlatform\"));\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/baserates/types\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        pm.variables.set(\"baseRateTypeCode\", jsonData[0].baseRateTypeCode);\r",
											"        console.log(pm.variables.get(\"baseRateTypeCode\"));\r",
											"\r",
											"    });  \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms/\"+pm.variables.get(\"codePlatform\")+\"/baserates/types\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenPlatformUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"   \r",
											"    pm.test(\"To check updated baserates: \" + pm.variables.get(\"baseRateTypeCode\"), function () {\r",
											"\r",
											"        pm.expect(jsonData[0].baseRateTypeCode).to.eql(pm.variables.get(\"baseRateTypeCode\"));\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"{{baseRateTypeCode}}\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatform}}/baserates/types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatform}}",
										"baserates",
										"types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get platforms by baserates/types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating format from response body for baserates/types: \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.all.keys('baseRateTypeCode', 'description','source','isManual');\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.test(\"To check baserates/types details for products is not null (baseRateTypeCode,description)\", function () {\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        pm.expect(jsonData[i].baseRateTypeCode).to.not.eql(null);\r",
											"        pm.expect(jsonData[i].description).to.not.eql(null);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=500\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].code.includes(\"API_TestPlatform\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatform}}/baserates/types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatform}}",
										"baserates",
										"types"
									]
								}
							},
							"response": []
						},
						{
							"name": "EditBaseRates-Remove-OEN-1880",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=100\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].code.includes(\"API_\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
											"            pm.variables.set(\"name\", jsonData[i].name);\r",
											"            pm.variables.set(\"platformUrl\", jsonData[i].platformUrl);\r",
											"            pm.variables.set(\"isActive\", jsonData[i].isActive);\r",
											"            console.log(pm.variables.get(\"codePlatform\"));\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/baserates/types\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        pm.variables.set(\"baseRateTypeCode\", jsonData[0].baseRateTypeCode);\r",
											"        console.log(pm.variables.get(\"baseRateTypeCode\"));\r",
											"\r",
											"    });  \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var url = pm.variables.get(\"baseURI\");\r",
											"// url = url.concat(\"/api/Platforms/\"+pm.variables.get(\"codePlatform\")+\"/baserates/types\");\r",
											"\r",
											"// pm.sendRequest({\r",
											"//     url: url,\r",
											"//     method: 'GET',\r",
											"//     header: {\r",
											"//         'Accept': 'application/json',\r",
											"//         'Content-Type': 'application/json',\r",
											"//         'Authorization': 'bearer '+ pm.variables.get(\"accessTokenPlatformUser\")\r",
											"//       }\r",
											"      \r",
											"// }, function (err, res) {\r",
											"//     var jsonData = res.json();\r",
											"   \r",
											"//     pm.test(\"To check updated baserates: \" + pm.variables.get(\"baseRateTypeCode\"), function () {\r",
											"\r",
											"//         pm.expect(jsonData[0].baseRateTypeCode).to.eql(pm.variables.get(\"baseRateTypeCode\"));\r",
											"//     });\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatform}}/baserates/types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatform}}",
										"baserates",
										"types"
									]
								}
							},
							"response": []
						},
						{
							"name": "EditPlatforms-OEN-1880-OEN-2139-Lower",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms/\"+pm.variables.get(\"codePlatform\"));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"   \r",
											"    pm.test(\"To check updated platform name for code: \" + pm.variables.get(\"codePlatform\"), function () {\r",
											"        pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\" )+ '_new');\r",
											"    });\r",
											"///////////////////////////////////////////////////\r",
											"    var codePlatform = pm.variables.get(\"codePlatform\");\r",
											"\r",
											"    var name = pm.variables.get(\"name\");\r",
											"    var nameOriginal = name.split('_');\r",
											"    pm.variables.set('nameOriginal', nameOriginal[0]);\r",
											"    console.log(\"Original Platform name: \" + nameOriginal[0])\r",
											"    var nameOriginalF = pm.variables.get('nameOriginal');\r",
											"\r",
											"    var platformUrl = pm.variables.get(\"platformUrl\");\r",
											"    var isActive = pm.variables.get(\"isActive\");\r",
											"    var decimalPrecision = 4;\r",
											"    var discountMarginPrecision =4;\r",
											"    console.log(pm.variables.get(\"codePlatform\"));\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Platforms/\"+pm.variables.get(\"codePlatform\"));\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        },\r",
											"        body: {\r",
											"                mode: 'raw',\r",
											"                raw: {\r",
											"                        \"code\": codePlatform,\r",
											"                        \"name\": nameOriginalF,\r",
											"                        \"platformUrl\": platformUrl,\r",
											"                        \"isActive\": isActive,\r",
											"                        \"decimalPrecision\": decimalPrecision,\r",
											"                        \"discountMarginPrecision\": discountMarginPrecision,\r",
											"                        \"helpText\": \"Test\",\r",
											"                        \"replyToEmailAddress\": \"testPlaform-QA@gmail.com\",\r",
											"                        \"dayCountConvention\": 365\r",
											"                    }\r",
											"\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"        // var jsonData = res.json();\r",
											"    \r",
											"        // pm.test(\"To check updated platform name for code: \" + pm.variables.get(\"codePlatform\"), function () {\r",
											"        //     pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\" )+ '_new');\r",
											"        // });\r",
											"\r",
											"        var url2 = pm.variables.get(\"baseURI\") + \"/api/Publications/platforms\";\r",
											"        pm.sendRequest({\r",
											"        url: url2,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: {\r",
											"                                                    \r",
											"                }\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=100\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].code.includes(\"API_\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
											"            pm.variables.set(\"name\", jsonData[i].name);\r",
											"            pm.variables.set(\"platformUrl\", jsonData[i].platformUrl);\r",
											"            pm.variables.set(\"isActive\", jsonData[i].isActive);\r",
											"            pm.variables.set(\"decimalPrecision\", 0);\r",
											"            pm.variables.set(\"discountMarginPrecision\", 0);\r",
											"            console.log(pm.variables.get(\"codePlatform\"));\r",
											"        }\r",
											"    }\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{codePlatform}}\",\r\n    \"name\": \"{{name}}_new\",\r\n    \"platformUrl\": \"{{platformUrl}}\",\r\n    \"isActive\": {{isActive}},\r\n    \"decimalPrecision\": {{decimalPrecision}},\r\n    \"discountMarginPrecision\": {{discountMarginPrecision}},\r\n    \"helpText\": \"Test\",\r\n    \"replyToEmailAddress\": \"testPlaform-QA@gmail.com\",\r\n    \"dayCountConvention\": 365\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatform}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatform}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "EditPlatform-OEN-1880-OEN-2139-Edge",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=100\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].code.includes(\"API_\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
											"            pm.variables.set(\"name\", jsonData[i].name);\r",
											"            pm.variables.set(\"platformUrl\", jsonData[i].platformUrl);\r",
											"            pm.variables.set(\"isActive\", jsonData[i].isActive);\r",
											"            pm.variables.set(\"decimalPrecision\", 28);\r",
											"            pm.variables.set(\"discountMarginPrecision\", 28);\r",
											"            console.log(pm.variables.get(\"codePlatform\"));\r",
											"        }\r",
											"    }\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"///////////////////////////////////////////////////\r",
											"    var codePlatform = pm.variables.get(\"codePlatform\");\r",
											"\r",
											"    var name = pm.variables.get(\"name\");\r",
											"    var nameOriginal = name.split('_');\r",
											"    pm.variables.set('nameOriginal', nameOriginal[0]);\r",
											"    console.log(\"Original Platform name: \" + nameOriginal[0])\r",
											"    var nameOriginalF = pm.variables.get('nameOriginal');\r",
											"\r",
											"    var platformUrl = pm.variables.get(\"platformUrl\");\r",
											"    var isActive = pm.variables.get(\"isActive\");\r",
											"    var decimalPrecision = 4;\r",
											"    var discountMarginPrecision =4;\r",
											"    console.log(pm.variables.get(\"codePlatform\"));\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Platforms/\"+pm.variables.get(\"codePlatform\"));\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        },\r",
											"        body: {\r",
											"                mode: 'raw',\r",
											"                raw: {\r",
											"                        \"code\": codePlatform,\r",
											"                        \"name\": nameOriginalF,\r",
											"                        \"platformUrl\": platformUrl,\r",
											"                        \"isActive\": isActive,\r",
											"                        \"decimalPrecision\": decimalPrecision,\r",
											"                        \"discountMarginPrecision\": discountMarginPrecision,\r",
											"                        \"helpText\": \"Test\",\r",
											"                        \"replyToEmailAddress\": \"testPlaform-QA@gmail.com\",\r",
											"                        \"dayCountConvention\": 365\r",
											"                    }\r",
											"\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"        // var jsonData = res.json();\r",
											"    \r",
											"        // pm.test(\"To check updated platform name for code: \" + pm.variables.get(\"codePlatform\"), function () {\r",
											"        //     pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\" )+ '_new');\r",
											"        // });\r",
											"\r",
											"        var url2 = pm.variables.get(\"baseURI\") + \"/api/Publications/platforms\";\r",
											"        pm.sendRequest({\r",
											"        url: url2,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: {\r",
											"                                                    \r",
											"                }\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url + err); }\r",
											"        });\r",
											"    });\r",
											"// });\r",
											"// var url = pm.variables.get(\"baseURI\");\r",
											"// url = url.concat(\"/api/Platforms/\"+pm.variables.get(\"codePlatform\")+\"/baserates/types\");\r",
											"\r",
											"// pm.sendRequest({\r",
											"//     url: url,\r",
											"//     method: 'GET',\r",
											"//     header: {\r",
											"//         'Accept': 'application/json',\r",
											"//         'Content-Type': 'application/json',\r",
											"//         'Authorization': 'bearer '+ pm.variables.get(\"accessTokenPlatformUser\")\r",
											"//       }\r",
											"      \r",
											"// }, function (err, res) {\r",
											"//     var jsonData = res.json();\r",
											"   \r",
											"//     pm.test(\"To check updated baserates: \" + pm.variables.get(\"baseRateTypeCode\"), function () {\r",
											"\r",
											"//         pm.expect(jsonData[0].baseRateTypeCode).to.eql(pm.variables.get(\"baseRateTypeCode\"));\r",
											"//     });\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{codePlatform}}\",\r\n    \"name\": \"{{name}}_new\",\r\n    \"platformUrl\": \"{{platformUrl}}\",\r\n    \"isActive\": {{isActive}},\r\n    \"decimalPrecision\": {{decimalPrecision}},\r\n    \"discountMarginPrecision\": {{discountMarginPrecision}},\r\n    \"helpText\": \"Test\",\r\n    \"replyToEmailAddress\": \"testPlaform-QA@gmail.com\",\r\n    \"emailFontColor\": \"#fafafa\",\r\n    \"emailPrimaryColor\": \"#4934eb\",\r\n    \"dayCountConvention\": 365\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatform}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatform}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "EditPlatform-OEN-1880-OEN-2139-Higher",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=100\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].code.includes(\"API_\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
											"            pm.variables.set(\"name\", jsonData[i].name);\r",
											"            pm.variables.set(\"platformUrl\", jsonData[i].platformUrl);\r",
											"            pm.variables.set(\"isActive\", jsonData[i].isActive);\r",
											"            pm.variables.set(\"decimalPrecision\", 30);\r",
											"            pm.variables.set(\"discountMarginPrecision\", 30);\r",
											"            console.log(pm.variables.get(\"codePlatform\"));\r",
											"        }\r",
											"    }\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(422);\r",
											"});\r",
											"\r",
											"pm.test(\"To check Validation error \", function () {\r",
											"    pm.expect(pm.response.text()).to.contains(\"The field DecimalPrecision must be between 0 and 28.\");\r",
											"    // pm.response.to.have.body(\"Validation error: Invalid Decimal Precision\");\r",
											"}); \r",
											"///////////////////////////////////////////////////\r",
											"    var codePlatform = pm.variables.get(\"codePlatform\");\r",
											"\r",
											"    var name = pm.variables.get(\"name\");\r",
											"    var nameOriginal = name.split('_');\r",
											"    pm.variables.set('nameOriginal', nameOriginal[0]);\r",
											"    console.log(\"Original Platform name: \" + nameOriginal[0])\r",
											"    var nameOriginalF = pm.variables.get('nameOriginal');\r",
											"\r",
											"    var platformUrl = pm.variables.get(\"platformUrl\");\r",
											"    var isActive = pm.variables.get(\"isActive\");\r",
											"    var decimalPrecision = 4;\r",
											"    var discountMarginPrecision =4;\r",
											"    console.log(pm.variables.get(\"codePlatform\"));\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Platforms/\"+pm.variables.get(\"codePlatform\"));\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        },\r",
											"        body: {\r",
											"                mode: 'raw',\r",
											"                raw: {\r",
											"                        \"code\": codePlatform,\r",
											"                        \"name\": nameOriginalF,\r",
											"                        \"platformUrl\": platformUrl,\r",
											"                        \"isActive\": isActive,\r",
											"                        \"decimalPrecision\": decimalPrecision,\r",
											"                        \"discountMarginPrecision\": discountMarginPrecision,\r",
											"                        \"helpText\": \"Test\",\r",
											"                        \"replyToEmailAddress\": \"testPlaform-QA@gmail.com\",\r",
											"                        \"dayCountConvention\": 365\r",
											"                    }\r",
											"\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"        // var jsonData = res.json();\r",
											"    \r",
											"        // pm.test(\"To check updated platform name for code: \" + pm.variables.get(\"codePlatform\"), function () {\r",
											"        //     pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\" )+ '_new');\r",
											"        // });\r",
											"\r",
											"        var url2 = pm.variables.get(\"baseURI\") + \"/api/Publications/platforms\";\r",
											"        pm.sendRequest({\r",
											"        url: url2,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: {\r",
											"                                                    \r",
											"                }\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            if (err) { console.log(url2 + err); }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{codePlatform}}\",\r\n    \"name\": \"{{name}}_new\",\r\n    \"platformUrl\": \"{{platformUrl}}\",\r\n    \"isActive\": {{isActive}},\r\n    \"decimalPrecision\": {{decimalPrecision}},\r\n    \"discountMarginPrecision\": {{discountMarginPrecision}},\r\n    \"helpText\": \"Test\",\r\n    \"replyToEmailAddress\": \"testPlaform-QA@gmail.com\",\r\n    \"dayCountConvention\": 365\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatform}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatform}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CalculationTypes",
					"item": [
						{
							"name": "Add {platformCode}/calculation-types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var  cRandom = getRandomAlphaNumeric(4,\"ABC0123DE45FGHIJ678KLMNOPQR9STUVWXYZ\");\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"pm.variables.set(\"displayName\", cRandom);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=100&skip=0\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].name.includes(\"QA_\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatformCalculationTypes\", jsonData[i].code);\r",
											"            // console.log(\"codePlatformCalculationTypes---- \"+pm.variables.get(\"codePlatformCalculationTypes\"));\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/calculation-types\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"            \r",
											"        pm.variables.set(\"calculationTypeId\", jsonData[0].id);\r",
											"        pm.variables.set(\"calculationTypeName\", jsonData[0].name);\r",
											"             \r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"var prefix = pm.variables.get(\"calculationTypeName\");\r",
											"var url1 = pm.variables.get(\"baseURI\");\r",
											"url1 = url1.concat(\"/api/platforms/\"+pm.variables.get(\"codePlatformCalculationTypes\")+\"/calculation-types\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"    \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"\r",
											"    pm.test(\"Validating calculation-types: \"+ pm.variables.get(\"codePlatformCalculationTypes\"), function () {\r",
											"        for (i = 0; i < jsonData.length; i++) \r",
											"        {\r",
											"            pm.expect(jsonData[i].calculationTypeId).to.be.eql(pm.variables.get(\"calculationTypeId\"));\r",
											"            pm.expect(jsonData[i].calculationTypeDisplayName).to.be.eql(prefix+'_QA');     \r",
											"            pm.expect(jsonData[i].platformCode).to.be.eql(pm.variables.get(\"codePlatformCalculationTypes\"));\r",
											"\r",
											"        }\r",
											"\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validating format from response body for {platformCode}/calculation-types: \"+jsonData.length, function () {\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"            pm.expect(jsonData[i]).to.have.all.keys('id', 'calculationTypeId','calculationTypeName','calculationTypeDisplayName','platformCode');\r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											"    //  var url = pm.variables.get(\"baseURI\");\r",
											"    //     url = url.concat(\"/api/platforms/\"+ pm.variables.get(\"codePlatformMessageTemplate\")+\"/message-templates\");\r",
											"    // // var messageTemplateId = pm.variables.get(\"messageTemplateId\");\r",
											"    //     pm.sendRequest({\r",
											"    //         url: url,\r",
											"    //         method: 'POST',\r",
											"    //         header: {\r",
											"    //             'Content-Type': 'application/json',\r",
											"    //             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    //         },\r",
											"    //         body: {\r",
											"    //             mode: 'raw',\r",
											"    //             raw: []\r",
											"    //         }\r",
											"    //         }, function (err, res) {\r",
											"    //         if (err) { console.log(err); }\r",
											"    //         // var jsonData = res.json();\r",
											"    //         // var newId = jsonData.id;\r",
											"    //         // console.log(\"NewUserID:\" + newId);\r",
											"    //         // pm.variables.set(\"NewUserID\", newId);\r",
											"    //     });\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"calculationTypeId\": {{calculationTypeId}},\r\n        \"name\": \"{{calculationTypeName}}\",\r\n        \"displayName\": \"{{calculationTypeName}}_QA\",\r\n        \"platformCode\": \"{{codePlatformCalculationTypes}}\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatformCalculationTypes}}/calculation-types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatformCalculationTypes}}",
										"calculation-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET {platformCode}/calculation-types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms?count=100&skip=0\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        if(jsonData[i].name.includes(\"QA_\"))\r",
											"        {\r",
											"            pm.variables.set(\"codePlatformCalculationTypes\", jsonData[i].code);\r",
											"            // console.log(\"codePlatformCalculationTypes---- \"+pm.variables.get(\"codePlatformCalculationTypes\"));\r",
											"        }\r",
											"    }\r",
											"\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Validating calculation-types: \"+ pm.variables.get(\"codePlatformCalculationTypes\"), function () {\r",
											"    for (i = 0; i < jsonData.length; i++) \r",
											"    {\r",
											"        pm.expect(jsonData[i].platformCode).to.be.eql(pm.variables.get(\"codePlatformCalculationTypes\"));\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Validating format from response body for {platformCode}/calculation-types: \"+jsonData.length, function () {\r",
											"    for (i = 0; i < jsonData.length; i++) {\r",
											"        pm.expect(jsonData[i]).to.have.all.keys('id', 'calculationTypeId','calculationTypeName','calculationTypeDisplayName','platformCode');\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{codePlatformCalculationTypes}}/calculation-types",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{codePlatformCalculationTypes}}",
										"calculation-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get CalculationTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											" \r",
											"pm.test(\"Validating CalculationTypes format and name from response body \"+jsonData.length, function () {\r",
											"  for (i = 0; i < jsonData.length; i++) {\r",
											"    pm.expect(jsonData[i]).to.have.all.keys('id', 'calculationTypeId','calculationTypeName','calculationTypeDisplayName','platformCode');\r",
											"    pm.expect(jsonData[i].calculationTypeName).to.be.oneOf(['Discount', 'Deferred Discount','Straight Discount (future)']);\r",
											"  }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/CalculationTypes",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"CalculationTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CalculationTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var  cRandom = getRandomAlphaNumeric(4,\"ABC0123DE45FGHIJ678KLMNOPQR9STUVWXYZ\");\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"pm.variables.set(\"displayName\", cRandom);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/CalculationTypes\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"        }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"            \r",
											"        pm.variables.set(\"calculationId\", jsonData[0].id);\r",
											"        pm.variables.set(\"calculationTypeId\", jsonData[0].calculationTypeId);\r",
											"        pm.variables.set(\"calculationTypeName\", jsonData[0].calculationTypeName);\r",
											"        pm.variables.set(\"codePlatformCalculationTypes\", jsonData[0].platformCode);\r",
											"        // pm.variables.set(\"platformCode\", jsonData[0].platformCode);\r",
											"             \r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"displayName\": \"{{calculationTypeName}}_QA\",\r\n    \"id\": {{calculationId}},\r\n    \"calculationTypeId\": {{calculationTypeId}},\r\n    \"name\": \"{{calculationTypeName}}\",\r\n    \"platformCode\": \"{{codePlatformCalculationTypes}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/CalculationTypes/{{calculationId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"CalculationTypes",
										"{{calculationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Permissions",
					"item": [
						{
							"name": "Get a bundles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/products/MO/roles\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"bundleroleID\",jsonData[0].id);\r",
											"    pm.variables.set(\"bundleproductCode\",jsonData[0].productCode);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200 && responseBody !== null) {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(\"Validating the keys in the response body \", function () {\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"            pm.expect(jsonData[i]).to.have.all.keys('id', 'name', 'description', 'type', 'productName', 'bundleTypeId', 'productCode', 'roleId', 'ordinal');\r",
											"        }\r",
											"    });\r",
											"    pm.test(\"Validating the roleId and  productCode\", function () {\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"            pm.expect(jsonData[i].roleId).to.be.eql(pm.variables.get(\"bundleroleID\"));\r",
											"            pm.expect(jsonData[i].productCode).to.be.eql(pm.variables.get(\"bundleproductCode\"));\r",
											"\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/permissions/roles/{{bundleroleID}}/bundles?productCode={{bundleproductCode}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"permissions",
										"roles",
										"{{bundleroleID}}",
										"bundles"
									],
									"query": [
										{
											"key": "productCode",
											"value": "{{bundleproductCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Bundles To Role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rId = pm.variables.get(\"bundleroleID\");\r",
											"\r",
											"var prCode = pm.variables.get(\"bundleproductCode\");\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/permissions/roles/\" + rId + \"/bundles?productCode=\" + prCode);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"   var x = jsonData[jsonData.length-1].name\r",
											"   console.log(x);\r",
											"  pm.variables.set(\"beforeModify\",x)\r",
											"  if(x == \"Test Base Rates / Relationships \"){\r",
											"     pm.variables.set(\"TestRelationshipPermission\",jsonData.length)\r",
											"     pm.variables.set(\"TestBaseRates\",jsonData.length-1);\r",
											"  }else{\r",
											"    pm.variables.set(\"TestRelationshipPermission\",jsonData.length-1)\r",
											"     pm.variables.set(\"TestBaseRates\",jsonData.length);  \r",
											"  }\r",
											"     \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.code == 200\r",
											"    responseBody == true\r",
											"})\r",
											"\r",
											"var rId = pm.variables.get(\"bundleroleID\");\r",
											"var prCode = pm.variables.get(\"bundleproductCode\");\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/permissions/roles/\" + rId + \"/bundles?productCode=\" + prCode);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.test(\"Validating the Corresponding Response\", function () {\r",
											"        var afterModify = jsonData[jsonData.length - 1].name\r",
											"        pm.expect(afterModify).to.be.not.eql(pm.variables.get(\"beforeModify\"))\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"id\": 1287,\r\n        \"name\": \"To Delete A\",\r\n        \"description\": \"lkjkj\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 1\r\n    },\r\n    {\r\n        \"id\": 1224,\r\n        \"name\": \"Bulk Import Relationships\",\r\n        \"description\": \"Can bulk import relationships\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 2\r\n    },\r\n    {\r\n        \"id\": 1225,\r\n        \"name\": \"View Base Rates\",\r\n        \"description\": \"Can view Base Rate list\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 3\r\n    },\r\n    {\r\n        \"id\": 1226,\r\n        \"name\": \"Manage Base Rates\",\r\n        \"description\": \"Can view Base Rate list, Can edit Base Rate list\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 4\r\n    },\r\n    {\r\n        \"id\": 68,\r\n        \"name\": \"Platform Administrator\",\r\n        \"description\": \"Platform Administrator\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 5\r\n    },\r\n    {\r\n        \"id\": 54,\r\n        \"name\": \"MO Admin\",\r\n        \"description\": \"MO Admin\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 6\r\n    },\r\n    {\r\n        \"id\": 75,\r\n        \"name\": \"MO Admin (Read)\",\r\n        \"description\": \"MO Admin (Read)\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 7\r\n    },\r\n    {\r\n        \"id\": 77,\r\n        \"name\": \"Base Rate Administrator\",\r\n        \"description\": \"Base Rate Administrator\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 8\r\n    },\r\n    {\r\n        \"id\": 1195,\r\n        \"name\": \"View Companies\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 9\r\n    },\r\n    {\r\n        \"id\": 1196,\r\n        \"name\": \"Manage Companies\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 10\r\n    },\r\n    {\r\n        \"id\": 1197,\r\n        \"name\": \"Bulk Import Companies\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 11\r\n    },\r\n    {\r\n        \"id\": 1198,\r\n        \"name\": \"View Users\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 12\r\n    },\r\n    {\r\n        \"id\": 1199,\r\n        \"name\": \"Manage Users\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 13\r\n    },\r\n    {\r\n        \"id\": 1200,\r\n        \"name\": \"Bulk Import Users\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 14\r\n    },\r\n    {\r\n        \"id\": 1201,\r\n        \"name\": \"View Relationships\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 15\r\n    },\r\n    {\r\n        \"id\": 1177,\r\n        \"name\": \"Manage Relationships\",\r\n        \"description\": \"Allows user to manage relationships\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 16\r\n    },\r\n    {\r\n        \"id\": 1203,\r\n        \"name\": \"View Groups\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 17\r\n    },\r\n    {\r\n        \"id\": 1204,\r\n        \"name\": \"Manage Groups\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 18\r\n    },\r\n    {\r\n        \"id\": 1205,\r\n        \"name\": \"View Platform Settings\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 19\r\n    },\r\n    {\r\n        \"id\": 1206,\r\n        \"name\": \"Manage Platform Settings\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 20\r\n    },\r\n    {\r\n        \"id\": 1207,\r\n        \"name\": \"View FX Rates\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 21\r\n    },\r\n    {\r\n        \"id\": 1208,\r\n        \"name\": \"View Currencies\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 22\r\n    },\r\n    {\r\n        \"id\": 1209,\r\n        \"name\": \"View Templates\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 23\r\n    },\r\n    {\r\n        \"id\": 1210,\r\n        \"name\": \"Manage Templates\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 24\r\n    },\r\n    {\r\n        \"id\": 1211,\r\n        \"name\": \"View Calculation Types\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 25\r\n    },\r\n    {\r\n        \"id\": 1212,\r\n        \"name\": \"Manage Calculation Types\",\r\n        \"description\": \"Test\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 26\r\n    },\r\n    {\r\n        \"id\": 1124,\r\n        \"name\": \"MO Platform Admin Manage CalculationTypes\",\r\n        \"description\": \"CanManageCalculationTypes\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 27\r\n    },\r\n    {\r\n        \"id\": 1127,\r\n        \"name\": \"Test Permission Company\",\r\n        \"description\": \"CompanyPermissionQA\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 28\r\n    },\r\n    {\r\n        \"id\": 1173,\r\n        \"name\": \"User Creation (Test)\",\r\n        \"description\": \"Allows user to manage user creation \",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 29\r\n    },\r\n    {\r\n        \"id\": 1178,\r\n        \"name\": \"Test Group permission\",\r\n        \"description\": \"Test Group permission\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 30\r\n    },\r\n    {\r\n        \"id\": 1180,\r\n        \"name\": \"Test Global permission\",\r\n        \"description\": \"Test Global permission\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": 31\r\n    },\r\n    {\r\n        \"id\": 1179,\r\n        \"name\": \"Test Relationship permission\",\r\n        \"description\": \"Test Relationship permission\",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": {{TestRelationshipPermission}}\r\n    },\r\n    {\r\n        \"id\": 1181,\r\n        \"name\": \"Test Base Rates / Relationships \",\r\n        \"description\": \"Mo Admin -Test Base Rates / Relationships \",\r\n        \"type\": \"Company\",\r\n        \"productName\": \"Middle Office\",\r\n        \"bundleTypeId\": 1,\r\n        \"productCode\": \"MO\",\r\n        \"roleId\": 18,\r\n        \"ordinal\": {{TestBaseRates}}\r\n    }\r\n    \r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/permissions/updateBundlesToRole",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"permissions",
										"updateBundlesToRole"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.variables.set(\"companyId\", '171'); //Setting Comapny_58"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "ENTL-E2E",
			"item": [
				{
					"name": "E2E-Update-Userpermission-MultiProduct-SingleRole",
					"item": [
						{
							"name": "Get Company by ID (roles) MultiProduct-SingleRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var expCompany = pm.variables.get(\"company\");\r",
											"console.log(expCompany);\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
											"    pm.expect(responseJSONdata.id).to.eql(parseInt(expCompany));\r",
											"}); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get the product code from an environment and find the total count of codes.",
											"var codes = pm.environment.get(\"product_codes\").toString().split(',');",
											"console.log(\"Product codes: \"+codes);",
											"console.log(\"Total Product Count: \"+ codes.length);",
											"pm.collectionVariables.set(\"productCount\", codes.length-1);",
											"",
											"//Using counter select te 1st code from array of product code and so on..",
											"var counter = parseInt(pm.collectionVariables.get('count'));",
											"pm.variables.set('code', codes[counter]);",
											"var currentCode = pm.variables.get('code'); ",
											"console.log(\"current product code---->\"+currentCode);",
											"console.log(\"Counter:\"+counter);",
											"",
											"//This is used to compare current product role with specific code. If code matches, it will read the product specific array of company id's to variable 'companies'.",
											"var companies;",
											"",
											"if(currentCode === \"SCF\")",
											"{",
											"    console.log(\"In SCF companies loop\");",
											"    companies = pm.environment.get(\"SCF_Companies\").split(',');",
											"    console.log(\"SCF comapny ids: \"+companies);",
											"}else if( currentCode === \"AR\")",
											"{",
											"    console.log(\"In AR companies loop\");",
											"    companies = pm.environment.get(\"AR_Companies\").split(',');",
											"    // var tempCmp_arr[] = pm.environment.get(\"AR_Companies\").split(',');",
											"    // companies.splice(0, codes.length, ...tempCmp_arr);",
											"",
											"    console.log(\"AR comapny ids: \"+companies);",
											"",
											"}else if( currentCode === \"INS\")",
											"{",
											"    console.log(\"In INS companies loop\");",
											"    companies = pm.environment.get(\"INS_Companies\").split(',');",
											"    console.log(\"INS comapny ids: \"+companies);",
											"",
											"}",
											"",
											"//This counter is used to traverse company id array and setting the current value to the variable 'company'",
											"var c_counter = pm.collectionVariables.get('cmp_counter');",
											"pm.variables.set('company', companies[c_counter]);",
											"console.log(\"Company counter:\"+c_counter);",
											"",
											"//This code is used to find the total count of product specific companies in the array.",
											"pm.collectionVariables.set('cmp_count', companies.length -1) ;",
											"console.log(\"Total Company------>:\"+pm.collectionVariables.get(\"cmp_count\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{company}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{company}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_User MultiProduct-SingleRole",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//This code is used to generate random unique alphanumeric string for new user generation.",
											"var user = getRandomAlphaNumeric(7,\"0A1BC2EF3GH4IJ5KL6MNO7PQ8RS0TU0VW1XY2Z\");",
											"pm.variables.set(\"U_ID\", user);",
											"",
											"function getRandomAlphaNumeric(len, chars) {",
											"    var result = '';",
											"    for (var i = len; i > 0; i--)",
											"    { ",
											"     result += chars[Math.floor(Math.random() * chars.length)];",
											"    }",
											"     return result;",
											"}",
											"",
											"//New user is created in the company selected in the previous script 'Get Company by ID (roles)'",
											"var companyId = pm.variables.get(\"company\") ; ",
											"pm.variables.set(\"companyId\", companyId);",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\"+ companyId );",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
											"      }",
											"}, ",
											"function (err, res) {",
											"    if (err) {console.log(\"error :\" + err); }",
											"    var jsonData = res.json();",
											"    console.log(jsonData);",
											"",
											"    pm.variables.set(\"cid\", jsonData.id);",
											"    pm.variables.set(\"salesforceId\", jsonData.salesforceId);",
											"    pm.variables.set(\"name\", jsonData.name);",
											"    pm.variables.set(\"country\", jsonData.country);",
											"    pm.variables.set(\"stateOfIncorporation\", jsonData.stateOfIncorporation);",
											"    pm.variables.set(\"countryOfJurisdiction\", jsonData.countryOfJurisdiction);",
											"    pm.variables.set(\"isActive\", jsonData.isActive);",
											"    pm.variables.set(\"updatedOn\", jsonData.updatedOn);",
											"    pm.variables.set(\"users\", jsonData.users);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var Id= pm.variables.get(\"U_ID\");",
											"",
											"pm.test(\"To check user is created: \" + jsonData.id, function () ",
											"{",
											"    pm.expect(jsonData.userName).to.eql('lqxnga+api_'+Id+'.qa@gmail.com');",
											"});",
											"",
											"console.log(\"NEW USER--->\"+jsonData.id);",
											"pm.environment.unset(\"UserID_E2E_new\");",
											"pm.environment.set(\"UserID_E2E_new\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 280,\r\n    \"salesforceId\": \"a090j000001Tq8XAAS\",\r\n    \"firstName\": \"FN\",\r\n    \"middleInitial\": \"U\",\r\n    \"lastName\": \"LN_{{U_ID}}\",\r\n    \"email\": \"lqxnga+api_{{U_ID}}.qa@gmail.com\",\r\n    \"companyId\": {{companyId}},\r\n    \"isActive\": false,\r\n    \"userName\": \"lqxnga+api_{{U_ID}}.qa@gmail.com\",\r\n    \"title\": \"QA\",\r\n    \"workPhone\": \"45657668\",\r\n    \"isLqxUser\": false,\r\n    \"updatedOn\": \"2019-11-12T11:34:00.0066667\",\r\n    \"isDeleted\": false,\r\n    \"isPortalUser\": true,\r\n    \"isAuthorizedSignatory\": false,\r\n    \"isAuthorizedAdmin\": true,\r\n    \"isPlatformUser\": true,\r\n    \"company\": {\r\n        \"id\": {{cid}},\r\n        \"salesforceId\": \"{{salesforceId}}\",\r\n        \"name\": \"{{name}}\",\r\n        \"country\": \"{{country}}\",\r\n        \"stateOfIncorporation\": \"{{stateOfIncorporation}}\",\r\n        \"countryOfJurisdiction\": \"{{countryOfJurisdiction}}\",\r\n        \"isActive\": {{isActive}},\r\n        \"updatedOn\": \"{{updatedOn}}\",\r\n        \"users\": []\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate_User MultiProduct-SingleRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);",
											"});",
											"",
											"pm.test(\"To check user is  Active \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uId = pm.environment.get(\"UserID_E2E_new\") ;   \r",
											"pm.variables.set(\"userId\", uId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"{{userId}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/users/{{userId}}?command=activate",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"{{userId}}"
									],
									"query": [
										{
											"key": "command",
											"value": "activate"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User Permissions MultiProduct-SingleRole",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//This code is used to get current company and code.",
											"var companyId = pm.variables.get(\"company\") ; //499;",
											"var currentCode = pm.variables.get('code'); // pm.environment.get(\"code\");",
											"console.log(\"***********\"+currentCode);",
											"",
											"//This array conatains the read, write permissions.",
											"var permissionArray = [\"Read\",\"Write\"];",
											"",
											"//This request is used for getting company roles for the current products from which we get role id and role name.",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\"+ companyId + \"/roles?productCode=\" + currentCode + \"&isActive=true\");",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
											"      }",
											"}, ",
											"function (err, res) {",
											"        if (err) {console.log(\"error :\" + err); };",
											"        var jsonData = res.json();",
											"        var roleIdNew;",
											"        var roleNameNew;",
											"        // var jsonData = JSON.parse(responseBody);",
											"        for(i=0;i<jsonData.length;i++)",
											"        {",
											"            console.log(\"--------update permission -- for loop\");",
											"            if(jsonData[i].isActive == true)",
											"            {",
											"                if(jsonData[i].roleName.includes(\"Supplier\") && jsonData[i].participantId != 0)",
											"                {",
											"                    console.log(\"--------update permission -- if loop -- supplier\");",
											"",
											"                    roleIdNew = jsonData[i].roleId;",
											"                    roleNameNew = jsonData[i].roleName;",
											"                    pm.variables.set(\"roldeId\", roleIdNew);",
											"                    pm.variables.set(\"roleName\", roleNameNew);",
											"                    console.log(\"roleId--->\"+pm.variables.get(\"roldeId\"));",
											"                    console.log(\"roleName--->\"+pm.variables.get(\"roleName\"));",
											"                    break;",
											"",
											"                }else if(jsonData[i].roleName.includes(\"Funder\") && jsonData[i].participantId != 0)",
											"                {",
											"                    console.log(\"--------update permission -- if loop -- Funder\");",
											"",
											"                    roleIdNew = jsonData[i].roleId;",
											"                    roleNameNew = jsonData[i].roleName;",
											"                    pm.variables.set(\"roldeId\", roleIdNew);",
											"                    pm.variables.set(\"roleName\", roleNameNew);",
											"                    console.log(\"roleId--->\"+pm.variables.get(\"roldeId\"));",
											"                    console.log(\"roleName--->\"+pm.variables.get(\"roleName\"));",
											"                    break;",
											"",
											"                }",
											"                else (jsonData[i].roleName.includes(\"Buyer\") && jsonData[i].participantId !== 0)",
											"                {",
											"                    console.log(\"--------update permission -- if loop -- Buyer\");",
											"",
											"                    roleIdNew = jsonData[i].roleId;",
											"                    roleNameNew = jsonData[i].roleName;",
											"                    pm.variables.set(\"roldeId\", roleIdNew);",
											"                    pm.variables.set(\"roleName\", roleNameNew);",
											"                    console.log(\"roleId--->\"+pm.variables.get(\"roldeId\"));",
											"                    console.log(\"roleName--->\"+pm.variables.get(\"roleName\"));",
											"                    break;",
											"",
											"                }",
											"            }",
											"        }",
											"        ",
											"        roleNameNew = String(pm.variables.get(\"roleName\"));",
											"        var currentRole = roleNameNew.split('- ');",
											"        pm.variables.set('currentRole', currentRole[1]);",
											"        console.log(\"Current Company Role: \"+currentRole[1]);",
											"        ",
											"        //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
											"        // var permissioncount = pm.variables.get(\"permissioncounter\");",
											"        var permissioncount1 = pm.collectionVariables.get('permissioncount');",
											"        pm.collectionVariables.set('pa_count', permissionArray.length - 1) ;",
											"",
											"        pm.variables.set('permission', permissionArray[permissioncount1]);",
											"        console.log(\"permissioncount:\"+permissioncount1);",
											"        ",
											"        //This 'combined' string is generated to so that we can get user permissions details",
											"        if(currentCode== 'INS' && currentRole[1] == 'Insurance Carrier')",
											"        {",
											"            combinedStr = currentCode + \" IC \"+permissionArray[permissioncount1];",
											"            pm.variables.set(\"combinedStr\",combinedStr);",
											"            console.log(\"combinedStr------>\"+combinedStr);",
											"        }",
											"        else if(currentCode== 'INS' && currentRole[1] == 'Insured Party')",
											"        {",
											"            combinedStr = currentCode + \" IP \"+permissionArray[permissioncount1];",
											"            pm.variables.set(\"combinedStr\",combinedStr);",
											"            console.log(\"combinedStr------>\"+combinedStr);",
											"        }",
											"        else",
											"        {",
											"            combinedStr = currentCode + \" \"+ currentRole[1] + \" \"+permissionArray[permissioncount1];",
											"            pm.variables.set(\"combinedStr\",combinedStr);          ",
											"            console.log(\"combinedStr------>\"+combinedStr);",
											"        }",
											"        var uId = pm.environment.get(\"UserID_E2E_new\") ;   ",
											"        var url = pm.variables.get(\"baseURI\");",
											"        url = url.concat(\"/api/userpermissions/\"+ uId + \"/roles/\"+pm.variables.get(\"roldeId\") +\"?entityType=Company\");",
											"        pm.sendRequest({",
											"            url: url,",
											"            method: 'GET',",
											"            header: {",
											"                'Accept': 'application/json',",
											"                'Content-Type': 'application/json',",
											"                'x-platform-code':pm.environment.get(\"platformCode\"),",
											"                'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
											"              }",
											"        }, ",
											"        function (err, res) {",
											"            if (err) {console.log(\"error :\" + err); }",
											"            var jsonData = res.json();",
											"            var permissionName;",
											"            for(i=0; i< jsonData.length; i++)",
											"            {",
											"                if(jsonData[i].permissionBundleName.includes(combinedStr))",
											"                {   ",
											"                    if(jsonData[i].permissionBundleName.includes(\"Read\"))",
											"                    {",
											"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
											"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
											"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
											"                        pm.variables.set(\"isEntitled\",true);",
											"                        break;",
											"                    }",
											"                    else",
											"                    {",
											"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
											"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
											"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
											"                        pm.variables.set(\"isEntitled\",true);",
											"                        break;",
											"                    }",
											"                }              ",
											"            }",
											"            pm.variables.set(\"userId\", pm.environment.get(\"UserID_E2E_new\"));",
											"     });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
											" });\r",
											"\r",
											"//This code used for getting user permissions and verifying with updated permissions.\r",
											"var userId = pm.environment.get(\"UserID_E2E_new\");\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Company\";\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"   \r",
											"    pm.test(\"Validate the userpermissions updated for user \" + userId + \" returned for Company: \", function(){\r",
											"        var permissionFlag = false;\r",
											"        for( var i=0; i< jsonData.length; i++)\r",
											"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
											"            console.log(\"------------\"+pm.variables.get(\"combinedStr\"));\r",
											"            if (jsonData[i].permissionBundleName == pm.variables.get(\"combinedStr\"))\r",
											"            {\r",
											"                permissionFlag = true;\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"        pm.expect(permissionFlag).to.be.eql(true);\r",
											"   });\r",
											"   \r",
											"////////////////////////////////////////////////////////////////////////////////////////////\r",
											"\r",
											"//This code will execute till we complete the permission array counter\r",
											"    var permissioncounter = pm.collectionVariables.get('permissioncount');\r",
											"    let permissionLimit = pm.collectionVariables.get(\"pa_count\");\r",
											"    let found = false;\r",
											"    // let limit = 4;\r",
											"    console.log(\"limit:\"+permissionLimit);\r",
											"    console.log(\"permissioncounter:\"+permissioncounter);\r",
											"    console.log(\"found:\"+found);\r",
											"    if(permissioncounter < permissionLimit && !found)\r",
											"    {\r",
											"        console.log(\"setting next request\");\r",
											"        postman.setNextRequest(\"Update User Permissions MultiProduct-SingleRole\");\r",
											"        pm.collectionVariables.unset(\"permissioncount\");\r",
											"        pm.variables.unset(\"roleName\");\r",
											"        pm.variables.unset(\"roldeId\");\r",
											"        // pm.variables.set(\"permissioncounter\", permissioncounter+1);\r",
											"        pm.collectionVariables.set(\"permissioncount\", parseInt(permissioncounter)+1) ;\r",
											"        console.log(\"--------->\"+permissioncounter);\r",
											"    }else if(permissioncounter === permissionLimit)\r",
											"    {\r",
											"        console.log(\"Condition match! Execution loop completed\");\r",
											"        pm.collectionVariables.set(\"permissioncount\", 0) ;\r",
											"        pm.collectionVariables.set(\"pa_count\",0);\r",
											"        console.log(\"Counter reset to 0\");\r",
											"    }\r",
											"    //permissionDecide++;   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"userParticipantId\": {{userParticipantId}},\n        \"permissionBundleId\": {{permissionBundleId}},\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\n        \"isEntitled\": {{isEntitled}}\n    }\n] \n"
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{userId}}",
										"roles",
										"{{roldeId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User MultiProduct-SingleRole",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"uId\", pm.variables.get(\"UserID_E2E_new\") );   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function()",
											"{",
											"    pm.response.to.have.status(200);",
											"});",
											"var expUserId = pm.variables.get(\"UserID_E2E_new\");",
											"",
											"pm.test(\"To check user Successfully deleted: \"+ expUserId, function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result).to.eql(\"User \"+expUserId+ \" deleted\");",
											"    pm.environment.unset(\"UserID_E2E_new\");",
											"",
											"});",
											"",
											"//This code will execute till we complete the company array counter",
											"var cmp_counter = pm.collectionVariables.get('cmp_counter');",
											"let c_limit = pm.collectionVariables.get(\"cmp_count\");",
											"let c_found = false;",
											"console.log(\"c_limit:\"+c_limit);",
											"console.log(\"cmp_counter:\"+cmp_counter);",
											"",
											"if(cmp_counter < c_limit && !c_found)",
											"{",
											"    console.log(\"setting next request\");",
											"    postman.setNextRequest(\"Get Company by ID (roles) MultiProduct-SingleRole\");",
											"    pm.collectionVariables.unset(\"cmp_counter\");",
											"    pm.collectionVariables.set(\"cmp_counter\", parseInt(cmp_counter)+1);",
											"    console.log(\"--------->\"+cmp_counter);",
											"",
											"}else if(cmp_counter === c_limit)",
											"{",
											"    console.log(\"Condition match! Execution loop completed\");",
											"    pm.collectionVariables.set(\"cmp_counter\", 0);",
											"    pm.collectionVariables.set(\"cmp_count\",0);",
											"    console.log(\"Counter reset to \"+pm.collectionVariables.get(\"cmp_counter\"));",
											"    ",
											"    //This code will execute till we complete the product code array counter",
											"    var counter = parseInt(pm.collectionVariables.get('count'));",
											"    let limit = parseInt(pm.collectionVariables.get('productCount'));",
											"    let found = false;",
											"    console.log(\"limit:\"+limit);",
											"    console.log(\"found:\"+found);",
											"    ",
											"    if(counter < limit && !found)",
											"    {",
											"        console.log(\"setting next request\");",
											"        console.log(\"Product counter before increment:\"+counter);",
											"        postman.setNextRequest(\"Get Company by ID (roles) MultiProduct-SingleRole\");",
											"        pm.collectionVariables.unset(\"count\");",
											"        pm.collectionVariables.set(\"count\", parseInt(counter)+1);",
											"    }else if(counter === limit)",
											"    {",
											"        console.log(\"Condition match! Execution loop completed\");",
											"        pm.collectionVariables.set(\"count\", 0);",
											"        pm.collectionVariables.set('productCount',0);",
											"        console.log(\"Counter reset to \"+pm.collectionVariables.get(\"count\"));",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Users/{{uId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Users",
										"{{uId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Note: (Date of comment - 23/04/2020)\n\nRemoving AR buyer company (company id - 528 - API_AR_Buyer) from array set in the environment variable.\n\nWe can not add AR buyer read/write permission because checkbox is not there. I think this is yet to implement. (Not a high priority at this time --> Comment in OEN-409) \n\nThis implementation is not in the current release. ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "E2E-Onboard-Initial-company-and-user-to-new-platform",
					"item": [
						{
							"name": "Create_accessToken_PlatformUser_Capstone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" \r",
											"let accessToken_User = jsonData.access_token;\r",
											"console.log(\"Top Level\", accessToken_User);\r",
											"pm.variables.set('accessToken_PlatformUser_Capstone', accessToken_User);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{platformUser_Other}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Liquidx123",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid {{audience}} offline_access",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{audience}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{B2C_URI_Other}}",
									"host": [
										"{{B2C_URI_Other}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Company cross platform",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);\r",
											"pm.variables.set(\"recordTypeId\", 1);\r",
											"\r",
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        {\r",
											"            var countryName =  jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \"+countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"code1\", countryCode);\r",
											"            console.log(\"country code: \"+countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        console.log(\"state Name: \"+stateName);\r",
											"        pm.variables.set(\"stateRegion\", stateName);     \r",
											"        var stateId = jsonData[0].id;\r",
											"        console.log(\"state Id: \"+stateId);\r",
											"        pm.variables.set(\"stateRegionId\", stateId);    \r",
											"\r",
											"        \r",
											"        var url2 = pm.variables.get(\"baseURI\");\r",
											"        url2 = url2.concat(\"/api/institution-types\");\r",
											"        pm.sendRequest({\r",
											"        url: url2,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"        }, function (err, res) {\r",
											"            var jsonData = res.json();\r",
											"            var institutionType = jsonData[0].id;\r",
											"            console.log(\"institutionType id: \"+institutionType);\r",
											"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
											"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
											"\r",
											"            var url3 = pm.variables.get(\"baseURI\");\r",
											"            url3 = url3.concat(\"/api/sectors\");\r",
											"            pm.sendRequest({\r",
											"            url: url3,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var sectorId = jsonData[5].id;\r",
											"                console.log(\"sector id: \"+sectorId);\r",
											"                console.log(\"sector name: \"+jsonData[5].name);\r",
											"                pm.variables.set(\"sectorId\", sectorId);   \r",
											"                \r",
											"                var url4 = pm.variables.get(\"baseURI\");\r",
											"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
											"                pm.sendRequest({\r",
											"                url: url4,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var industryId = jsonData[0].id;\r",
											"                    console.log(\"industry Id : \"+industryId);\r",
											"                    console.log(\"industry name: \"+jsonData[0].name);\r",
											"                    pm.variables.set(\"industryId\", industryId);   \r",
											"\r",
											"                }); \r",
											"            }); \r",
											"        });\r",
											"    });\r",
											"});        "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for newly created company is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.id;\r",
											"pm.environment.set(\"newLocalCrossCompany\",expCmpId)\r",
											"pm.environment.set(\"CrossPlatformCmpName\",jsonData.legalEntityName);\r",
											"\r",
											"pm.test(\"To check new company is created: \" + expCmpId, function () {\r",
											"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegCrossCompany_' + suffix);\r",
											"});\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"/update-status?command=activate\";\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'PUT',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: {\r",
											"           \r",
											"            \"id\": expCmpId,                                       \r",
											"        }\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check activate company has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    // var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"    // pm.sendRequest({\r",
											"    // url: url1,\r",
											"    // method: 'POST',\r",
											"    // header: {\r",
											"    //     'Content-Type': 'application/json',\r",
											"    //     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    // },\r",
											"    // body: {\r",
											"    //     mode: 'raw',\r",
											"    //     raw: {\r",
											"                                                  \r",
											"    //         }\r",
											"    //     }\r",
											"    // }, function (err, res) {\r",
											"    //     if (err) { console.log(url + err); }\r",
											"    // });\r",
											"\r",
											"    var url2 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=5000\";\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        var jsonData1 = res.json();\r",
											"        for (i = 0; i < jsonData1.length; i++) {\r",
											"            if (jsonData1[i].companyId == expCmpId) {\r",
											"                \r",
											"                pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
											"                    pm.expect(jsonData1[i].company.recordTypeId).to.eql(1);\r",
											"                    pm.expect(jsonData1[i].company.isActive).to.eql(true);\r",
											"\r",
											"                });\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"legalEntityName\": \"EntlRegCrossCompany_{{entityName}}\",\r\n    \"name\": \"EntlRegCrossCompany_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "getCrossCompany",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var expCmpId = pm.variables.get(\"newLocalCrossCompany\");\r",
											"\r",
											"for (i = 0; i < jsonData.length; i++) {\r",
											"    if (jsonData[i].companyId == expCmpId) {\r",
											"         \r",
											"        pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
											"            pm.expect(jsonData[i].company.recordTypeId).to.eql(1);\r",
											"            pm.expect(jsonData[i].company.isActive).to.eql(true);\r",
											"        });\r",
											"        var id = jsonData[i].id;\r",
											"        var name = jsonData[i].name;\r",
											"        pm.variables.set(\"CrossPlatformCmpID\",id);\r",
											"        pm.variables.set(\"CrossPlatformCmpName\",name);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//  for(var i=0; i<jsonData.length; i++)\r",
											"//     {\r",
											"//         if(jsonData[i].name.includes(\"API_CmpUpdated_\"))\r",
											"//         {\r",
											"//             var id = jsonData[i].id;\r",
											"//             var name = jsonData[i].name;\r",
											"//             pm.variables.set(\"CrossPlatformCmpID\",id);\r",
											"//             pm.variables.set(\"CrossPlatformCmpName\",name);\r",
											"\r",
											"//             break\r",
											"//         }\r",
											"//     }\r",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/companies?format=company-only&count=5000",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "format",
											"value": "company-only"
										},
										{
											"key": "count",
											"value": "5000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Company to cross platform",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//API_CmpUpdated_CVK\r",
											"\r",
											"//*******LQX*********** */\r",
											"//1. {{baseURI}}/api/companies?format=company-only&productCode={{code}}&count=1000\r",
											"//take company name and id starting from API_CmpUpdated_\r",
											"  \r",
											"// 2. https://lqx-ent-test2.azurewebsites.net/api/companies/search?platformCode=Capstone&companyName=API_CmpUpdated_CVK&include=id,name\r",
											"// verify response \r",
											"\r",
											"// var url = pm.variables.get(\"baseURI\");\r",
											"// url = url.concat(\"/api/companies?format=company-only&count=2000\");\r",
											"\r",
											"// pm.sendRequest({\r",
											"//     url: url,\r",
											"//     method: 'GET',\r",
											"//     header: {\r",
											"//         'Accept': 'application/json',\r",
											"//         'Content-Type': 'application/json',\r",
											"//         'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"//       }\r",
											"      \r",
											"// }, function (err, res) {\r",
											"//     var jsonData = res.json();\r",
											"//     for(var i=0; i<jsonData.length; i++)\r",
											"//     {\r",
											"//         if(jsonData[i].name.includes(\"API_CmpUpdated_\"))\r",
											"//         {\r",
											"//             var id = jsonData[i].id;\r",
											"//             var name = jsonData[i].name;\r",
											"//             pm.variables.set(\"CrossPlatformCmpID\",id);\r",
											"//             pm.variables.set(\"CrossPlatformCmpName\",name);\r",
											"\r",
											"//             break\r",
											"//         }\r",
											"//     }\r",
											"    \r",
											"    var url1 = pm.variables.get(\"baseURI\");\r",
											"    // url1 = url1.concat(\"/api/companies/search?platformCode=\"+ pm.environment.get(\"PlatformCode_Other\")+\"&companyName=\"+ pm.variables.get(\"CrossPlatformCmpName\")+\"&include=id,name\");\r",
											"    url1 = url1.concat(\"/api/companies/search?platformCode=\"+ pm.environment.get(\"platformCode\")+\"&companyName=\"+ pm.variables.get(\"CrossPlatformCmpName\")+\"&include=id,name\");\r",
											"    pm.sendRequest({\r",
											"        url: url1,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        for(var i=0; i<jsonData.length; i++)\r",
											"        {\r",
											"            pm.expect(jsonData[i].id).to.be.eql(pm.variables.get(\"newLocalCrossCompany\"));\r",
											"            pm.expect(jsonData[i].name).to.be.eql(pm.variables.get(\"CrossPlatformCmpName\"));\r",
											"        \r",
											"        }\r",
											"    });\r",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([204,200]);\r",
											"});\r",
											"//************* CAPSTONE***************** */\r",
											"\r",
											"\r",
											"//get company by id\r",
											"//check active status\r",
											"//check company has no entitlemnts - https://lqx-ent-test2.azurewebsites.net/api/companies/9996/entitlements\r",
											"var url = pm.variables.get(\"baseURI_Other\");\r",
											"url = url.concat(\"/api/companies/\"+pm.variables.get(\"newLocalCrossCompany\"));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken_PlatformUser_Capstone\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.expect(jsonData.isActive).to.be.eql(true);\r",
											"\r",
											"    var url = pm.variables.get(\"baseURI_Other\");\r",
											"    url = url.concat(\"/api/companies/\"+pm.variables.get(\"newLocalCrossCompany\")+\"/entitlements\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code': pm.environment.get(\"PlatformCode_Other\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken_PlatformUser_Capstone\")\r",
											"        }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        for(var i=0; i<jsonData.length; i++)\r",
											"        {\r",
											"            pm.expect(jsonData[i].isActive).to.be.eql(false);\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"{{PlatformCode_Other}}\"",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Companies/{{newLocalCrossCompany}}/platforms/{{PlatformCode_Other}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Companies",
										"{{newLocalCrossCompany}}",
										"platforms",
										"{{PlatformCode_Other}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create-User-crossPlatform",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"U_ID\", pm.variables.get(\"entityName\"));",
											"",
											"var companyId = pm.variables.get(\"newLocalCrossCompany\");",
											"pm.variables.set('companyId', companyId);",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\" + companyId);",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"    }",
											"},",
											"function (err, res) {",
											"    if (err) { console.log(\"error :\" + err); }",
											"    var jsonData = res.json();",
											"    console.log(jsonData);",
											"",
											"    pm.variables.set(\"cid\", jsonData.id);",
											"    pm.variables.set(\"salesforceId\", jsonData.salesforceId);",
											"    pm.variables.set(\"name\", jsonData.name);",
											"    pm.variables.set(\"country\", jsonData.country);",
											"    pm.variables.set(\"stateOfIncorporation\", jsonData.stateOfIncorporation);",
											"    pm.variables.set(\"countryOfJurisdiction\", jsonData.countryOfJurisdiction);",
											"    pm.variables.set(\"isActive\", jsonData.isActive);",
											"    pm.variables.set(\"updatedOn\", jsonData.updatedOn);",
											"    pm.variables.set(\"users\", jsonData.users);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var Id = pm.variables.get(\"U_ID\");",
											"",
											"pm.test(\"To check user is created: \" + jsonData.id, function () {",
											"    pm.expect(jsonData.userName).to.eql('lqxscf+EntlRegCrossPlatformUser_' + Id+'@gmail.com');",
											"});",
											"console.log(\"NEW CrossPlatform User --->\" + jsonData.id);",
											"pm.variables.set(\"crossPlatformUser\", jsonData.id);",
											"",
											"console.log(\"crossPlatformUser name--->\" + jsonData.userName);",
											"pm.variables.set(\"crossPlatformUserName\",jsonData.userName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 280,\r\n    \"salesforceId\": \"a090j000001Tq8XAAS\",\r\n    \"firstName\": \"apiFN_{{U_ID}}\",\r\n    \"middleInitial\": \"X\",\r\n    \"lastName\": \"apiLN_{{U_ID}}\",\r\n    \"email\": \"lqxscf+EntlRegCrossPlatformUser_{{U_ID}}@gmail.com\",\r\n    \"companyId\": {{companyId}},\r\n    \"isActive\": false,\r\n    \"userName\": \"lqxscf+EntlRegCrossPlatformUser_{{U_ID}}@gmail.com\",\r\n    \"title\": \"QA\",\r\n    \"workPhone\": \"9087654321\",\r\n    \"isLqxUser\": false,\r\n    \"updatedOn\": \"2019-11-12T11:34:00.0066667\",\r\n    \"isDeleted\": false,\r\n    \"isPortalUser\": true,\r\n    \"isAuthorizedSignatory\": false,\r\n    \"isAuthorizedAdmin\": true,\r\n    \"isPlatformUser\": true,\r\n    \"company\": {\r\n        \"id\": {{cid}},\r\n        \"salesforceId\": \"{{salesforceId}}\",\r\n        \"name\": \"{{name}}\",\r\n        \"country\": \"{{country}}\",\r\n        \"stateOfIncorporation\": \"{{stateOfIncorporation}}\",\r\n        \"countryOfJurisdiction\": \"{{countryOfJurisdiction}}\",\r\n        \"isActive\": {{isActive}},\r\n        \"updatedOn\": \"{{updatedOn}}\",\r\n        \"users\": []\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate-User-crossPlatform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"To check user is  Active \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"userId\", pm.variables.get(\"crossPlatformUser\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"{{userId}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/users/{{userId}}?command=activate",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"{{userId}}"
									],
									"query": [
										{
											"key": "command",
											"value": "activate"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add user to cross platform",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"userId\", pm.variables.get(\"crossPlatformUser\"));\r",
											"//API_CmpUpdated_CVK\r",
											"\r",
											"//*******LQX*********** */\r",
											"//1. take company name and id starting from previous call\r",
											"  \r",
											"// 2. https://lqx-ent-test2.azurewebsites.net/api/companies/9996/users\r",
											"// get last name  - UserD4E\r",
											"//TestUser+api_D4E@gmail.com\r",
											"\r",
											"// 3. verify last name and get user id, company name\r",
											"// https://lqx-ent-test2.azurewebsites.net/api/Users/search?lastName=apiLN_P0A&platformCode=Capstone\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"//************* CAPSTONE***************** */\r",
											"\r",
											"\r",
											"//get user by id\r",
											"//check active status\r",
											"// should have no user permission - https://lqx-ent-test2.azurewebsites.net/api/userpermissions/393483?entityType=Company\r",
											"\r",
											"var url = pm.variables.get(\"baseURI_Other\");\r",
											"url = url.concat(\"/api/users/\"+pm.variables.get(\"crossPlatformUser\"));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"PlatformCode_Other\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken_PlatformUser_Capstone\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    pm.expect(jsonData.isActive).to.be.eql(true);\r",
											"});\r",
											"//     var url = pm.variables.get(\"baseURI_Other\");\r",
											"//     url = url.concat(\"/api/companies/\"+pm.variables.get(\"CrossPlatformCmpID\")+\"/entitlements\");\r",
											"\r",
											"//     pm.sendRequest({\r",
											"//         url: url,\r",
											"//         method: 'GET',\r",
											"//         header: {\r",
											"//             'Accept': 'application/json',\r",
											"//             'Content-Type': 'application/json',\r",
											"//             'Authorization': 'bearer '+ pm.variables.get(\"accessToken_PlatformUser_Capstone\")\r",
											"//         }\r",
											"        \r",
											"//     }, function (err, res) {\r",
											"//         var jsonData = res.json();\r",
											"//         for(var i=0; i<jsonData.length; i++)\r",
											"//         {\r",
											"//             pm.expect(jsonData[i].isActive).to.be.eql(false);\r",
											"//         }\r",
											"//     });\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"{{PlatformCode_Other}}\"",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Users/{{userId}}/platforms",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Users",
										"{{userId}}",
										"platforms"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Permission-Enforcement-ENT-2226",
					"item": [
						{
							"name": "PUT-Set Permission ViewPlatformSettings",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"    var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"              //  console.log('respomce===>',jsonData)\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    \r",
											"                    if( jsonData[i].permissionBundleName === \"View Platform Settings\"){\r",
											"                       \r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                       \r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate the permission set as only View Platform Settings\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"View Platform Settings\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(true);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": true,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Permission ViewPlatformSettings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"To check User Entitlements: \" + responseJSONdata.length);\r",
											"\r",
											"pm.test(\"To check User Entitlements NOT NULL\", function () {\r",
											"      pm.expect(responseJSONdata.body).not.eql(null);\r",
											"}); \r",
											"\r",
											"pm.test(\"To check Read access to the Platform Settings tab\",function(){\r",
											"    for(i=0; i<responseJSONdata.length; i++)\r",
											"    {\r",
											"        if(responseJSONdata[i].productCode === \"MO\")\r",
											"            {\r",
											"                pm.test(\"To check User Entitlements of Access View Platform Settings \" , function () \r",
											"                {\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewPlatformSettings\");\r",
											"                })\r",
											"            }\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenMOUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
									"host": [
										"{{baseURI_userPermission}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Unset Permission ViewPlatformSettings",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"View Platform Settings\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"}); \r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate Remove the permission View Platform Settings\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"View Platform Settings\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(false);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": false,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Set Permission EditPlatformSettings",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"Manage Templates\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate the permission set as Edit Platform Settings\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"Manage Templates\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(true);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": true,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET-Permission EditPlatformSettings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"To check User Entitlements: \" + responseJSONdata.length);\r",
											"\r",
											"pm.test(\"To check User Entitlements NOT NULL\", function () {\r",
											"      pm.expect(responseJSONdata.body).not.eql(null);\r",
											"}); \r",
											"\r",
											"pm.test(\"To check Read access to the Platform Settings tab\",function(){\r",
											"    console.log('data===>',responseJSONdata)\r",
											"    for(i=0; i<responseJSONdata.length; i++)\r",
											"    {\r",
											"        if(responseJSONdata[i].productCode === \"MO\")\r",
											"            {\r",
											"    \r",
											"                \r",
											"                pm.test(\"To check User Entitlements of Access Edit Platform Settings \" , function () \r",
											"                {\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditTemplates\");\r",
											"                     pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewTemplates\");\r",
											"                })\r",
											"            }\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenMOUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
									"host": [
										"{{baseURI_userPermission}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Unset Permission EditPlatformSettings",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"Manage Templates\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate Remove the permission Edit Platform Settings\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"Manage Templates\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(false);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": false,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Set Permission ViewFXRates",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"View FX Rates\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate the permission set as View FX Rates\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"View FX Rates\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(true);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": true,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET-Permission ViewFXRates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"To check User Entitlements: \" + responseJSONdata.length);\r",
											"\r",
											"pm.test(\"To check User Entitlements NOT NULL\", function () {\r",
											"      pm.expect(responseJSONdata.body).not.eql(null);\r",
											"}); \r",
											"\r",
											"pm.test(\"To check Read access to the Platform Settings tab\",function(){\r",
											"    for(i=0; i<responseJSONdata.length; i++)\r",
											"    {\r",
											"        if(responseJSONdata[i].productCode === \"MO\")\r",
											"            {\r",
											"                pm.test(\"To check User Entitlements of Access View FX Rates\" , function () \r",
											"                {\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewFXRates\");\r",
											"                })\r",
											"               \r",
											"            }\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenMOUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
									"host": [
										"{{baseURI_userPermission}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Unset Permission ViewFXRates",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"View FX Rates\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate Remove the permission View FX Rates\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"View FX Rates\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(false);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": false,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set-Permission ViewPlatformCurrencies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"View Currencies\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate the permission set as View Currencies\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"View Currencies\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(true);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": true,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get-Permission ViewPlatformCurrencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"To check User Entitlements: \" + responseJSONdata.length);\r",
											"\r",
											"pm.test(\"To check User Entitlements NOT NULL\", function () {\r",
											"      pm.expect(responseJSONdata.body).not.eql(null);\r",
											"}); \r",
											"\r",
											"pm.test(\"To check Read access to the Platform Settings tab\",function(){\r",
											"    for(i=0; i<responseJSONdata.length; i++)\r",
											"    {\r",
											"        if(responseJSONdata[i].productCode === \"MO\")\r",
											"            {\r",
											"                pm.test(\"To check User Entitlements of View Platform Currencies\" , function () \r",
											"                {\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewPlatformCurrencies\");\r",
											"                })\r",
											"               \r",
											"            }\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenMOUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
									"host": [
										"{{baseURI_userPermission}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Unset Permission ViewPlatformCurrencies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"View Currencies\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate Remove the permission View Currencies\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"View Currencies\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(false);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": false,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Set Permission ViewTemplates",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"View Templates\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate the permission set as View Templates\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"View Templates\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(true);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": true,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET-Permission ViewTemplates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"To check User Entitlements: \" + responseJSONdata.length);\r",
											"\r",
											"pm.test(\"To check User Entitlements NOT NULL\", function () {\r",
											"      pm.expect(responseJSONdata.body).not.eql(null);\r",
											"}); \r",
											"\r",
											"pm.test(\"To check Read access to the Platform Settings tab\",function(){\r",
											"    for(i=0; i<responseJSONdata.length; i++)\r",
											"    {\r",
											"        if(responseJSONdata[i].productCode === \"MO\")\r",
											"            {\r",
											"                pm.test(\"To check User Entitlements of View Templates\" , function () \r",
											"                {\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewTemplates\");\r",
											"                })\r",
											"               \r",
											"            }\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenMOUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
									"host": [
										"{{baseURI_userPermission}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Unset Permission ViewTemplates",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"View Templates\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate Remove the permission View Templates\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"View Templates\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(false);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": false,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Set Permission EditTemplates",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"Manage Templates\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate the permission set as Manage Templates\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"Manage Templates\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(true);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": true,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET-Permission EditTemplates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"To check User Entitlements: \" + responseJSONdata.length);\r",
											"\r",
											"pm.test(\"To check User Entitlements NOT NULL\", function () {\r",
											"      pm.expect(responseJSONdata.body).not.eql(null);\r",
											"}); \r",
											"\r",
											"pm.test(\"To check Read access to the Platform Settings tab\",function(){\r",
											"    for(i=0; i<responseJSONdata.length; i++)\r",
											"    {\r",
											"        if(responseJSONdata[i].productCode === \"MO\")\r",
											"            {\r",
											"                pm.test(\"To check User Entitlements of Manage Templates\" , function () \r",
											"                {\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditTemplates\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewTemplates\");\r",
											"                })\r",
											"            }\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenMOUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
									"host": [
										"{{baseURI_userPermission}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Unset Permission EditTemplates",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"Manage Templates\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate Remove the permission Manage Templates\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"Manage Templates\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(false);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": false,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Set Permission ViewCalculationTypes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"View Calculation Types\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate the permission set as View Calculation Types\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"View Calculation Types\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(true);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": true,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET-Permission ViewCalculationTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"To check User Entitlements: \" + responseJSONdata.length);\r",
											"\r",
											"pm.test(\"To check User Entitlements NOT NULL\", function () {\r",
											"      pm.expect(responseJSONdata.body).not.eql(null);\r",
											"}); \r",
											"\r",
											"pm.test(\"To check Read access to the Platform Settings tab\",function(){\r",
											"    for(i=0; i<responseJSONdata.length; i++)\r",
											"    {\r",
											"        if(responseJSONdata[i].productCode === \"MO\")\r",
											"            {\r",
											"                pm.test(\"To check User Entitlements of View Calculation Typess\" ,function () \r",
											"                {\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewCalculationTypes\");\r",
											"                })\r",
											"            }\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenMOUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
									"host": [
										"{{baseURI_userPermission}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Unset Permission ViewCalculationTypes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"View Calculation Types\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate Remove the permission Manage Templates\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"View Calculation Types\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(false);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": false,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Set Permission ManageCalculationTypes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"Manage Calculation Types\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate the permission set as Manage Calculation Types\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"Manage Calculation Types\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(true);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": true,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET-Permission ManageCalculationTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"To check User Entitlements: \" + responseJSONdata.length);\r",
											"\r",
											"pm.test(\"To check User Entitlements NOT NULL\", function () {\r",
											"      pm.expect(responseJSONdata.body).not.eql(null);\r",
											"}); \r",
											"\r",
											"pm.test(\"To check Read access to the Platform Settings tab\",function(){\r",
											"    for(i=0; i<responseJSONdata.length; i++)\r",
											"    {\r",
											"        if(responseJSONdata[i].productCode === \"MO\")\r",
											"            {\r",
											"                pm.test(\"To check User Entitlements of Manage Calculation Typess\" ,function () \r",
											"                {\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"CanManageCalculationTypes\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewCalculationTypes\");\r",
											"                })\r",
											"            }\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenMOUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
									"host": [
										"{{baseURI_userPermission}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Unset Permission ManageCalculationTypes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"        \r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"Manage Calculation Types\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate Remove the permission Manage Calculation Types\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"Manage Calculation Types\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(false);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": false,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"var url = pm.environment.get(\"baseURI\");",
									"",
									"// Get All Company ",
									"url = url.concat(\"/api/companies/platform-companies/search?companyName=Permission Enforcement\")",
									"",
									"pm.sendRequest({",
									"    url: url,",
									"    method: 'GET',",
									"    header: {",
									"        'Accept': 'application/json',",
									"        'Content-Type': 'application/json',",
									"        'x-platform-code':pm.environment.get(\"platformCode\"),",
									"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
									"      }",
									"}, ",
									"    function (err, resp) {",
									"            console.log(\"access Token\",pm.variables.get(\"accessToken\"))",
									"            if (err) {console.log(\"error :\" + err); }",
									"            var jsonData = resp.json();",
									"            for (var i = 0;i<jsonData.length ;i++) ",
									"                {",
									"                    pm.variables.set(\"companyIDPermission\",jsonData[i].id)",
									"                    pm.variables.set(\"companyNamePermission\",jsonData[i].name)",
									"                }",
									"   ",
									"    var url1 =  pm.environment.get(\"baseURI\");",
									"    url1 = url1.concat(\"/api/companies/\"+pm.variables.get(\"companyIDPermission\")+ \"/users\")",
									"",
									"    pm.sendRequest({",
									"    url: url1,",
									"    method: 'GET',",
									"    header: {",
									"        'Accept': 'application/json',",
									"        'Content-Type': 'application/json',",
									"        'x-platform-code':pm.environment.get(\"platformCode\"),",
									"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
									"      }",
									"    },function (err,resp) {",
									"            if (err) {console.log(\"error :\" + err); }",
									"            var jsonData1 = resp.json();",
									"            console.log('data===>',jsonData1)",
									"            for (var i = 0;i<jsonData1.length ;i++) ",
									"                {",
									"                    if(jsonData1[i].userName === \"lqxnga+permissionEnforcement0011@gmail.com\"){",
									"                        pm.variables.set(\"permissionUserId\",jsonData1[i].id)",
									"                    }",
									"                }",
									"    })",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Dynamic-Routing-ENT-2196",
					"item": [
						{
							"name": "PUT-Set Dynamic Routing-TestRelationshipPermission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"    var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"               // console.log('data==>',jsonData)\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"Test Relationship permission\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate the Dynamic Routing Permission set as Test Relationship Permission\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"Test Relationship permission\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(true);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": true,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET-Set Dynamic Routing-TestRelationshipPermission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"To check User Entitlements: \" + responseJSONdata.length);\r",
											"\r",
											"pm.test(\"To check User Entitlements NOT NULL\", function () {\r",
											"      pm.expect(responseJSONdata.body).not.eql(null);\r",
											"}); \r",
											"\r",
											"pm.test(\"To check Read access to the Platform Settings tab\",function(){\r",
											"    for(i=0; i<responseJSONdata.length; i++)\r",
											"    {\r",
											"        if(responseJSONdata[i].productCode === \"MO\")\r",
											"            {\r",
											"                pm.test(\"To check User Dynamic Routing of Test Relationship permission\" ,function() \r",
											"                {\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"BulkImportRelationships\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"CreateLocalRelationship\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditLocalRelationship\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"EntitlementSideBarTab\");\r",
											"                    // pm.expect(responseJSONdata[i].permissionNames).to.include(\"New Cat Val 2.15\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewRelationshipProfiles\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewRelationshipTab\");\r",
											"                })\r",
											"            }\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenMOUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
									"host": [
										"{{baseURI_userPermission}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Unset Dynamic Routing-TestRelationshipPermission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"    var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"               console.log('data==>',jsonData)\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"Test Relationship permission\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate Remove the  Dynamic Routing Permission Test Relationship permission\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"Test Relationship permission\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(false);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": false,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Set Dynamic Routing-TestGlobalPermission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"    var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"               // console.log('data==>',jsonData)\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"Test Global permission\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate the Dynamic Routing Permission set as Test Global permission\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"Test Global permission\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(true);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": true,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET-Set Dynamic Routing-TestGlobalPermission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"To check User Entitlements: \" + responseJSONdata.length);\r",
											"\r",
											"pm.test(\"To check User Entitlements NOT NULL\", function () {\r",
											"      pm.expect(responseJSONdata.body).not.eql(null);\r",
											"}); \r",
											"\r",
											"pm.test(\"To check Read access to the Platform Settings tab\",function(){\r",
											"    for(i=0; i<responseJSONdata.length; i++)\r",
											"    {\r",
											"        if(responseJSONdata[i].productCode === \"MO\")\r",
											"            {\r",
											"                pm.test(\"To check User Dynamic Routing of Test Global Permission\" ,function() \r",
											"                {\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditPlatforms\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"EntitlementSideBarTab\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"UpdatePlatforms\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewPlatforms\");\r",
											"                })\r",
											"            }\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenMOUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
									"host": [
										"{{baseURI_userPermission}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Unset Dynamic Routing-TestGlobalPermission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"    var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"               console.log('data==>',jsonData)\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"Test Global permission\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate Remove the  Dynamic Routing Permission Test Global permission\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"Test Global permission\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(false);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": false,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Set Dynamic Routing-TestGroupPermission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"    var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"               // console.log('data==>',jsonData)\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"Test Group permission\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate the Dynamic Routing Permission set as Test Group Permission\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"Test Group permission\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(true);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": true,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET-Set Dynamic Routing-TestGroupPermission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"To check User Entitlements: \" + responseJSONdata.length);\r",
											"\r",
											"pm.test(\"To check User Entitlements NOT NULL\", function () {\r",
											"      pm.expect(responseJSONdata.body).not.eql(null);\r",
											"}); \r",
											"\r",
											"pm.test(\"To check Read access to the Platform Settings tab\",function(){\r",
											"    for(i=0; i<responseJSONdata.length; i++)\r",
											"    {\r",
											"        if(responseJSONdata[i].productCode === \"MO\")\r",
											"            {\r",
											"                pm.test(\"To check User Dynamic Routing of Test Group Permission\" ,function() \r",
											"                {\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"CreateLocalGroup\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditLocalGroup\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"EntitlementSideBarTab\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewGroupTab\");\r",
											"                })\r",
											"            }\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenMOUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
									"host": [
										"{{baseURI_userPermission}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Unset Dynamic Routing-TestGroupPermission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"    var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"               console.log('data==>',jsonData)\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"Test Group permission\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate Remove the Dynamic Routing Permission Test Group Permission\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"Test Group permission\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(false);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": false,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Set Dynamic Routing-TestPermissionCompany",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"    var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"               // console.log('data==>',jsonData)\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"Test Permission Company\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate the Dynamic Routing Permission set as Test Permission Company\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"Test Permission Company\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(true);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": true,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET-Set Dynamic Routing-TestPermissionCompany",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"To check User Entitlements: \" + responseJSONdata.length);\r",
											"\r",
											"pm.test(\"To check User Entitlements NOT NULL\", function () {\r",
											"      pm.expect(responseJSONdata.body).not.eql(null);\r",
											"}); \r",
											"\r",
											"pm.test(\"To check Read access to the Platform Settings tab\",function(){\r",
											"    for(i=0; i<responseJSONdata.length; i++)\r",
											"    {\r",
											"        if(responseJSONdata[i].productCode === \"MO\")\r",
											"            {\r",
											"                pm.test(\"To check User Dynamic Routing of Test Permission Company\" ,function() \r",
											"                {\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"BulkImportCompanies\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"CreateLocalCompany\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditCompanyContacts\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditCompanyDetails\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditCompanyListTabs\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditCompanyProductEntitlement\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditCompanyUserGrid\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"EditLocalCompany\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"EntitlementSideBarTab\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"SyncData\")\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewCompanyDetails\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewCompanyListTabs\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewCompanyProductEntitlement\");\r",
											"                    pm.expect(responseJSONdata[i].permissionNames).to.include(\"ViewCompanyUserGrid\");\r",
											"                })\r",
											"            }\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenMOUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
									"host": [
										"{{baseURI_userPermission}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Unset Dynamic Routing-TestPermissionCompany",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"    var url = pm.environment.get(\"baseURI\");\r",
											"    url1 = pm.environment.get(\"baseURI\");\r",
											"    url1 = url1.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData = resp.json();\r",
											"            for (var i = 0;i<jsonData.length ;i++) \r",
											"                {\r",
											"                    pm.variables.set(\"roleId\",jsonData[i].roleId)\r",
											"                }\r",
											"    var url = pm.environment.get(\"baseURI\")\r",
											"    url = url.concat(\"/api/userpermissions/\"+ pm.variables.get(\"companyIDPermission\") +\"/roles/\" + pm.variables.get(\"roleId\") + \"?entityType=Company\");\r",
											"    \r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"        }\r",
											"    }, \r",
											"        function (err, resp) {\r",
											"                if (err) {console.log(\"error :\" + err); }\r",
											"                var jsonData = resp.json();\r",
											"               console.log('data==>',jsonData)\r",
											"                for (var i = 0;i<jsonData.length ;i++) \r",
											"                {    \r",
											"                    if( jsonData[i].permissionBundleName === \"Test Permission Company\"){\r",
											"                        pm.variables.set(\"permissionBundleId\",jsonData[i].permissionBundleId)\r",
											"                        pm.variables.set(\"permissionBundleName\",jsonData[i].permissionBundleName)\r",
											"                        pm.variables.set(\"userParticipantId\",jsonData[i].userParticipantId)\r",
											"                    }\r",
											"                }\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"var permissionUserId = pm.variables.get(\"permissionUserId\")\r",
											"var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/userpermissions/\"+permissionUserId+\"/roles/\"+pm.variables.get(\"roleId\")+ \"?entityType=Company\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"\r",
											"        pm.test(\"Validate Remove the  Dynamic Routing Permission Test Permission Company\", function(){\r",
											"            for( var i=0; i< jsonData.length; i++)\r",
											"                {   \r",
											"                    if(jsonData[i].permissionBundleName === \"Test Permission Company\")\r",
											"                    {\r",
											"                        pm.expect(jsonData[i].isEntitled).to.be.eql(false);\r",
											"                    }\r",
											"                }\r",
											"            })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isEntitled\": false,\r\n        \"permissionBundleId\":{{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"userParticipantId\": {{userParticipantId}}\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{permissionUserId}}/roles/{{roleId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{permissionUserId}}",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"var url = pm.environment.get(\"baseURI\");",
									"",
									"// Get All Company ",
									"url = url.concat(\"/api/companies/platform-companies/search?companyName=Permission Enforcement\")",
									"",
									"pm.sendRequest({",
									"    url: url,",
									"    method: 'GET',",
									"    header: {",
									"        'Accept': 'application/json',",
									"        'Content-Type': 'application/json',",
									"        'x-platform-code':pm.environment.get(\"platformCode\"),",
									"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
									"      }",
									"}, ",
									"    function (err, resp) {",
									"            console.log(\"access Token\",pm.variables.get(\"accessToken\"))",
									"            if (err) {console.log(\"error :\" + err); }",
									"            var jsonData = resp.json();",
									"            for (var i = 0;i<jsonData.length ;i++) ",
									"                {",
									"                    pm.variables.set(\"companyIDPermission\",jsonData[i].id)",
									"                    pm.variables.set(\"companyNamePermission\",jsonData[i].name)",
									"                }",
									"   ",
									"    var url1 =  pm.environment.get(\"baseURI\");",
									"    url1 = url1.concat(\"/api/companies/\"+pm.variables.get(\"companyIDPermission\")+ \"/users\")",
									"",
									"    pm.sendRequest({",
									"    url: url1,",
									"    method: 'GET',",
									"    header: {",
									"        'Accept': 'application/json',",
									"        'Content-Type': 'application/json',",
									"        'x-platform-code':pm.environment.get(\"platformCode\"),",
									"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
									"      }",
									"    },function (err,resp) {",
									"            if (err) {console.log(\"error :\" + err); }",
									"            var jsonData1 = resp.json();",
									"            for (var i = 0;i<jsonData1.length ;i++) ",
									"                {",
									"                    if(jsonData1[i].userName === \"lqxnga+permissionEnforcement0011@gmail.com\"){",
									"                        pm.variables.set(\"permissionUserId\",jsonData1[i].id)",
									"                    }",
									"                }",
									"    })",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Catalog-Controlled-Deletion-ENT-2228",
					"item": [
						{
							"name": "POST - Create New Permission Catalog Values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code for newly created catalog is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.variables.set('catalogId',jsonData.id)\r",
											"pm.variables.set('catalogName',jsonData.name)\r",
											"pm.variables.set('catalogdescription',jsonData.description)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var  sendCatalogName = getRandomAlphaNumeric(8,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"var  sendDatalogDescription = getRandomAlphaNumeric(15,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											" pm.variables.set('sendCatalogName', sendCatalogName + 'Test')\r",
											" pm.variables.set('sendDatalogDescription' , sendDatalogDescription)\r",
											"\r",
											" console.log('data==>',pm.variables.get(sendCatalogName))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"name\": \"{{sendCatalogName}}\",\r\n  \"description\": \"{{sendDatalogDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/permissions/catalog-values",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"permissions",
										"catalog-values"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET-Deatils Newly Created Catalog Values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get newly created catlog Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Validate the new column in the Permisison Catalog editor grid called\", function () {\r",
											"            pm.expect(jsonData.id).to.eql(pm.variables.get('catalogId')); \r",
											"            pm.expect(jsonData.name).to.eql(pm.variables.get('catalogName')); \r",
											"            pm.expect(jsonData.description).to.eql(pm.variables.get('catalogdescription')); \r",
											"            pm.expect(jsonData.permissionBundleAssociationCount).to.eql(0); \r",
											"            pm.expect(jsonData.relatedPermissionBundles).to.eql([]); \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/permissions/catalog-values/{{catalogId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"permissions",
										"catalog-values",
										"{{catalogId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DEL - Delete Creaetd Catalog values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delet Newly created catlog Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/permissions/catalog-values/{{catalogId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"permissions",
										"catalog-values",
										"{{catalogId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Formation-and-Location-are-unknown-ENT-2217",
					"item": [
						{
							"name": "PUT - Formation and Location USA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        {\r",
											"            pm.variables.set(\"countryName\",  jsonData[i].name);\r",
											"            pm.variables.set(\"countryCode\", jsonData[i].countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"countryCode\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"       \r",
											"        for(i=0; i< jsonData.length; i++)\r",
											"        {\r",
											"            if(jsonData[i].name.includes(\"Unknown\"))\r",
											"            {\r",
											"            pm.variables.set(\"stateRegion\", jsonData[i].name);     \r",
											"            pm.variables.set(\"stateRegionId\", jsonData[i].id); \r",
											"            }\r",
											"        }\r",
											"    }\r",
											"    )\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"countryCode\": \"{{countryCode}}\",\r\n\"name\": \"{{companyNamePermission}}\",\r\n\"platformCode\": \"{{platformCode}}\",\r\n\"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/platform/{{companyIDPermission}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"platform",
										"{{companyIDPermission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET-Deatils Formation and Location for USA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validate the Stae Region set as Unknown for United States of America\", function () {\r",
											"            pm.expect(jsonData.stateRegion).to.eql('Unknown');      \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Companies/platform-companies/{{companyIDPermission}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Companies",
										"platform-companies",
										"{{companyIDPermission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT - Formation and Location CA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code for Updated Formation is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"CA\"))\r",
											"        {\r",
											"            pm.variables.set(\"countryName\",  jsonData[i].name);\r",
											"            pm.variables.set(\"countryCode\", jsonData[i].countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"countryCode\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"       \r",
											"        for(i=0; i< jsonData.length; i++)\r",
											"        {\r",
											"            if(jsonData[i].name.includes(\"Unknown\"))\r",
											"            {\r",
											"            pm.variables.set(\"stateRegion\", jsonData[i].name);     \r",
											"            pm.variables.set(\"stateRegionId\", jsonData[i].id); \r",
											"            }\r",
											"        }\r",
											"    }\r",
											"    )\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"countryCode\": \"{{countryCode}}\",\r\n\"name\": \"{{companyNamePermission}}\",\r\n\"platformCode\": \"{{platformCode}}\",\r\n\"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/platform/{{companyIDPermission}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"platform",
										"{{companyIDPermission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET-Deatils  Formation and Location CA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validate the Stae Region set as Unknown for Canada\", function () {\r",
											"            pm.expect(jsonData.stateRegion).to.eql('Unknown');      \r",
											"});\r",
											"  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Companies/platform-companies/{{companyIDPermission}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Companies",
										"platform-companies",
										"{{companyIDPermission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT - Formation and Location AU",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code for Updated Formation is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"AU\"))\r",
											"        {\r",
											"            pm.variables.set(\"countryName\",  jsonData[i].name);\r",
											"            pm.variables.set(\"countryCode\", jsonData[i].countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"countryCode\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"       \r",
											"        for(i=0; i< jsonData.length; i++)\r",
											"        {\r",
											"            if(jsonData[i].name.includes(\"Unknown\"))\r",
											"            {\r",
											"            pm.variables.set(\"stateRegion\", jsonData[i].name);     \r",
											"            pm.variables.set(\"stateRegionId\", jsonData[i].id); \r",
											"            }\r",
											"        }\r",
											"    }\r",
											"    )\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"countryCode\": \"{{countryCode}}\",\r\n\"name\": \"{{companyNamePermission}}\",\r\n\"platformCode\": \"{{platformCode}}\",\r\n\"stateRegionId\": {{stateRegionId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/platform/{{companyIDPermission}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"platform",
										"{{companyIDPermission}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET-Deatils  Formation and Location AU",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validate the Stae Region set as Unknown for Australia\", function () {\r",
											"            pm.expect(jsonData.stateRegion).to.eql('Unknown');      \r",
											"});\r",
											"  \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/Companies/platform-companies/{{companyIDPermission}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Companies",
										"platform-companies",
										"{{companyIDPermission}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"var url = pm.environment.get(\"baseURI\");",
									"",
									"// Get All Company ",
									"url = url.concat(\"/api/companies/platform-companies/search?companyName=Temporary_test\")",
									"",
									"pm.sendRequest({",
									"    url: url,",
									"    method: 'GET',",
									"    header: {",
									"        'Accept': 'application/json',",
									"        'Content-Type': 'application/json',",
									"        'x-platform-code':pm.environment.get(\"platformCode\"),",
									"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
									"      }",
									"}, ",
									"    function (err, resp) {",
									"            console.log(\"access Token\",pm.variables.get(\"accessToken\"))",
									"            if (err) {console.log(\"error :\" + err); }",
									"            var jsonData = resp.json(); ",
									"            for (var i = 0;i<jsonData.length ;i++) ",
									"                {        ",
									"                    pm.variables.set(\"companyIDPermission\",jsonData[i].id)",
									"                    pm.variables.set(\"companyNamePermission\",jsonData[i].name)",
									"                    ",
									"                }",
									"    var url =  pm.environment.get(\"baseURI\");",
									"    url = url.concat(\"/api/Companies/platform-companies/\"+pm.variables.get(\"companyIDPermission\"))",
									"    pm.sendRequest({",
									"    url: url,",
									"    method: 'GET',",
									"    header: {",
									"        'Accept': 'application/json',",
									"        'Content-Type': 'application/json',",
									"        'x-platform-code':pm.environment.get(\"platformCode\"),",
									"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
									"      }",
									"    },function (err,resp) {",
									"            if (err) {console.log(\"error :\" + err); }",
									"            var jsonData = resp.json();",
									"        ",
									"            var platformCode = jsonData.platformCode",
									"            pm.variables.set(\"platformCode\",platformCode)",
									"    })",
									"})"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if(pm.response.code == 200)",
									"{",
									"    console.log(\"responseBody\", responseBody);",
									"    if (responseBody != null)",
									"    {",
									"        if (responseBody =='[]' || responseBody == '{}')",
									"        {",
									"             tests[\"Body is empty \" + responseBody]= false;",
									"        }",
									"        else {",
									"          tests[\"Body is not empty\"]= true;",
									"        }",
									"    }",
									"    else",
									"    {",
									"          tests[\"Body is empty\" + responseBody]= false;",
									"    }",
									"}",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Permission-Bundle-Mgmt-ENT-886",
					"item": [
						{
							"name": "Permissions bundles",
							"item": [
								{
									"name": "Create a bundle",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var  bRandom = getRandomAlphaNumeric(4,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
													"function getRandomAlphaNumeric(len, chars) {\r",
													"    var result = '';\r",
													"    for (var i = len; i > 0; i--)\r",
													"    { \r",
													"     result += chars[Math.floor(Math.random() * chars.length)];\r",
													"    }\r",
													"     return result;\r",
													"}\r",
													"var randomS = \"Test bundle \"+bRandom;\r",
													"pm.variables.set(\"bundleName\", randomS);\r",
													"var randomdeS = \"Test description \"+bRandom;\r",
													"pm.variables.set(\"bundleDescription\",randomdeS);\r",
													"pm.variables.set(\"productCode\",\"MO\");\r",
													"pm.variables.set(\"bundleTypeId\", 1); //1=company,2=Group,3=resource\r",
													"console.log(randomS);\r",
													"console.log(randomdeS)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\",function(){\r",
													"    pm.response.to.have.status(201);\r",
													"})\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.variables.set(\"bundleID\",jsonData.id);\r",
													"console.log(jsonData.id);\r",
													"\r",
													"pm.test(\"Comparing the actual and expected values\",function(){\r",
													"    pm.expect(pm.variables.get(\"bundleName\")).to.be.eql(jsonData.name);\r",
													"    pm.expect(pm.variables.get(\"bundleDescription\")).to.be.eql(jsonData.description);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenGlobalAdminUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"name\": \"{{bundleName}}\",\r\n    \"description\": \"{{bundleDescription}}\",\r\n    \"roles\": [],\r\n    \"productCode\": \"{{productCode}}\",\r\n    \"bundleTypeId\": {{bundleTypeId}},\r\n    \"permissions\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Permissions/bundles",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Permissions",
												"bundles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Permission bundle",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"bundleID\",pm.variables.get(\"bundleID\"))\r",
													"pm.variables.set(\"bundleName\",pm.variables.get(\"bundleName\"))\r",
													"pm.variables.set(\"bundleDescription\",pm.variables.get(\"bundleDescription\"))\r",
													"pm.variables.set(\"productCode\",pm.variables.get(\"productCode\"))\r",
													"\r",
													"\r",
													"pm.variables.set(\"bundleTypeId\", 1); //1=company,2=Group,3=resource\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\"),function(){\r",
													"    pm.response.to.have.status(200);\r",
													"}\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var randomS = pm.variables.get(\"bundleName\");\r",
													"var randomdeS = pm.variables.get(\"bundleDescription\");\r",
													"\r",
													"pm.test(\"To check bundle permission got updated\", function () {\r",
													"        pm.expect(jsonData.name).to.be.eql(randomS+\"_updated\");\r",
													"        pm.expect(jsonData.description).to.be.eql(randomdeS+\"_updated\");\r",
													"       \r",
													"    });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{bundleName}}_updated\",\r\n    \"description\": \"{{bundleDescription}}_updated\",\r\n    \"roles\": [],\r\n    \"id\": {{bundleID}},\r\n    \"productCode\": \"{{productCode}}\",\r\n    \"bundleTypeId\": {{bundleTypeId}},\r\n    \"permissions\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/permissions/bundles/{{bundleID}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"permissions",
												"bundles",
												"{{bundleID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the created bundle",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(pm.variables.get(\"bundleID\"));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The Status code is 204\"),function(){\r",
													"    pm.response.to.have.status(204);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/permissions/bundles/{{bundleID}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"permissions",
												"bundles",
												"{{bundleID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Permissions-Catalog",
					"item": [
						{
							"name": "Create catalog-values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\",function(){\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.variables.set(\"catalogID\",jsonData.id);\r",
											"console.log(jsonData.id);\r",
											"\r",
											"pm.test(\"Comparing the actual and expected values\",function(){\r",
											"    pm.expect(pm.variables.get(\"catalogName\")).to.be.eql(jsonData.name);\r",
											"    pm.expect(pm.variables.get(\"catalogDescription\")).to.be.eql(jsonData.description);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var  cRandom = getRandomAlphaNumeric(4,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = \"Regcat\"+cRandom;\r",
											"pm.variables.set(\"catalogName\", randomS);\r",
											"var randomdeS = \"Regcatdes\"+cRandom;\r",
											"pm.variables.set(\"catalogDescription\",randomdeS);\r",
											"console.log(randomS);\r",
											"console.log(randomdeS);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{catalogName}}\", \r\n    \"description\": \"{{catalogDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/permissions/catalog-values",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"permissions",
										"catalog-values"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit catalog-values",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.variables.get(\"catalogID\"));\r",
											"pm.variables.set(\"catalogName\",pm.variables.get(\"catalogName\"))\r",
											"pm.variables.set(\"catalogDescription\",pm.variables.get(\"catalogDescription\"))\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\"),function(){\r",
											"    pm.response.to.have.status(200);\r",
											"}\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var randomS = pm.variables.get(\"catalogName\");\r",
											"var randomdeS = pm.variables.get(\"catalogDescription\");\r",
											"\r",
											"pm.test(\"To check catalog-values got updated\", function () {\r",
											"        pm.expect(jsonData.name).to.be.eql(randomS+\"_updated\");\r",
											"        pm.expect(jsonData.description).to.be.eql(randomdeS+\"_updated\");\r",
											"       \r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{catalogName}}_updated\", \r\n    \"description\": \"{{catalogDescription}}_updated\", \r\n    \"id\": {{catalogID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/permissions/catalog-values/{{catalogID}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"permissions",
										"catalog-values",
										"{{catalogID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the existing catalog-values",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.variables.get(\"catalogID\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The Status code is 204\"),function(){\r",
											"    pm.response.to.have.status(204);\r",
											"}\r",
											"\r",
											"var cID = pm.variables.get(\"catalogID\");\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Permissions/catalog-values/\" +cID);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"\r",
											"}, function (err, res) {\r",
											"    pm.test(\"To check the existing catalog-values got deleted\", function () {\r",
											"         pm.expect(res.code).to.eql(404);\r",
											"        \r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/permissions/catalog-values/{{catalogID}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"permissions",
										"catalog-values",
										"{{catalogID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "MFA-ENT-2182-ENT-2183",
					"item": [
						{
							"name": "Create Platform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var suffix = pm.variables.get(\"entityName\");\r",
											"var expCmpId = jsonData.name;\r",
											"var newCode = jsonData.code;\r",
											"pm.variables.set(\"NewUserCode\", newCode);\r",
											"console.log(newCode);\r",
											"\r",
											"pm.test(\"To check new platform is created: \" + expCmpId, function () {\r",
											"    pm.expect(jsonData.name).to.eql('RegEntl_' + suffix + '_platform' );\r",
											"    pm.expect(jsonData.code).to.eql('REGENT_' + suffix );\r",
											"    pm.expect(jsonData.platformUrl).to.eql('https://EntlReg_testPlatform_'+suffix+'.com');\r",
											"    pm.expect(jsonData.isActive).to.eql(true);\r",
											"});\r",
											"pm.test(\"To check new platform decimalPrecision is not null: \" + jsonData.decimalPrecision, function () {\r",
											"    pm.expect(jsonData.decimalPrecision).to.be.not.eql(null);\r",
											"    pm.expect(jsonData.helpText).to.be.not.eql(null);\r",
											"    pm.expect(jsonData.replyToEmailAddress).to.be.not.eql(null);\r",
											"\r",
											"});\r",
											"pm.test(\"To check MFA checkbox is Enabled or not : \"+jsonData.mfaenabled, function () {\r",
											"    if(jsonData.mfaenabled===true){\r",
											"    console.log(\"MFA is Enabled\");\r",
											"    }else{\r",
											"        console.log(\"MFA is Disabled\")\r",
											"    }\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"var randomS = timeToday+\"_\"+cRandom;\r",
											"pm.variables.set(\"entityName\", randomS);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"REGENT_{{entityName}}\",\r\n    \"name\": \"RegEntl_{{entityName}}_platform\",\r\n    \"platformUrl\": \"https://EntlReg_testPlatform_{{entityName}}.com\",\r\n    \"isActive\": true,\r\n    \"decimalPrecision\": 4,\r\n    \"helpText\": \"Test\",\r\n    \"replyToEmailAddress\": \"testPlaform-QA@gmail.com\",\r\n    \"dayCountConvention\": 360,\r\n    \"discountMarginPrecision\": 4,\r\n    \"emailFontColor\": \"#FFFFFF\",\r\n    \"emailPrimaryColor\": \"#0072C6\",\r\n    \"importsEnabled\": true\r\n    // \"mfaenabled\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Platform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"var newCode = pm.variables.get(\"NewUserCode\");\r",
											"console.log(newCode)\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms/\" + newCode);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"\r",
											"}, function (err, res) {\r",
											"\r",
											"    var jsonData = res.json();\r",
											"    console.log(jsonData);\r",
											"   \r",
											"    pm.test(\"To check new platform decimalPrecision is not null: \" + jsonData.decimalPrecision, function () {\r",
											"        pm.expect(jsonData.decimalPrecision).to.be.not.eql(null);\r",
											"        pm.expect(jsonData.helpText).to.be.not.eql(null);\r",
											"        pm.expect(jsonData.replyToEmailAddress).to.be.not.eql(null);\r",
											"\r",
											"    });\r",
											"\r",
											"    \r",
											"        if (jsonData.mfaenabled === true) {\r",
											"            \r",
											"            pm.test(\"MFA checkbox is Enabled\" , function () {\r",
											"                pm.expect(jsonData.mfaenabled).to.eql(true);\r",
											"            });\r",
											"        } else {\r",
											"            pm.test(\"MFA checkbox is Disabled\", function () {\r",
											"                pm.expect(jsonData.mfaenabled).to.eql(false);\r",
											"            });\r",
											"        }\r",
											"\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newCode = pm.variables.get(\"NewUserCode\");\r",
											"console.log(newCode)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"REGENT_{{entityName}}\",\r\n    \"name\": \"RegEntl_{{entityName}}_platform\",\r\n    \"platformUrl\": \"https://EntlReg_testPlatform_{{entityName}}.com\",\r\n    \"isActive\": true,\r\n    \"decimalPrecision\": 4,\r\n    \"helpText\": \"Test\",\r\n    \"replyToEmailAddress\": \"testPlaform-QA@gmail.com\",\r\n    \"dayCountConvention\": 360,\r\n    \"discountMarginPrecision\": 8,\r\n    \"emailFontColor\": \"#FFFFFF\",\r\n    \"emailPrimaryColor\": \"#0072C6\",\r\n    \"importsEnabled\": false,\r\n    \"mfaenabled\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{NewUserCode}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{NewUserCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Admin Platformsettings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"var newCode = pm.environment.get(\"platformCode\");\r",
											"console.log(newCode)\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Platforms/\"+newCode);\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"\r",
											"}, function (err, res) {\r",
											"\r",
											"    var jsonData = res.json();\r",
											"    console.log(jsonData);\r",
											"\r",
											"    if (jsonData.mfaenabled === true) {\r",
											"\r",
											"        pm.test(\"MFA checkbox is Enabled\", function () {\r",
											"            pm.expect(jsonData.mfaenabled).to.eql(true);\r",
											"        });\r",
											"    } else {\r",
											"        pm.test(\"MFA checkbox is Disabled\", function () {\r",
											"            pm.expect(jsonData.mfaenabled).to.eql(false);\r",
											"        });\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"LQX\",\r\n    \"name\": \"LiquidX\",\r\n    \"platformUrl\": \"https://qa.liquidx.com\",\r\n    \"isActive\": true,\r\n    \"decimalPrecision\": 10,\r\n    \"helpText\": \"Contact us at clientservices@liquidx.com for any questions or help. You can call us on +1(212) 612 3394. PA MO\",\r\n    \"replyToEmailAddress\": \"do-not-reply2@liquidx.com\",\r\n    \"emailPrimaryColor\": \"#052c4c\",\r\n    \"emailFontColor\": \"#FFFFFF\",\r\n    \"discountMarginPrecision\": 10,\r\n    \"dayCountConvention\": 360,\r\n    \"importsEnabled\": true,\r\n    \"mfaenabled\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/platforms/{{platformCode}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"platforms",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear MFA Button in User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"isPortalUser\":false,\"isPlatformUser\":false,\"id\":\"{{User_Id_G}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/users/{{User_Id_G}}?command=clear-mfa-claims",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"{{User_Id_G}}"
									],
									"query": [
										{
											"key": "command",
											"value": "clear-mfa-claims"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "This folder contains end-to-end flow for company/users for all products (SCF,AR,INS,PTS) and company roles.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "ALL-Products",
			"item": [
				{
					"name": "AccountReceivable",
					"item": [
						{
							"name": "Update-AR-Funder-Name-NGA-1277",
							"item": [
								{
									"name": "Get Company by ID NGA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expCompany = pm.variables.get(\"companyAR\");\r",
													"console.log(expCompany);\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
													"    pm.expect(responseJSONdata.id).to.eql(parseInt(expCompany));\r",
													"}); \r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//This is used to read the product specific array of company id's to variable 'companies'.",
													"var companies;",
													"",
													"companies = pm.environment.get(\"AR_Funder_Companies\").split(',');",
													"console.log(\"AR_Funder_Company ids: \"+companies);",
													"",
													"//This counter is used to traverse company id array and setting the current value to the variable 'company'",
													"var c_counter = pm.collectionVariables.get('cmp_counterAR');",
													"pm.variables.set('companyAR', companies[c_counter]);",
													"console.log(\"Company counter:\"+c_counter);",
													"",
													"//This code is used to find the total count of product specific companies in the array.",
													"pm.collectionVariables.set('cmp_countAR', companies.length -1) ;",
													"console.log(\"Total Company------>:\"+pm.collectionVariables.get(\"cmp_countAR\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{companyAR}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{companyAR}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate_Companies NGA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"To check company is active \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isActive).to.eql(true);",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var cid = pm.variables.get(\"companyAR\");",
													"console.log(\"Current company: \"+cid);",
													"pm.variables.set(\"CompanyIdAR\", cid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \r\n\t\"id\": {{CompanyIdAR}}\r\n}\t"
										},
										"url": {
											"raw": "{{baseURI}}/api/companies/{{CompanyIdAR}}/update-status?command=activate",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{CompanyIdAR}}",
												"update-status"
											],
											"query": [
												{
													"key": "command",
													"value": "activate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Company Roles?productCode=ALL NGA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var expectedCompanyId = pm.variables.get(\"CompanyIdAR\") ;\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"var crolename1 ;\r",
													"var crid1  ;\r",
													"var cpid1; \r",
													"var ccode1 ;\r",
													"var ccid1;\r",
													"\r",
													"for (var i=0; i < responseJSONdata.length; i++)\r",
													"{\r",
													"    if(responseJSONdata[i].isActive == true)\r",
													"    {\r",
													"        crolename1 = responseJSONdata[i].roleName;\r",
													"        crid1 = responseJSONdata[i].roleId;\r",
													"        ccode1 = responseJSONdata[i].productCode;\r",
													"        ccid1 = responseJSONdata[i].companyId;\r",
													"        cpid1 = responseJSONdata[i].participantId;\r",
													"        break;\r",
													"    }\r",
													"}\r",
													"console.log(crolename1);\r",
													"console.log(crid1);\r",
													"console.log(ccode1);\r",
													"console.log(ccid1);\r",
													"console.log(cpid1);\r",
													"\r",
													"//Values in the array are set in the  variable.\r",
													"pm.variables.set(\"crolename1\", crolename1);\r",
													"pm.variables.set(\"crid1\", crid1);\r",
													"pm.variables.set(\"ccode1\", ccode1);\r",
													"pm.variables.set(\"ccid1\", ccid1);\r",
													"pm.variables.set(\"cpid1\", cpid1);\r",
													"\r",
													"pm.test(\"To check /companies/{id} returns company details\", function () \r",
													"{\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"        pm.expect(responseJSONdata[i].companyId).to.eql(parseInt(expectedCompanyId));\r",
													"    }\r",
													"}); \r",
													"\r",
													"// var jsonData = JSON.parse(responseBody);\r",
													"// var tProd = []; var tRole = []; var tPermission =[];\r",
													"// var Cnt1 = 0; var Cnt2 = 0; var Cnt3=0;\r",
													"// var currentAllD  = []; var crolename  = [];var crid  = [];var cpid = []; var ccode =[];\r",
													"// var allDetails = [\r",
													"//     [\r",
													"//         ['SCF', 'Buyer', 'Read'],\r",
													"//         ['AR', 'Supplier', 'Write'],\r",
													"//         ['INS', 'Insurance Carrier', 'Admin']\r",
													"        \r",
													"//     ],\r",
													"//     [\r",
													"//         ['SCF', 'Buyer', 'Write'],\r",
													"//         ['AR', 'Supplier', 'Admin'],\r",
													"//         ['INS', 'Insurance Carrier', 'Read']\r",
													"//     ],\r",
													"//     [\r",
													"//         ['SCF', 'Buyer', 'Admin'],\r",
													"//         ['AR', 'Supplier', 'Read'],\r",
													"//         ['INS', 'Insurance Carrier', 'Write']\r",
													"//     ],\r",
													"//     [\r",
													"//         ['SCF', 'Buyer', 'Read'],\r",
													"//         ['AR', 'Supplier', 'Write'],\r",
													"//         ['INS', 'Insured Party', 'Admin']\r",
													"//     ],\r",
													"//     [\r",
													"//         ['SCF', 'Buyer', 'Write'],\r",
													"//         ['AR', 'Supplier', 'Admin'],\r",
													"//         ['INS', 'Insured Party', 'Read']\r",
													"//     ],\r",
													"//     [\r",
													"//         ['SCF', 'Buyer', 'Admin'],\r",
													"//         ['AR', 'Supplier', 'Read'],\r",
													"//         ['INS', 'Insured Party', 'Write']\r",
													"//     ],\r",
													"//     [\r",
													"//         ['SCF', 'Buyer', 'Read'],\r",
													"//         ['AR', 'Funder', 'Write'],\r",
													"//         ['INS', 'Insurance Carrier', 'Admin']\r",
													"//     ],\r",
													"//     [\r",
													"//         ['SCF', 'Buyer', 'Write'],\r",
													"//         ['AR', 'Funder', 'Admin'],\r",
													"//         ['INS', 'Insurance Carrier', 'Read']\r",
													"//     ],\r",
													"//     [\r",
													"//         ['SCF', 'Buyer', 'Admin'],\r",
													"//         ['AR', 'Funder', 'Read'],\r",
													"//         ['INS', 'Insurance Carrier', 'Write']\r",
													"//     ],\r",
													"//     [\r",
													"//         ['SCF', 'Buyer', 'Read'],\r",
													"//         ['AR', 'Funder', 'Write'],\r",
													"//         ['INS', 'Insured Party', 'Admin']\r",
													"//     ],\r",
													"//     [\r",
													"//         ['SCF', 'Buyer', 'Write'],\r",
													"//         ['AR', 'Funder', 'Admin'],\r",
													"//         ['INS', 'Insured Party', 'Read']\r",
													"//     ],\r",
													"//     [\r",
													"//         ['SCF', 'Buyer', 'Admin'],\r",
													"//         ['AR', 'Funder', 'Read'],\r",
													"//         ['INS', 'Insured Party', 'Write']\r",
													"//     ]\r",
													"// ];\r",
													"\r",
													"\r",
													"// console.log(\"OuterLength :\", allDetails.length);\r",
													"// console.log(\"middleLength :\", allDetails[0].length);\r",
													"// console.log(\"innerLength :\", allDetails[0][0].length);\r",
													"// var totalCntI = allDetails.length;\r",
													"// //totalCombinationCount - this sets the total number of combinations within allDetails[] and count is set to variable to i.\r",
													"// pm.collectionVariables.set(\"totalCombinationCount\", allDetails.length-1);\r",
													"// var i = pm.collectionVariables.get(\"combinationCtr\");\r",
													"// console.log(\"current combination: \"+i);\r",
													"// var totalCntJ = allDetails[0].length;\r",
													"\r",
													"// for (var j = 0; j < allDetails[0].length; j++)\r",
													"// {\r",
													"//     for (var k = 0; k < allDetails[0][0].length; k++)\r",
													"//     {\r",
													"//     \tconsole.log(\"in k loop\");\r",
													"//     \tconsole.log(\"Counter i:\" + i + \" j:\" + j + \"k:\" + k + \"-\" + allDetails[i][j][k]);\r",
													"//         if(k===0)\r",
													"//     \t{\r",
													"//     \t\ttProd.push(allDetails[i][j][k]);\r",
													"//     \t\tconsole.log(\"Combination tProd \"+i+ \" --->\"+tProd);\r",
													"//     \t}\r",
													"//     \telse if(k===1)\r",
													"//     \t{\r",
													"//     \t    tRole.push(allDetails[i][j][k]);\r",
													"//     \t\tconsole.log(\"Combination tRole \"+i+ \" --->\"+tRole);\r",
													"//     \t}\r",
													"//     \telse if(k===2)\r",
													"//     \t{\r",
													"//     \t\ttPermission.push(allDetails[i][j][k]);\r",
													"//     \t\tconsole.log(\"Combination tPermission \"+i+ \" --->\"+tPermission);\r",
													"//     \t}\r",
													"//     }\r",
													"// }\r",
													"// for(var roles = 0; roles < tProd.length; roles++)\r",
													"// {\r",
													"//     for(var i = 0; i < jsonData.length; i++)\r",
													"//     {\r",
													"//       if( jsonData[i].productCode == tProd[roles] && (jsonData[i].roleName).includes(tRole[roles]))\r",
													"//       {\r",
													"//             crolename.push(jsonData[i].roleName);\r",
													"//             crid.push(jsonData[i].roleId);\r",
													"//             cpid.push(jsonData[i].participantId);\r",
													"//             ccode.push(jsonData[i].productCode);\r",
													"//             break;\r",
													"//       }\r",
													"//     }\r",
													"// }\r",
													"// console.log(crolename);\r",
													"// console.log(crid);\r",
													"// console.log(cpid);\r",
													"// console.log(ccode);\r",
													"\r",
													"\r",
													"// //Values in the array are set in the collection variable.\r",
													"// pm.collectionVariables.set(\"crolename\", crolename);\r",
													"// pm.collectionVariables.set(\"crid\", crid);\r",
													"// pm.collectionVariables.set(\"cpid\", cpid);\r",
													"// pm.collectionVariables.set(\"ccode\", ccode);\r",
													"// pm.collectionVariables.set(\"tPermission\", tPermission);\r",
													"\r",
													"\r",
													"// //This is the test to varify data.\r",
													"\r",
													"// pm.test(\"Status code is 200\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"// });\r",
													"\r",
													"// var expCompanyId = pm.environment.get(\"MultiProductRoleCompany\");\r",
													"// var totalProductCode = pm.collectionVariables.get(\"ccode\").toString().split(',');\r",
													"// console.log(\"totalProductCode \" + totalProductCode);\r",
													"\r",
													"// pm.test(\"Validate the roles for company id: \"+expCompanyId, function(){\r",
													"//     for (var x=0; x < jsonData.length; x++)\r",
													"//     {\r",
													"//         pm.expect(jsonData[x].companyId).to.deep.eql(parseInt(expCompanyId));\r",
													"//         pm.expect(jsonData[x].productCode).to.be.oneOf(totalProductCode);\r",
													"\r",
													"//     }\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var cid = 1600;// pm.variables.get(\"companyAR\");",
													"console.log(\"Current company: \"+cid);",
													"pm.variables.set(\"CompanyIdAR\", cid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{CompanyIdAR}}/entitlements",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{CompanyIdAR}}",
												"entitlements"
											]
										},
										"description": "finding the roles for the user's company"
									},
									"response": []
								},
								{
									"name": "ProductRoles_activate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"var companyId = pm.variables.get(\"CompanyIdAR\");",
													"",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\" + companyId + \"/entitlements\"); //roles",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"    function (err, res) {",
													"    if (err) { console.log(\"error :\" + err); };",
													"",
													"    var responseJSONdata = res.json();",
													"    for (var i = 0; i < responseJSONdata.length; i++) {",
													"        if(responseJSONdata[i].roldeId == pm.variables.get(\"roldeId\"))",
													"        {",
													"        pm.test(\"To check /companies/{id} returns company details\", function () {",
													"            // for (var i = 0; i < responseJSONdata.length; i++) {",
													"            pm.expect(responseJSONdata[i].companyId).to.eql(parseInt(companyId));",
													"            // }",
													"        }); ",
													"        pm.test(\"To check Company Roles_activate\", function () {",
													"            // for (var i = 0; i < responseJSONdata.length; i++) {",
													"            pm.expect(responseJSONdata[i].isActive).to.eql(true);",
													"            // }",
													"        }); ",
													"        }",
													"    }",
													"});",
													"",
													"//This code will execute till we complete the company array counter",
													"var cmp_counter = pm.collectionVariables.get('cmp_counterAR');",
													"let c_limit = pm.collectionVariables.get(\"cmp_countAR\");",
													"let c_found = false;",
													"console.log(\"c_limit:\"+c_limit);",
													"console.log(\"cmp_counter:\"+cmp_counter);",
													"",
													"if(cmp_counter < c_limit && !c_found)",
													"{",
													"    console.log(\"setting next request\");",
													"    postman.setNextRequest(\"Get Company by ID NGA\");",
													"    pm.collectionVariables.unset(\"cmp_counterAR\");",
													"    pm.collectionVariables.set(\"cmp_counterAR\", parseInt(cmp_counter)+1);",
													"    console.log(\"--------->\"+cmp_counter);",
													"",
													"}else if(cmp_counter === c_limit)",
													"{",
													"    console.log(\"Condition match! Execution loop completed\");",
													"    pm.collectionVariables.set(\"cmp_counterAR\", 0);",
													"    pm.collectionVariables.set(\"cmp_countAR\", 0);",
													"    console.log(\"Counter reset to \"+pm.collectionVariables.get(\"cmp_counterAR\"));",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var cid = pm.variables.get(\"companyAR\");",
													"console.log(\"Current company: \"+cid);",
													"pm.variables.set(\"CompanyIdAR\", cid);",
													"// pm.variables.set(\"crolename1\", crolename1);",
													"// pm.variables.set(\"crid1\", crid1);",
													"// pm.variables.set(\"ccode1\", ccode1);",
													"// pm.variables.set(\"ccid1\", ccid1);",
													"// pm.variables.set(\"cpid1\", cpid1);",
													"//This is used to set data in the body and activate roles for company as per products.",
													"pm.variables.set(\"roldeId\", pm.variables.get(\"crid1\"));",
													"pm.variables.set(\"roleName\", pm.variables.get(\"crolename1\"));",
													"pm.variables.set(\"productCode\", pm.variables.get(\"ccode1\"));",
													"pm.variables.set(\"participantId\", pm.variables.get(\"cpid1\"));",
													"pm.variables.set(\"isActive\", true);",
													"// pm.variables.set(\"companyId\", pm.environment.get(\"MultiProductRoleCompany\"));",
													"// ////////////////////////////////////////////////////////////////////////////",
													"",
													"// //Get the role id for current combination which has been set in collectionVariables and use current one to activate company/product roles .",
													"// var totalRoleId = pm.collectionVariables.get(\"crid\").toString().split(',');",
													"// console.log(\"totalRoleId: \"+totalRoleId);",
													"// console.log(\"Total lenght of RoleId : \"+ totalRoleId.length);",
													"// pm.collectionVariables.set(\"totalRoleIdCount\", totalRoleId.length-1);",
													"// //Using counter select te 1st code from array of product code and so on..",
													"// var roleIdCounter = parseInt(pm.collectionVariables.get('roleId_count'));",
													"// pm.variables.set('currentRoleId', totalRoleId[roleIdCounter]);",
													"// var currentRoleId = pm.variables.get('currentRoleId'); ",
													"// console.log(\"current role Id---->\"+currentRoleId);",
													"// console.log(\"roleIdCounter:\"+roleIdCounter);",
													"// //------------------------------------------------------------------------------------",
													"// //Get the role name for current combination which has been set in collectionVariables and use current one to activate company/product roles .",
													"// var totalRoleName = pm.collectionVariables.get(\"crolename\").toString().split(',');",
													"// console.log(\"totalRoleName \"+totalRoleName);",
													"// console.log(\"Total lenght of RoleName : \"+ totalRoleName.length);",
													"// pm.collectionVariables.set(\"totalRoleNameCount\", totalRoleName.length-1);",
													"// //Using counter select te 1st code from array of product code and so on..",
													"// var roleNameCounter = parseInt(pm.collectionVariables.get('rolename_count'));",
													"// pm.variables.set('currentRoleName', totalRoleName[roleIdCounter]);",
													"// var currentRoleName = pm.variables.get('currentRoleName'); ",
													"// console.log(\"current role name---->\"+currentRoleName);",
													"// console.log(\"roleNameCounter:\"+roleNameCounter);",
													"// //------------------------------------------------------------------------------------",
													"// //Get the participant id for current combination which has been set in collectionVariables and use current one to activate company/product roles .",
													"// var totalParticipantId = pm.collectionVariables.get(\"cpid\").toString().split(',');",
													"// console.log(\"totalParticipantId \"+totalParticipantId);",
													"// console.log(\"Total lenght of ParticipantId : \"+ totalParticipantId.length);",
													"// pm.collectionVariables.set(\"totalParticipantIdCount\", totalParticipantId.length-1);",
													"// //Using counter select te 1st code from array of product code and so on..",
													"// var participantIdCounter = parseInt(pm.collectionVariables.get('participantId_count'));",
													"// pm.variables.set('currentParticipantId', totalParticipantId[participantIdCounter]);",
													"// var currentParticipantId = pm.variables.get('currentParticipantId'); ",
													"// console.log(\"current ParticipantId---->\"+currentParticipantId);",
													"// console.log(\"ParticipantIdCounter:\"+participantIdCounter);",
													"// //------------------------------------------------------------------------------------",
													"// //Get the product code for current combination which has been set in collectionVariables and use current one to activate company/product roles .",
													"// var totalProductCode = pm.collectionVariables.get(\"ccode\").toString().split(',');",
													"// console.log(\"totalProductCode \"+totalProductCode);",
													"// console.log(\"Total lenght of ProductCode : \"+ totalProductCode.length);",
													"// pm.collectionVariables.set(\"totaltotalProductCodeCount\", totalProductCode.length-1);",
													"// //Using counter select te 1st code from array of product code and so on..",
													"// var productCodeCounter = parseInt(pm.collectionVariables.get('productCode_count'));",
													"// pm.variables.set('currentproductCode', totalProductCode[productCodeCounter]);",
													"// var currentproductCode = pm.variables.get('currentproductCode'); ",
													"// console.log(\"current productCode--->\"+currentproductCode);",
													"// console.log(\"productCodeCounter:\"+productCodeCounter);",
													"//------------------------------------------------------------------------------------",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t{\n\t\t\"participantId\":{{participantId}},\n\t\t\"isActive\": {{isActive}},\n\t\t\"companyId\":{{CompanyIdAR}},\n\t\t\"productCode\":\"{{productCode}}\",\n\t\t\"roleId\":{{roldeId}},\n\t\t\"roleName\":\"{{roleName}}\"\n\t}\n]"
										},
										"url": {
											"raw": "{{baseURI}}/api/companies/{{CompanyIdAR}}/roles",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{CompanyIdAR}}",
												"roles"
											]
										},
										"description": "This is used to activate role for company. At a time 3 roles is activated for SCF, AR and INS."
									},
									"response": []
								},
								{
									"name": "POST Publications",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// var responseJSONdata = JSON.parse(responseBody);",
													"// try{",
													"//     if (pm.response.code == 200 && responseBody !== '') {",
													"//         for (i = 0; i < responseJSONdata.length; i++) ",
													"//         {",
													"//             pm.test(\"Validating Publications format from response body \", function () {",
													"//                 for (i = 0; i < responseJSONdata.length; i++) {",
													"//                     pm.expect(responseJSONdata[i]).to.have.all.keys('product', 'participantType','name','state','error');",
													"//                 }",
													"//             });",
													"//         }",
													"//     }",
													"// }",
													"// catch (e) {",
													"//     pm.test(\"Empty body response\", () => { throw new Error(e.message) });",
													"// }"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/Publications",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Publications"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "CheckUserEntitlement-OEN857",
							"item": [
								{
									"name": "Get Company by ID (roles)-OEN857",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expCompany = pm.variables.get(\"company\");\r",
													"console.log(expCompany);\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
													"    pm.expect(responseJSONdata.id).to.eql(parseInt(expCompany));\r",
													"}); \r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var companies = pm.environment.get(\"AR_Companies\").split(',');",
													"",
													"//This counter is used to traverse company id array and setting the current value to the variable 'company'",
													"var c_counter = pm.collectionVariables.get('cmp_counter');",
													"pm.variables.set('company', companies[c_counter]);",
													"console.log(\"Company counter:\" + c_counter);",
													"",
													"//This code is used to find the total count of product specific companies in the array.",
													"pm.collectionVariables.set('cmp_count', companies.length - 1);",
													"console.log(\"Total Company------>:\" + pm.collectionVariables.get(\"cmp_count\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{company}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{company}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Company Users-OEN857",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"CompanyId\", pm.variables.get(\"company\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"for(var i=0; i<jsonData.length;i++)\r",
													"{\r",
													"   if(jsonData[i].userName.includes(\"OEN858\") ) //QA858\r",
													"   {       \r",
													"        pm.variables.set(\"uid858\", jsonData[i].id);\r",
													"   }\r",
													"}\r",
													"console.log(\"-------\" +pm.variables.get(\"uid858\" ));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{CompanyId}}/users",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{CompanyId}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateUserPermissions-OEN857",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//This code is used to get current company and code.",
													"var companyId = pm.variables.get(\"company\"); //499;",
													"var currentCode = \"AR\";",
													"",
													"console.log(\"***********\" + currentCode);",
													"",
													"//This array conatains the read, write permissions.",
													"var permissionArray = [\"Maker\", \"Checker\"];",
													"",
													"//This request is used for getting company roles for the current products from which we get role id and role name.",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\"+ companyId + \"/roles?productCode=\" + currentCode + \"&isActive=true\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
													"      }",
													"}, ",
													"function (err, res) {",
													"        if (err) {console.log(\"error :\" + err); };",
													"        var jsonData = res.json();",
													"        var roleIdNew;",
													"        var roleNameNew;",
													"        // var jsonData = JSON.parse(responseBody);",
													"        for(i=0;i<jsonData.length;i++)",
													"        {",
													"            console.log(\"--------update permission -- for loop\");",
													"            if(jsonData[i].isActive == true)",
													"            {",
													"                if(jsonData[i].roleName.includes(\"Supplier\") && jsonData[i].participantId != 0)",
													"                {",
													"                    console.log(\"--------update permission -- if loop -- supplier\");",
													"",
													"                    roleIdNew = jsonData[i].roleId;",
													"                    roleNameNew = jsonData[i].roleName;",
													"                    pm.variables.set(\"roldeId\", roleIdNew);",
													"                    pm.variables.set(\"roleName\", roleNameNew);",
													"                    console.log(\"roleId--->\"+pm.variables.get(\"roldeId\"));",
													"                    console.log(\"roleName--->\"+pm.variables.get(\"roleName\"));",
													"                    break;",
													"",
													"                }",
													"            }",
													"        }",
													"    roleNameNew = String(roleNameNew);",
													"    var currentRole = roleNameNew.split('- ');",
													"    pm.variables.set('currentRole', currentRole[1]);",
													"    console.log(\"Current Company Role: \" + currentRole[1]);",
													"",
													"    //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
													"    // var permissioncount = pm.variables.get(\"permissioncounter\");",
													"    var permissioncount = pm.collectionVariables.get('permissioncount');",
													"    pm.collectionVariables.set('pa_count', permissionArray.length - 1);",
													"",
													"    pm.variables.set('permission', permissionArray[permissioncount]);",
													"    console.log(\"permissioncounter:\" + permissioncount);",
													"",
													"    //This 'combined' string is generated to so that we can get user permissions details",
													"    // if (currentCode == 'INS' && currentRole[1] == 'Insurance Carrier') {",
													"    //     combinedStr = currentCode + \" IC \" + permissionArray[permissioncount];",
													"    //     pm.variables.set(\"combinedStr\",combinedStr);",
													"    //     console.log(\"combinedStr------>\"+combinedStr);    }",
													"    // else if (currentCode == 'INS' && currentRole[1] == 'Insured Party') {",
													"    //     combinedStr = currentCode + \" IP \" + permissionArray[permissioncount];",
													"    //     console.log(\"combinedStr------>\" + combinedStr);",
													"",
													"    // }",
													"    // else {",
													"        combinedStr = currentCode + \" \" + currentRole[1] + \" \" + permissionArray[permissioncount];",
													"",
													"        pm.variables.set(\"combinedStr\",combinedStr);",
													"        console.log(\"combinedStr------>\"+combinedStr);   ",
													"        ",
													"         // }",
													"           ",
													"    var uId = pm.variables.get(\"uid858\");",
													"    var url = pm.variables.get(\"baseURI\");",
													"    url = url.concat(\"/api/userpermissions/\" + uId + \"/roles/\" + roleIdNew + \"?entityType=Company\");",
													"    pm.sendRequest({",
													"        url: url,",
													"        method: 'GET',",
													"        header: {",
													"            'Accept': 'application/json',",
													"            'Content-Type': 'application/json',",
													"            'x-platform-code':pm.environment.get(\"platformCode\"),",
													"           'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"        function (err, res) {",
													"            if (err) { console.log(\"error :\" + err); }",
													"            var jsonData = res.json();",
													"            var permissionName;",
													"            for (i = 0; i < jsonData.length; i++) {",
													"                if (jsonData[i].permissionBundleName.includes(combinedStr)) {",
													"                    if (jsonData[i].permissionBundleName.includes(\"Read\")) {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                    else {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                }",
													"",
													"            }",
													"            pm.variables.set(\"userId\", pm.variables.get(\"uid858\"));",
													"        });",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"\r",
													"//This code used for getting user permissions and verifying with updated permissions.\r",
													"var userId = pm.variables.get(\"uid858\");\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Company\";\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"   \r",
													"    pm.test(\"Validate the userpermissions updated for user \" + userId + \" returned for Company: \", function(){\r",
													"        var permissionFlag = false;\r",
													"        for( var i=0; i< jsonData.length; i++)\r",
													"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
													"            if (jsonData[i].permissionBundleName == pm.variables.get(\"combinedStr\"))\r",
													"            {\r",
													"                permissionFlag = true;\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"        pm.expect(permissionFlag).to.be.eql(true);\r",
													"   });\r",
													"   \r",
													"////////////////////////////////////////////////////////////////////////////////////////////\r",
													"\r",
													"//This code will execute till we complete the permission array counter\r",
													"    var permissioncounter = pm.collectionVariables.get('permissioncount');\r",
													"    let permissionLimit = pm.collectionVariables.get(\"pa_count\");\r",
													"    let found = false;\r",
													"    console.log(\"limit:\"+permissionLimit);\r",
													"    console.log(\"permissioncounter:\"+permissioncounter);\r",
													"    console.log(\"found:\"+found);\r",
													"    if(permissioncounter < permissionLimit && !found)\r",
													"    {\r",
													"        console.log(\"setting next request\");\r",
													"        postman.setNextRequest(\"UpdateUserPermissions-OEN857\");\r",
													"        pm.collectionVariables.unset(\"permissioncount\");\r",
													"        pm.variables.unset(\"roleName\");\r",
													"        pm.variables.unset(\"roldeId\");\r",
													"        pm.collectionVariables.set(\"permissioncount\", parseInt(permissioncounter)+1) ;\r",
													"        console.log(\"--------->\"+permissioncounter);\r",
													"    }else if(permissioncounter === permissionLimit)\r",
													"    {\r",
													"        console.log(\"Condition match! Execution loop completed\");\r",
													"        pm.collectionVariables.set(\"permissioncount\", 0) ;\r",
													"        pm.collectionVariables.set(\"pa_count\",0);\r",
													"        console.log(\"Counter reset to 0\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"userParticipantId\": {{userParticipantId}},\n        \"permissionBundleId\": {{permissionBundleId}},\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\n        \"isEntitled\": {{isEntitled}}\n    }\n] "
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userId}}",
												"roles",
												"{{roldeId}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Company"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserEntitlements-OEN857",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check UserEntitlements NOT NULL\", function () {\r",
													"      pm.expect(responseJSONdata.body).not.eql(null);\r",
													"}); \r",
													"\r",
													"pm.test(\"To check UserEntitlements for AR Supplier Maker & AR Supplier Checker \" , function () \r",
													"{\r",
													"      pm.expect(responseJSONdata[0].permissionNames).to.include(\"CreateTransaction\");\r",
													"      pm.expect(responseJSONdata[0].permissionNames).to.include(\"ViewTransactionTabs\");  \r",
													"      pm.expect(responseJSONdata[0].permissionNames).to.include(\"ViewTransaction\");      \r",
													"      pm.expect(responseJSONdata[0].permissionNames).to.include(\"ViewSupplierProfiles\");      \r",
													"      pm.expect(responseJSONdata[0].permissionNames).to.include(\"ViewRelationshipProfiles\");      \r",
													"      pm.expect(responseJSONdata[0].permissionNames).to.include(\"ViewNotificationsInterface\");      \r",
													"      pm.expect(responseJSONdata[0].permissionNames).to.include(\"ViewInvoiceTabs\");      \r",
													"      pm.expect(responseJSONdata[0].permissionNames).to.include(\"EditTransaction\");      \r",
													"      pm.expect(responseJSONdata[0].permissionNames).to.include(\"EditNotificationsInterface\");\r",
													"      pm.expect(responseJSONdata[0].permissionNames).to.include(\"SaveTransaction\");\r",
													"      pm.expect(responseJSONdata[0].permissionNames).to.include(\"ReleaseTransaction\");\r",
													"      pm.expect(responseJSONdata[0].permissionNames).to.include(\"BulkInvoiceImport\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenOen858}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
											"host": [
												"{{baseURI_userPermission}}"
											],
											"path": [
												"api",
												"UserEntitlements",
												"{{platformCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User Permissions/isEntitled_false-OEN857",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//This code is used to get current company and code.",
													"var companyId = pm.variables.get(\"company\"); //499;",
													"var currentCode = \"AR\";",
													"",
													"console.log(\"***********\" + currentCode);",
													"",
													"//This array conatains the read, write permissions.",
													"var permissionArray = [\"Maker\", \"Checker\"];",
													"",
													"//This request is used for getting company roles for the current products from which we get role id and role name.",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\"+ companyId + \"/roles?productCode=\" + currentCode + \"&isActive=true\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
													"      }",
													"}, ",
													"function (err, res) {",
													"        if (err) {console.log(\"error :\" + err); };",
													"        var jsonData = res.json();",
													"        var roleIdNew;",
													"        var roleNameNew;",
													"        // var jsonData = JSON.parse(responseBody);",
													"        for(i=0;i<jsonData.length;i++)",
													"        {",
													"            console.log(\"--------update permission -- for loop\");",
													"            if(jsonData[i].isActive == true)",
													"            {",
													"                if(jsonData[i].roleName.includes(\"Supplier\") && jsonData[i].participantId != 0)",
													"                {",
													"                    console.log(\"--------update permission -- if loop -- supplier\");",
													"",
													"                    roleIdNew = jsonData[i].roleId;",
													"                    roleNameNew = jsonData[i].roleName;",
													"                    pm.variables.set(\"roldeId\", roleIdNew);",
													"                    pm.variables.set(\"roleName\", roleNameNew);",
													"                    console.log(\"roleId--->\"+pm.variables.get(\"roldeId\"));",
													"                    console.log(\"roleName--->\"+pm.variables.get(\"roleName\"));",
													"                    break;",
													"",
													"                }",
													"            }",
													"        }",
													"    roleNameNew = String(roleNameNew);",
													"    var currentRole = roleNameNew.split('- ');",
													"    pm.variables.set('currentRole', currentRole[1]);",
													"    console.log(\"Current Company Role: \" + currentRole[1]);",
													"",
													"    //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
													"    // var permissioncount = pm.variables.get(\"permissioncounter\");",
													"    var permissioncount = pm.collectionVariables.get('permissioncount');",
													"    pm.collectionVariables.set('pa_count', permissionArray.length - 1);",
													"",
													"    pm.variables.set('permission', permissionArray[permissioncount]);",
													"    console.log(\"permissioncounter:\" + permissioncount);",
													"",
													"    //This 'combined' string is generated to so that we can get user permissions details",
													"    // if (currentCode == 'INS' && currentRole[1] == 'Insurance Carrier') {",
													"    //     combinedStr = currentCode + \" IC \" + permissionArray[permissioncount];",
													"    //     pm.variables.set(\"combinedStr\",combinedStr);",
													"    //     console.log(\"combinedStr------>\"+combinedStr);    }",
													"    // else if (currentCode == 'INS' && currentRole[1] == 'Insured Party') {",
													"    //     combinedStr = currentCode + \" IP \" + permissionArray[permissioncount];",
													"    //     console.log(\"combinedStr------>\" + combinedStr);",
													"",
													"    // }",
													"    // else {",
													"        combinedStr = currentCode + \" \" + currentRole[1] + \" \" + permissionArray[permissioncount];",
													"",
													"        pm.variables.set(\"combinedStr\",combinedStr);",
													"        console.log(\"combinedStr------>\"+combinedStr);   ",
													"        ",
													"         // }",
													"           ",
													"    var uId = pm.variables.get(\"uid858\");",
													"    var url = pm.variables.get(\"baseURI\");",
													"    url = url.concat(\"/api/userpermissions/\" + uId + \"/roles/\" + roleIdNew + \"?entityType=Company\");",
													"    pm.sendRequest({",
													"        url: url,",
													"        method: 'GET',",
													"        header: {",
													"            'Accept': 'application/json',",
													"            'Content-Type': 'application/json',",
													"            'x-platform-code':pm.environment.get(\"platformCode\"),",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"        function (err, res) {",
													"            if (err) { console.log(\"error :\" + err); }",
													"            var jsonData = res.json();",
													"            var permissionName;",
													"            for (i = 0; i < jsonData.length; i++) {",
													"                if (jsonData[i].permissionBundleName.includes(combinedStr)) {",
													"                    if (jsonData[i].permissionBundleName.includes(\"Read\")) {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                    else {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", false);",
													"                        break;",
													"                    }",
													"                }",
													"",
													"            }",
													"            pm.variables.set(\"userId\", pm.variables.get(\"uid858\"));",
													"        });",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"\r",
													"//This code will execute till we complete the permission array counter\r",
													"var permissioncounter = pm.collectionVariables.get('permissioncount');\r",
													"let permissionLimit = pm.collectionVariables.get(\"pa_count\");\r",
													"let found = false;\r",
													"console.log(\"limit:\"+permissionLimit);\r",
													"console.log(\"permissioncounter:\"+permissioncounter);\r",
													"console.log(\"found:\"+found);\r",
													"if(permissioncounter < permissionLimit && !found)\r",
													"{\r",
													"    console.log(\"setting next request\");\r",
													"    postman.setNextRequest(\"Update User Permissions/isEntitled_false-OEN857\");\r",
													"    pm.collectionVariables.unset(\"permissioncount\");\r",
													"    pm.variables.unset(\"roleName\");\r",
													"    pm.variables.unset(\"roldeId\");\r",
													"    pm.collectionVariables.set(\"permissioncount\", parseInt(permissioncounter)+1) ;\r",
													"    console.log(\"--------->\"+permissioncounter);\r",
													"}else if(permissioncounter === permissionLimit)\r",
													"{\r",
													"    console.log(\"Condition match! Execution loop completed\");\r",
													"    pm.collectionVariables.set(\"permissioncount\", 0) ;\r",
													"    pm.collectionVariables.set(\"pa_count\",0);\r",
													"    console.log(\"Counter reset to 0\");\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"userParticipantId\": {{userParticipantId}},\n        \"permissionBundleId\": {{permissionBundleId}},\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\n        \"isEntitled\": {{isEntitled}}\n    }\n] \n"
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userId}}",
												"roles",
												"{{roldeId}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Company"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "CheckUserEntitlement-OEN858-Write-Maker",
							"item": [
								{
									"name": "Get Company by ID (roles)-OEN858-Maker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expCompany = pm.variables.get(\"company\");\r",
													"console.log(expCompany);\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
													"    pm.expect(responseJSONdata.id).to.eql(parseInt(expCompany));\r",
													"}); \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var companies = pm.environment.get(\"AR_Companies\").split(',');",
													"",
													"//This counter is used to traverse company id array and setting the current value to the variable 'company'",
													"var c_counter = pm.collectionVariables.get('cmp_counter');",
													"pm.variables.set('company', companies[c_counter]);",
													"console.log(\"Company counter:\" + c_counter);",
													"",
													"//This code is used to find the total count of product specific companies in the array.",
													"pm.collectionVariables.set('cmp_count', companies.length - 1);",
													"console.log(\"Total Company------>:\" + pm.collectionVariables.get(\"cmp_count\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{company}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{company}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Company Users-OEN858-Maker",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"CompanyId\", pm.variables.get(\"company\"));",
													"   "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"for(var i=0; i<jsonData.length;i++)\r",
													"{\r",
													"   if(jsonData[i].userName.includes(\"OEN858\") )\r",
													"   {       \r",
													"        pm.variables.set(\"uid858\", jsonData[i].id);\r",
													"   }\r",
													"}\r",
													"console.log(\"-------\" +pm.variables.get(\"uid858\" ));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{CompanyId}}/users",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{CompanyId}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User Permissions-OEN858-Maker",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//This code is used to get current company and code.",
													"var companyId = pm.variables.get(\"company\"); ",
													"var currentCode = \"AR\";",
													"",
													"//This array conatains the read, write permissions.",
													"var permissionArray = [\"Write\",\"Maker\"];",
													"",
													"//This request is used for getting company roles for the current products from which we get role id and role name.",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\"+ companyId + \"/roles?productCode=\" + currentCode + \"&isActive=true\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
													"      }",
													"}, ",
													"function (err, res) {",
													"        if (err) {console.log(\"error :\" + err); };",
													"        var jsonData = res.json();",
													"        var roleIdNew;",
													"        var roleNameNew;",
													"        for(i=0;i<jsonData.length;i++)",
													"        {",
													"            console.log(\"--------update permission -- for loop\");",
													"            if(jsonData[i].isActive == true)",
													"            {",
													"                if(jsonData[i].roleName.includes(\"Supplier\") && jsonData[i].participantId != 0)",
													"                {",
													"                    console.log(\"--------update permission -- if loop -- supplier\");",
													"",
													"                    roleIdNew = jsonData[i].roleId;",
													"                    roleNameNew = jsonData[i].roleName;",
													"                    pm.variables.set(\"roldeId\", roleIdNew);",
													"                    pm.variables.set(\"roleName\", roleNameNew);",
													"                    console.log(\"roleId--->\"+pm.variables.get(\"roldeId\"));",
													"                    console.log(\"roleName--->\"+pm.variables.get(\"roleName\"));",
													"                    break;",
													"",
													"                }",
													"            }",
													"        }",
													"    roleNameNew = String(roleNameNew);",
													"    var currentRole = roleNameNew.split('- ');",
													"    pm.variables.set('currentRole', currentRole[1]);",
													"    console.log(\"Current Company Role: \" + currentRole[1]);",
													"",
													"    //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
													"    // var permissioncount = pm.variables.get(\"permissioncounter\");",
													"    var permissioncount = pm.collectionVariables.get('permissioncount');",
													"    pm.collectionVariables.set('pa_count', permissionArray.length - 1);",
													"",
													"    pm.variables.set('permission', permissionArray[permissioncount]);",
													"    console.log(\"permissioncounter:\" + permissioncount);",
													" ",
													"    combinedStr = currentCode + \" \" + currentRole[1] + \" \" + permissionArray[permissioncount];",
													"",
													"    pm.variables.set(\"combinedStr\",combinedStr);",
													"    console.log(\"combinedStr------>\"+combinedStr);    ",
													"           ",
													"    var uId = pm.variables.get(\"uid858\");",
													"    var url = pm.variables.get(\"baseURI\");",
													"    url = url.concat(\"/api/userpermissions/\" + uId + \"/roles/\" + roleIdNew + \"?entityType=Company\");",
													"    pm.sendRequest({",
													"        url: url,",
													"        method: 'GET',",
													"        header: {",
													"            'Accept': 'application/json',",
													"            'Content-Type': 'application/json',",
													"            'x-platform-code':pm.environment.get(\"platformCode\"),",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"        function (err, res) {",
													"            if (err) { console.log(\"error :\" + err); }",
													"            var jsonData = res.json();",
													"            var permissionName;",
													"            for (i = 0; i < jsonData.length; i++) {",
													"                if (jsonData[i].permissionBundleName.includes(combinedStr)) {",
													"                    if (jsonData[i].permissionBundleName.includes(\"Read\")) {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                    else {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                }",
													"",
													"            }",
													"            pm.variables.set(\"userId\", pm.variables.get(\"uid858\"));",
													"        });",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"//This code used for getting user permissions and verifying with updated permissions.\r",
													"var userId = pm.variables.get(\"uid858\");\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Company\";\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"   \r",
													"    pm.test(\"Validate the userpermissions updated for user \" + userId + \" returned for Company: \", function(){\r",
													"        var permissionFlag = false;\r",
													"        for( var i=0; i< jsonData.length; i++)\r",
													"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
													"            if (jsonData[i].permissionBundleName == pm.variables.get(\"combinedStr\"))\r",
													"            {\r",
													"                permissionFlag = true;\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"        pm.expect(permissionFlag).to.be.eql(true);\r",
													"   });\r",
													"   \r",
													"////////////////////////////////////////////////////////////////////////////////////////////\r",
													"\r",
													"//This code will execute till we complete the permission array counter\r",
													"    var permissioncounter = pm.collectionVariables.get('permissioncount');\r",
													"    let permissionLimit = pm.collectionVariables.get(\"pa_count\");\r",
													"    let found = false;\r",
													"    console.log(\"limit:\"+permissionLimit);\r",
													"    console.log(\"permissioncounter:\"+permissioncounter);\r",
													"    console.log(\"found:\"+found);\r",
													"    if(permissioncounter < permissionLimit && !found)\r",
													"    {\r",
													"        console.log(\"setting next request\");\r",
													"        postman.setNextRequest(\"Update User Permissions-OEN858-Maker\");\r",
													"        pm.collectionVariables.unset(\"permissioncount\");\r",
													"        pm.variables.unset(\"roleName\");\r",
													"        pm.variables.unset(\"roldeId\");\r",
													"        pm.collectionVariables.set(\"permissioncount\", parseInt(permissioncounter)+1) ;\r",
													"        console.log(\"--------->\"+permissioncounter);\r",
													"    }else if(permissioncounter === permissionLimit)\r",
													"    {\r",
													"        console.log(\"Condition match! Execution loop completed\");\r",
													"        pm.collectionVariables.set(\"permissioncount\", 0) ;\r",
													"        pm.collectionVariables.set(\"pa_count\",0);\r",
													"        console.log(\"Counter reset to 0\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"userParticipantId\": {{userParticipantId}},\n        \"permissionBundleId\": {{permissionBundleId}},\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\n        \"isEntitled\": {{isEntitled}}\n    }\n] \n"
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userId}}",
												"roles",
												"{{roldeId}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Company"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserEntitlements-OEN858-Maker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check UserEntitlements NOT NULL\", function () {\r",
													"      pm.expect(responseJSONdata.body).not.eql(null);\r",
													"}); \r",
													"\r",
													"pm.test(\"To check UserEntitlements - SaveTransaction \" , function () \r",
													"{\r",
													"      pm.expect(responseJSONdata[0].permissionNames).to.include(\"SaveTransaction\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenOen858}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
											"host": [
												"{{baseURI_userPermission}}"
											],
											"path": [
												"api",
												"UserEntitlements",
												"{{platformCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User Permissions/isEntitled_false-OEN858-Maker",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//This code is used to get current company and code.",
													"var companyId = pm.variables.get(\"company\"); ",
													"var currentCode = \"AR\";",
													"",
													"//This array conatains the read, write permissions.",
													"var permissionArray = [\"Write\",\"Maker\"];",
													"",
													"//This request is used for getting company roles for the current products from which we get role id and role name.",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\"+ companyId + \"/roles?productCode=\" + currentCode + \"&isActive=true\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
													"      }",
													"}, ",
													"function (err, res) {",
													"        if (err) {console.log(\"error :\" + err); };",
													"        var jsonData = res.json();",
													"        var roleIdNew;",
													"        var roleNameNew;",
													"        // var jsonData = JSON.parse(responseBody);",
													"        for(i=0;i<jsonData.length;i++)",
													"        {",
													"            console.log(\"--------update permission -- for loop\");",
													"            if(jsonData[i].isActive == true)",
													"            {",
													"                if(jsonData[i].roleName.includes(\"Supplier\") && jsonData[i].participantId != 0)",
													"                {",
													"                    console.log(\"--------update permission -- if loop -- supplier\");",
													"",
													"                    roleIdNew = jsonData[i].roleId;",
													"                    roleNameNew = jsonData[i].roleName;",
													"                    pm.variables.set(\"roldeId\", roleIdNew);",
													"                    pm.variables.set(\"roleName\", roleNameNew);",
													"                    console.log(\"roleId--->\"+pm.variables.get(\"roldeId\"));",
													"                    console.log(\"roleName--->\"+pm.variables.get(\"roleName\"));",
													"                    break;",
													"",
													"                }",
													"            }",
													"        }",
													"    roleNameNew = String(roleNameNew);",
													"    var currentRole = roleNameNew.split('- ');",
													"    pm.variables.set('currentRole', currentRole[1]);",
													"    console.log(\"Current Company Role: \" + currentRole[1]);",
													"",
													"    //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
													"    // var permissioncount = pm.variables.get(\"permissioncounter\");",
													"    var permissioncount = pm.collectionVariables.get('permissioncount');",
													"    pm.collectionVariables.set('pa_count', permissionArray.length - 1);",
													"",
													"    pm.variables.set('permission', permissionArray[permissioncount]);",
													"    console.log(\"permissioncounter:\" + permissioncount);",
													"",
													"    //This 'combined' string is generated to so that we can get user permissions details",
													"    combinedStr = currentCode + \" \" + currentRole[1] + \" \" + permissionArray[permissioncount];",
													"",
													"    pm.variables.set(\"combinedStr\",combinedStr);",
													"    console.log(\"combinedStr------>\"+combinedStr);   ",
													"           ",
													"    var uId = pm.variables.get(\"uid858\");",
													"    var url = pm.variables.get(\"baseURI\");",
													"    url = url.concat(\"/api/userpermissions/\" + uId + \"/roles/\" + roleIdNew + \"?entityType=Company\");",
													"    pm.sendRequest({",
													"        url: url,",
													"        method: 'GET',",
													"        header: {",
													"            'Accept': 'application/json',",
													"            'Content-Type': 'application/json',",
													"            'x-platform-code':pm.environment.get(\"platformCode\"),",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"        function (err, res) {",
													"            if (err) { console.log(\"error :\" + err); }",
													"            var jsonData = res.json();",
													"            var permissionName;",
													"            for (i = 0; i < jsonData.length; i++) {",
													"                if (jsonData[i].permissionBundleName.includes(combinedStr)) {",
													"                    if (jsonData[i].permissionBundleName.includes(\"Read\")) {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                    else {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", false);",
													"                        break;",
													"                    }",
													"                }",
													"",
													"            }",
													"            pm.variables.set(\"userId\", pm.variables.get(\"uid858\"));",
													"        });",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"\r",
													"//This code will execute till we complete the permission array counter\r",
													"var permissioncounter = pm.collectionVariables.get('permissioncount');\r",
													"let permissionLimit = pm.collectionVariables.get(\"pa_count\");\r",
													"let found = false;\r",
													"console.log(\"limit:\"+permissionLimit);\r",
													"console.log(\"permissioncounter:\"+permissioncounter);\r",
													"console.log(\"found:\"+found);\r",
													"if(permissioncounter < permissionLimit && !found)\r",
													"{\r",
													"    console.log(\"setting next request\");\r",
													"    postman.setNextRequest(\"Update User Permissions/isEntitled_false-OEN858-Maker\");\r",
													"    pm.collectionVariables.unset(\"permissioncount\");\r",
													"    pm.variables.unset(\"roleName\");\r",
													"    pm.variables.unset(\"roldeId\");\r",
													"    pm.collectionVariables.set(\"permissioncount\", parseInt(permissioncounter)+1) ;\r",
													"    console.log(\"--------->\"+permissioncounter);\r",
													"}else if(permissioncounter === permissionLimit)\r",
													"{\r",
													"    console.log(\"Condition match! Execution loop completed\");\r",
													"    pm.collectionVariables.set(\"permissioncount\", 0) ;\r",
													"    pm.collectionVariables.set(\"pa_count\",0);\r",
													"    console.log(\"Counter reset to 0\");\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"userParticipantId\": {{userParticipantId}},\n        \"permissionBundleId\": {{permissionBundleId}},\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\n        \"isEntitled\": {{isEntitled}}\n    }\n] \n"
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userId}}",
												"roles",
												"{{roldeId}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Company"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "CheckUserEntitlement-OEN858-Write-Checker",
							"item": [
								{
									"name": "Get Company by ID (roles)-OEN858-Checker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expCompany = pm.variables.get(\"company\");\r",
													"console.log(expCompany);\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
													"    pm.expect(responseJSONdata.id).to.eql(parseInt(expCompany));\r",
													"}); \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var companies = pm.environment.get(\"AR_Companies\").split(',');",
													"",
													"//This counter is used to traverse company id array and setting the current value to the variable 'company'",
													"var c_counter = pm.collectionVariables.get('cmp_counter');",
													"pm.variables.set('company', companies[c_counter]);",
													"console.log(\"Company counter:\" + c_counter);",
													"",
													"//This code is used to find the total count of product specific companies in the array.",
													"pm.collectionVariables.set('cmp_count', companies.length - 1);",
													"console.log(\"Total Company------>:\" + pm.collectionVariables.get(\"cmp_count\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{company}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{company}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Company Users-OEN858-Checker",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"CompanyId\", pm.variables.get(\"company\"));",
													"   "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"for(var i=0; i<jsonData.length;i++)\r",
													"{\r",
													"   if(jsonData[i].userName.includes(\"OEN858\") )\r",
													"   {       \r",
													"        pm.variables.set(\"uid858\", jsonData[i].id);\r",
													"   }\r",
													"}\r",
													"console.log(\"-------\" +pm.variables.get(\"uid858\" ));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{CompanyId}}/users",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{CompanyId}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User Permissions-OEN858-Checker",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//This code is used to get current company and code.",
													"var companyId = pm.variables.get(\"company\"); ",
													"var currentCode = \"AR\";",
													"",
													"//This array conatains the read, write permissions.",
													"var permissionArray = [\"Write\",\"Checker\"];",
													"",
													"//This request is used for getting company roles for the current products from which we get role id and role name.",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\"+ companyId + \"/roles?productCode=\" + currentCode + \"&isActive=true\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
													"      }",
													"}, ",
													"function (err, res) {",
													"        if (err) {console.log(\"error :\" + err); };",
													"        var jsonData = res.json();",
													"        var roleIdNew;",
													"        var roleNameNew;",
													"        for(i=0;i<jsonData.length;i++)",
													"        {",
													"            console.log(\"--------update permission -- for loop\");",
													"            if(jsonData[i].isActive == true)",
													"            {",
													"                if(jsonData[i].roleName.includes(\"Supplier\") && jsonData[i].participantId != 0)",
													"                {",
													"                    console.log(\"--------update permission -- if loop -- supplier\");",
													"",
													"                    roleIdNew = jsonData[i].roleId;",
													"                    roleNameNew = jsonData[i].roleName;",
													"                    pm.variables.set(\"roldeId\", roleIdNew);",
													"                    pm.variables.set(\"roleName\", roleNameNew);",
													"                    console.log(\"roleId--->\"+pm.variables.get(\"roldeId\"));",
													"                    console.log(\"roleName--->\"+pm.variables.get(\"roleName\"));",
													"                    break;",
													"",
													"                }",
													"            }",
													"        }",
													"    roleNameNew = String(roleNameNew);",
													"    var currentRole = roleNameNew.split('- ');",
													"    pm.variables.set('currentRole', currentRole[1]);",
													"    console.log(\"Current Company Role: \" + currentRole[1]);",
													"",
													"    //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
													"    // var permissioncount = pm.variables.get(\"permissioncounter\");",
													"    var permissioncount = pm.collectionVariables.get('permissioncount');",
													"    pm.collectionVariables.set('pa_count', permissionArray.length - 1);",
													"",
													"    pm.variables.set('permission', permissionArray[permissioncount]);",
													"    console.log(\"permissioncounter:\" + permissioncount);",
													" ",
													"    combinedStr = currentCode + \" \" + currentRole[1] + \" \" + permissionArray[permissioncount];",
													"",
													"    pm.variables.set(\"combinedStr\",combinedStr);",
													"    console.log(\"combinedStr------>\"+combinedStr);    ",
													"           ",
													"    var uId = pm.variables.get(\"uid858\");",
													"    var url = pm.variables.get(\"baseURI\");",
													"    url = url.concat(\"/api/userpermissions/\" + uId + \"/roles/\" + roleIdNew + \"?entityType=Company\");",
													"    pm.sendRequest({",
													"        url: url,",
													"        method: 'GET',",
													"        header: {",
													"            'Accept': 'application/json',",
													"            'Content-Type': 'application/json',",
													"            'x-platform-code':pm.environment.get(\"platformCode\"),",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"        function (err, res) {",
													"            if (err) { console.log(\"error :\" + err); }",
													"            var jsonData = res.json();",
													"            var permissionName;",
													"            for (i = 0; i < jsonData.length; i++) {",
													"                if (jsonData[i].permissionBundleName.includes(combinedStr)) {",
													"                    if (jsonData[i].permissionBundleName.includes(\"Read\")) {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                    else {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                }",
													"",
													"            }",
													"            pm.variables.set(\"userId\", pm.variables.get(\"uid858\"));",
													"        });",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"\r",
													"//This code used for getting user permissions and verifying with updated permissions.\r",
													"var userId = pm.variables.get(\"uid858\");\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Company\";\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"   \r",
													"    pm.test(\"Validate the userpermissions updated for user \" + userId + \" returned for Company: \", function(){\r",
													"        var permissionFlag = false;\r",
													"        for( var i=0; i< jsonData.length; i++)\r",
													"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
													"            if (jsonData[i].permissionBundleName == pm.variables.get(\"combinedStr\"))\r",
													"            {\r",
													"                permissionFlag = true;\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"        pm.expect(permissionFlag).to.be.eql(true);\r",
													"   });\r",
													"   \r",
													"////////////////////////////////////////////////////////////////////////////////////////////\r",
													"\r",
													"//This code will execute till we complete the permission array counter\r",
													"    var permissioncounter = pm.collectionVariables.get('permissioncount');\r",
													"    let permissionLimit = pm.collectionVariables.get(\"pa_count\");\r",
													"    let found = false;\r",
													"    console.log(\"limit:\"+permissionLimit);\r",
													"    console.log(\"permissioncounter:\"+permissioncounter);\r",
													"    console.log(\"found:\"+found);\r",
													"    if(permissioncounter < permissionLimit && !found)\r",
													"    {\r",
													"        console.log(\"setting next request\");\r",
													"        postman.setNextRequest(\"Update User Permissions-OEN858-Checker\");\r",
													"        pm.collectionVariables.unset(\"permissioncount\");\r",
													"        pm.variables.unset(\"roleName\");\r",
													"        pm.variables.unset(\"roldeId\");\r",
													"        pm.collectionVariables.set(\"permissioncount\", parseInt(permissioncounter)+1) ;\r",
													"        console.log(\"--------->\"+permissioncounter);\r",
													"    }else if(permissioncounter === permissionLimit)\r",
													"    {\r",
													"        console.log(\"Condition match! Execution loop completed\");\r",
													"        pm.collectionVariables.set(\"permissioncount\", 0) ;\r",
													"        pm.collectionVariables.set(\"pa_count\",0);\r",
													"        console.log(\"Counter reset to 0\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"userParticipantId\": {{userParticipantId}},\n        \"permissionBundleId\": {{permissionBundleId}},\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\n        \"isEntitled\": {{isEntitled}}\n    }\n] \n"
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userId}}",
												"roles",
												"{{roldeId}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Company"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserEntitlements-OEN858-Checker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"To check UserEntitlements NOT NULL\", function () {\r",
													"      pm.expect(responseJSONdata.body).not.eql(null);\r",
													"}); \r",
													"\r",
													"pm.test(\"To check UserEntitlements - ReleaseTransaction \" , function () \r",
													"{\r",
													"      pm.expect(responseJSONdata[0].permissionNames).to.include(\"ReleaseTransaction\");  \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenOen858}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
											"host": [
												"{{baseURI_userPermission}}"
											],
											"path": [
												"api",
												"UserEntitlements",
												"{{platformCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User Permissions/isEntitled_false-OEN858-Checker",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//This code is used to get current company and code.",
													"var companyId = pm.variables.get(\"company\"); ",
													"var currentCode = \"AR\";",
													"",
													"//This array conatains the read, write permissions.",
													"var permissionArray = [\"Checker\"];",
													"",
													"//This request is used for getting company roles for the current products from which we get role id and role name.",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\"+ companyId + \"/roles?productCode=\" + currentCode + \"&isActive=true\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
													"      }",
													"}, ",
													"function (err, res) {",
													"        if (err) {console.log(\"error :\" + err); };",
													"        var jsonData = res.json();",
													"        var roleIdNew;",
													"        var roleNameNew;",
													"        // var jsonData = JSON.parse(responseBody);",
													"        for(i=0;i<jsonData.length;i++)",
													"        {",
													"            console.log(\"--------update permission -- for loop\");",
													"            if(jsonData[i].isActive == true)",
													"            {",
													"                if(jsonData[i].roleName.includes(\"Supplier\") && jsonData[i].participantId != 0)",
													"                {",
													"                    console.log(\"--------update permission -- if loop -- supplier\");",
													"",
													"                    roleIdNew = jsonData[i].roleId;",
													"                    roleNameNew = jsonData[i].roleName;",
													"                    pm.variables.set(\"roldeId\", roleIdNew);",
													"                    pm.variables.set(\"roleName\", roleNameNew);",
													"                    console.log(\"roleId--->\"+pm.variables.get(\"roldeId\"));",
													"                    console.log(\"roleName--->\"+pm.variables.get(\"roleName\"));",
													"                    break;",
													"",
													"                }",
													"            }",
													"        }",
													"    roleNameNew = String(roleNameNew);",
													"    var currentRole = roleNameNew.split('- ');",
													"    pm.variables.set('currentRole', currentRole[1]);",
													"    console.log(\"Current Company Role: \" + currentRole[1]);",
													"",
													"    //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
													"    // var permissioncount = pm.variables.get(\"permissioncounter\");",
													"    var permissioncount = pm.collectionVariables.get('permissioncount');",
													"    pm.collectionVariables.set('pa_count', permissionArray.length - 1);",
													"",
													"    pm.variables.set('permission', permissionArray[permissioncount]);",
													"    console.log(\"permissioncounter:\" + permissioncount);",
													"",
													"    //This 'combined' string is generated to so that we can get user permissions details",
													"    combinedStr = currentCode + \" \" + currentRole[1] + \" \" + permissionArray[permissioncount];",
													"",
													"    pm.variables.set(\"combinedStr\",combinedStr);",
													"    console.log(\"combinedStr------>\"+combinedStr);   ",
													"           ",
													"    var uId = pm.variables.get(\"uid858\");",
													"    var url = pm.variables.get(\"baseURI\");",
													"    url = url.concat(\"/api/userpermissions/\" + uId + \"/roles/\" + roleIdNew + \"?entityType=Company\");",
													"    pm.sendRequest({",
													"        url: url,",
													"        method: 'GET',",
													"        header: {",
													"            'Accept': 'application/json',",
													"            'Content-Type': 'application/json',",
													"            'x-platform-code':pm.environment.get(\"platformCode\"),",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"        function (err, res) {",
													"            if (err) { console.log(\"error :\" + err); }",
													"            var jsonData = res.json();",
													"            var permissionName;",
													"            for (i = 0; i < jsonData.length; i++) {",
													"                if (jsonData[i].permissionBundleName.includes(combinedStr)) {",
													"                    if (jsonData[i].permissionBundleName.includes(\"Read\")) {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                    else {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", false);",
													"                        break;",
													"                    }",
													"                }",
													"",
													"            }",
													"            pm.variables.set(\"userId\", pm.variables.get(\"uid858\"));",
													"        });",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"\r",
													"//This code will execute till we complete the permission array counter\r",
													"var permissioncounter = pm.collectionVariables.get('permissioncount');\r",
													"let permissionLimit = pm.collectionVariables.get(\"pa_count\");\r",
													"let found = false;\r",
													"console.log(\"limit:\"+permissionLimit);\r",
													"console.log(\"permissioncounter:\"+permissioncounter);\r",
													"console.log(\"found:\"+found);\r",
													"if(permissioncounter < permissionLimit && !found)\r",
													"{\r",
													"    console.log(\"setting next request\");\r",
													"    postman.setNextRequest(\"Update User Permissions/isEntitled_false-OEN858-Checker\");\r",
													"    pm.collectionVariables.unset(\"permissioncount\");\r",
													"    pm.variables.unset(\"roleName\");\r",
													"    pm.variables.unset(\"roldeId\");\r",
													"    pm.collectionVariables.set(\"permissioncount\", parseInt(permissioncounter)+1) ;\r",
													"    console.log(\"--------->\"+permissioncounter);\r",
													"}else if(permissioncounter === permissionLimit)\r",
													"{\r",
													"    console.log(\"Condition match! Execution loop completed\");\r",
													"    pm.collectionVariables.set(\"permissioncount\", 0) ;\r",
													"    pm.collectionVariables.set(\"pa_count\",0);\r",
													"    console.log(\"Counter reset to 0\");\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"userParticipantId\": {{userParticipantId}},\n        \"permissionBundleId\": {{permissionBundleId}},\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\n        \"isEntitled\": {{isEntitled}}\n    }\n] \n"
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userId}}",
												"roles",
												"{{roldeId}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Company"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "SupplyChain",
					"item": [
						{
							"name": "CheckSCFBuyerGroupPermission-OEN-1632",
							"item": [
								{
									"name": "GETGroupsById-OEN-1632",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"var SCFBuyerGroupCmpId = responseJSONdata.companies[0].id;\r",
													"console.log(\"SCFBuyerGroupCmpId ----> \" +SCFBuyerGroupCmpId);\r",
													"pm.variables.set(\"SCFBuyerGroupCmpId\",SCFBuyerGroupCmpId);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Groups?count=1000&skip=0\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"    for(i=0;i<jsonData.length; i++)\r",
													"    {\r",
													"        if(jsonData[i].name.includes(\"SCFBuyer_EntlAPIGroup\"))\r",
													"        {\r",
													"            pm.variables.set(\"SCFBuyerGrpId\",jsonData[i].id);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/Groups/{{SCFBuyerGrpId}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Groups",
												"{{SCFBuyerGrpId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Company by ID (roles)-OEN-1632",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expCompany = pm.variables.get(\"SCFBuyerGroupCmpId\");\r",
													"console.log(expCompany);\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
													"    pm.expect(responseJSONdata.id).to.eql(parseInt(expCompany));\r",
													"}); \r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"SCFBuyerGroupCmpId\",pm.variables.get(\"SCFBuyerGroupCmpId\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{SCFBuyerGroupCmpId}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{SCFBuyerGroupCmpId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Company Users-OEN-1632",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"CompanyId\", pm.variables.get(\"SCFBuyerGroupCmpId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"    \r",
													"pm.variables.set(\"SCFBuyerGroupUserId\", jsonData[0].id);\r",
													"\r",
													"console.log(\"-------\" +pm.variables.get(\"SCFBuyerGroupUserId\" ));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{CompanyId}}/users",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{CompanyId}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateGroupUserPermissionsEnable-OEN-1632",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//This code is used to get current company and code.",
													"var companyId = pm.variables.get(\"SCFBuyerGroupCmpId\"); //499;",
													"var currentCode = \"SCF\";",
													"",
													"console.log(\"***********\" + currentCode);",
													"",
													"//This array conatains the read, write permissions.",
													"var permissionArray = [\"Facility View\"];",
													"",
													"//This request is used for getting company roles for the current products from which we get role id and role name.",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\"+ companyId + \"/roles?productCode=\" + currentCode+\"&isActive=true\" );",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
													"      }",
													"}, ",
													"function (err, res) {",
													"        if (err) {console.log(\"error :\" + err); };",
													"        var jsonData = res.json();",
													"        var roleIdNew;",
													"        var roleNameNew;",
													"        // var jsonData = JSON.parse(responseBody);",
													"        for(i=0;i<jsonData.length;i++)",
													"        {",
													"            console.log(\"--------update permission -- for loop\");",
													"            if(jsonData[i].isActive == true)",
													"            {",
													"                if(jsonData[i].roleName.includes(\"Buyer\") && jsonData[i].participantId != 0)",
													"                {",
													"                    console.log(\"--------update permission -- if loop -- Buyer\");",
													"",
													"                    roleIdNew = jsonData[i].roleId;",
													"                    roleNameNew = jsonData[i].roleName;",
													"                    pm.variables.set(\"roldeId\", roleIdNew);",
													"                    pm.variables.set(\"roleName\", roleNameNew);",
													"                    console.log(\"roleId--->\"+pm.variables.get(\"roldeId\"));",
													"                    console.log(\"roleName--->\"+pm.variables.get(\"roleName\"));",
													"                    break;",
													"",
													"                }",
													"            }",
													"        }",
													"    roleNameNew = String(roleNameNew);",
													"    var currentRole = roleNameNew.split('- ');",
													"    pm.variables.set('currentRole', currentRole[1]);",
													"    console.log(\"Current Company Role: \" + currentRole[1]);",
													"",
													"    //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
													"    var permissioncount = pm.collectionVariables.get('permissioncount');",
													"    pm.collectionVariables.set('pa_count', permissionArray.length - 1);",
													"",
													"    pm.variables.set('permission', permissionArray[permissioncount]);",
													"    console.log(\"permissioncounter:\" + permissioncount);",
													"",
													"    //This 'combined' string is generated to so that we can get user permissions details",
													"",
													"    combinedStr = currentCode + \" \" +  permissionArray[permissioncount];",
													"",
													"    pm.variables.set(\"combinedStr\",combinedStr);",
													"    console.log(\"combinedStr------>\"+combinedStr);   ",
													"                  ",
													"    var uId = pm.variables.get(\"SCFBuyerGroupUserId\");",
													"    var url = pm.variables.get(\"baseURI\");",
													"    url = url.concat(\"/api/userpermissions/\" + uId + \"/roles/\" + roleIdNew + \"?entityType=Group\");",
													"    pm.sendRequest({",
													"        url: url,",
													"        method: 'GET',",
													"        header: {",
													"            'Accept': 'application/json',",
													"            'Content-Type': 'application/json',",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),  ",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"        function (err, res) {",
													"            if (err) { console.log(\"error :\" + err); }",
													"            var jsonData = res.json();",
													"            var permissionName;",
													"            for (i = 0; i < jsonData.length; i++) {",
													"                if (jsonData[i].permissionBundleName.includes(combinedStr)) {",
													"                    if (jsonData[i].permissionBundleName.includes(\"Facility View\")) {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                    else {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                }",
													"",
													"            }",
													"            pm.variables.set(\"userId\", pm.variables.get(\"SCFBuyerGroupUserId\"));",
													"        });",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"\r",
													"//This code used for getting user permissions and verifying with updated permissions.\r",
													"var userId = pm.variables.get(\"SCFBuyerGroupUserId\");\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Group\";\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"   \r",
													"    pm.test(\"Validate the userpermissions updated for user \" + userId + \" returned for Company: \", function(){\r",
													"        var permissionFlag = false;\r",
													"        for( var i=0; i< jsonData.length; i++)\r",
													"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
													"            if (jsonData[i].permissionBundleName == pm.variables.get(\"combinedStr\"))\r",
													"            {\r",
													"                permissionFlag = true;\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"        pm.expect(permissionFlag).to.be.eql(true);\r",
													"   });\r",
													"});   \r",
													"////////////////////////////////////////////////////////////////////////////////////////////\r",
													"\r",
													"//This code will execute till we complete the permission array counter\r",
													"//     var permissioncounter = pm.collectionVariables.get('permissioncount');\r",
													"//     let permissionLimit = pm.collectionVariables.get(\"pa_count\");\r",
													"//     let found = false;\r",
													"//     console.log(\"limit:\"+permissionLimit);\r",
													"//     console.log(\"permissioncounter:\"+permissioncounter);\r",
													"//     console.log(\"found:\"+found);\r",
													"//     if(permissioncounter < permissionLimit && !found)\r",
													"//     {\r",
													"//         console.log(\"setting next request\");\r",
													"//         postman.setNextRequest(\"UpdateUserPermissions-OEN857\");\r",
													"//         pm.collectionVariables.unset(\"permissioncount\");\r",
													"//         pm.variables.unset(\"roleName\");\r",
													"//         pm.variables.unset(\"roldeId\");\r",
													"//         pm.collectionVariables.set(\"permissioncount\", parseInt(permissioncounter)+1) ;\r",
													"//         console.log(\"--------->\"+permissioncounter);\r",
													"//     }else if(permissioncounter === permissionLimit)\r",
													"//     {\r",
													"//         console.log(\"Condition match! Execution loop completed\");\r",
													"//         pm.collectionVariables.set(\"permissioncount\", 0) ;\r",
													"//         pm.collectionVariables.set(\"pa_count\",0);\r",
													"//         console.log(\"Counter reset to 0\");\r",
													"//     }\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"userParticipantId\": {{userParticipantId}},\n        \"permissionBundleId\": {{permissionBundleId}},\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\n        \"isEntitled\": {{isEntitled}}\n    }\n] "
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Group",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userId}}",
												"roles",
												"{{roldeId}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Group"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateGroupUserPermissionsDisable-OEN-1632",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//This code is used to get current company and code.",
													"var companyId = pm.variables.get(\"SCFBuyerGroupCmpId\"); //499;",
													"var currentCode = \"SCF\";",
													"",
													"console.log(\"***********\" + currentCode);",
													"",
													"//This array conatains the read, write permissions.",
													"var permissionArray = [\"Facility View\"];",
													"",
													"//This request is used for getting company roles for the current products from which we get role id and role name.",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\"+ companyId + \"/roles?productCode=\" + currentCode +\"&isActive=true\" );",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
													"      }",
													"}, ",
													"function (err, res) {",
													"        if (err) {console.log(\"error :\" + err); };",
													"        var jsonData = res.json();",
													"        var roleIdNew;",
													"        var roleNameNew;",
													"        // var jsonData = JSON.parse(responseBody);",
													"        for(i=0;i<jsonData.length;i++)",
													"        {",
													"            console.log(\"--------update permission -- for loop\");",
													"            if(jsonData[i].isActive == true)",
													"            {",
													"                if(jsonData[i].roleName.includes(\"Supplier\") && jsonData[i].participantId != 0)",
													"                {",
													"                    console.log(\"--------update permission -- if loop -- supplier\");",
													"",
													"                    roleIdNew = jsonData[i].roleId;",
													"                    roleNameNew = jsonData[i].roleName;",
													"                    pm.variables.set(\"roldeId\", roleIdNew);",
													"                    pm.variables.set(\"roleName\", roleNameNew);",
													"                    console.log(\"roleId--->\"+pm.variables.get(\"roldeId\"));",
													"                    console.log(\"roleName--->\"+pm.variables.get(\"roleName\"));",
													"                    break;",
													"",
													"                }",
													"            }",
													"        }",
													"    roleNameNew = String(roleNameNew);",
													"    var currentRole = roleNameNew.split('- ');",
													"    pm.variables.set('currentRole', currentRole[1]);",
													"    console.log(\"Current Company Role: \" + currentRole[1]);",
													"",
													"    //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
													"    // var permissioncount = pm.variables.get(\"permissioncounter\");",
													"    var permissioncount = pm.collectionVariables.get('permissioncount');",
													"    pm.collectionVariables.set('pa_count', permissionArray.length - 1);",
													"",
													"    pm.variables.set('permission', permissionArray[permissioncount]);",
													"    console.log(\"permissioncounter:\" + permissioncount);",
													"",
													"    //This 'combined' string is generated to so that we can get user permissions details",
													"    combinedStr = currentCode + \" \" +  permissionArray[permissioncount];",
													"",
													"",
													"    pm.variables.set(\"combinedStr\",combinedStr);",
													"    console.log(\"combinedStr------>\"+combinedStr);   ",
													"           ",
													"    var uId = pm.variables.get(\"SCFBuyerGroupUserId\");",
													"    var url = pm.variables.get(\"baseURI\");",
													"    url = url.concat(\"/api/userpermissions/\" + uId + \"/roles/\" + roleIdNew + \"?entityType=Group\");",
													"    pm.sendRequest({",
													"        url: url,",
													"        method: 'GET',",
													"        header: {",
													"            'Accept': 'application/json',",
													"            'Content-Type': 'application/json',",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"        function (err, res) {",
													"            if (err) { console.log(\"error :\" + err); }",
													"            var jsonData = res.json();",
													"            var permissionName;",
													"            for (i = 0; i < jsonData.length; i++) {",
													"                if (jsonData[i].permissionBundleName.includes(combinedStr)) {",
													"                    if (jsonData[i].permissionBundleName.includes(\"Facility View\")) {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", false);",
													"                        break;",
													"                    }",
													"                    else {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", false);",
													"                        break;",
													"                    }",
													"                }",
													"",
													"            }",
													"            pm.variables.set(\"userId\", pm.variables.get(\"SCFBuyerGroupUserId\"));",
													"        });",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"\r",
													"//This code used for getting user permissions and verifying with updated permissions.\r",
													"var userId = pm.variables.get(\"SCFBuyerGroupUserId\");\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Group\";\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"   \r",
													"    pm.test(\"Validate the userpermissions updated for user \" + userId + \" returned for Company: \", function(){\r",
													"        var permissionFlag = false;\r",
													"        for( var i=0; i< jsonData.length; i++)\r",
													"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
													"            if (jsonData[i].permissionBundleName == pm.variables.get(\"combinedStr\"))\r",
													"            {\r",
													"                permissionFlag = true;\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"        pm.expect(permissionFlag).to.be.eql(true);\r",
													"   });\r",
													"});   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"userParticipantId\": {{userParticipantId}},\n        \"permissionBundleId\": {{permissionBundleId}},\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\n        \"isEntitled\": {{isEntitled}}\n    }\n] "
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Group",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userId}}",
												"roles",
												"{{roldeId}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Group"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "SCF-Supplier-Maker-OEN-1985",
							"item": [
								{
									"name": "Get Company by ID-OEN-1985",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expCompany = pm.variables.get(\"company\");\r",
													"console.log(expCompany);\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
													"    pm.expect(responseJSONdata.id).to.eql(parseInt(expCompany));\r",
													"}); \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var companies = pm.environment.get(\"SCF_Companies\").split(',');",
													"pm.variables.set('company', companies[0]);",
													"",
													"// //This counter is used to traverse company id array and setting the current value to the variable 'company'",
													"// var c_counter = pm.collectionVariables.get('cmp_counter');",
													"// pm.variables.set('company', companies[c_counter]);",
													"// console.log(\"Company counter:\" + c_counter);",
													"",
													"// //This code is used to find the total count of product specific companies in the array.",
													"// pm.collectionVariables.set('cmp_count', companies.length - 1);",
													"// console.log(\"Total Company------>:\" + pm.collectionVariables.get(\"cmp_count\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{company}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{company}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Company Users-OEN-1985",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"CompanyId\", pm.variables.get(\"company\"));",
													"   "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.variables.set(\"uid1985\", jsonData[0].id);\r",
													"console.log(\"-------\" +pm.variables.get(\"uid1985\" ));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{CompanyId}}/users",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{CompanyId}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User Permissions-OEN-1985",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//This code is used to get current company and code.",
													"var companyId = pm.variables.get(\"company\"); ",
													"var currentCode = \"SCF\";",
													"",
													"//This array conatains the read, write permissions.",
													"var permissionArray = [\"Maker\"];",
													"",
													"//This request is used for getting company roles for the current products from which we get role id and role name.",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\"+ companyId + \"/roles?productCode=\" + currentCode + \"&isActive=true\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
													"      }",
													"}, ",
													"function (err, res) {",
													"        if (err) {console.log(\"error :\" + err); };",
													"        var jsonData = res.json();",
													"        var roleIdNew;",
													"        var roleNameNew;",
													"        for(i=0;i<jsonData.length;i++)",
													"        {",
													"            console.log(\"--------update permission -- for loop\");",
													"            if(jsonData[i].isActive == true)",
													"            {",
													"                if(jsonData[i].roleName.includes(\"Supplier\") && jsonData[i].participantId != 0)",
													"                {",
													"                    console.log(\"--------update permission -- if loop -- supplier\");",
													"",
													"                    roleIdNew = jsonData[i].roleId;",
													"                    roleNameNew = jsonData[i].roleName;",
													"                    pm.variables.set(\"roldeId\", roleIdNew);",
													"                    pm.variables.set(\"roleName\", roleNameNew);",
													"                    console.log(\"roleId--->\"+pm.variables.get(\"roldeId\"));",
													"                    console.log(\"roleName--->\"+pm.variables.get(\"roleName\"));",
													"                    break;",
													"",
													"                }",
													"            }",
													"        }",
													"    roleNameNew = String(roleNameNew);",
													"    var currentRole = roleNameNew.split('- ');",
													"    pm.variables.set('currentRole', currentRole[1]);",
													"    console.log(\"Current Company Role: \" + currentRole[1]);",
													"",
													"    //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
													"    // var permissioncount = pm.variables.get(\"permissioncounter\");",
													"    var permissioncount = pm.collectionVariables.get('permissioncount');",
													"    pm.collectionVariables.set('pa_count', permissionArray.length - 1);",
													"",
													"    pm.variables.set('permission', permissionArray[permissioncount]);",
													"    console.log(\"permissioncounter:\" + permissioncount);",
													" ",
													"    combinedStr = currentCode + \" \" + currentRole[1] + \" \" + permissionArray[permissioncount];",
													"",
													"    pm.variables.set(\"combinedStr\",combinedStr);",
													"    console.log(\"combinedStr------>\"+combinedStr);    ",
													"           ",
													"    var uId = pm.variables.get(\"uid1985\");",
													"    var url = pm.variables.get(\"baseURI\");",
													"    url = url.concat(\"/api/userpermissions/\" + uId + \"/roles/\" + roleIdNew + \"?entityType=Company\");",
													"    pm.sendRequest({",
													"        url: url,",
													"        method: 'GET',",
													"        header: {",
													"            'Accept': 'application/json',",
													"            'Content-Type': 'application/json',",
													"            'x-platform-code':pm.environment.get(\"platformCode\"),",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"        function (err, res) {",
													"            if (err) { console.log(\"error :\" + err); }",
													"            var jsonData = res.json();",
													"            var permissionName;",
													"            for (i = 0; i < jsonData.length; i++) {",
													"                if (jsonData[i].permissionBundleName.includes(combinedStr)) {",
													"                    if (jsonData[i].permissionBundleName.includes(\"Read\")) {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                    else {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                }",
													"",
													"            }",
													"            pm.variables.set(\"userId\", pm.variables.get(\"uid1985\"));",
													"        });",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"//This code used for getting user permissions and verifying with updated permissions.\r",
													"var userId = pm.variables.get(\"uid1985\");\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Company\";\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"   \r",
													"    pm.test(\"Validate the userpermissions updated for user \" + userId + \" returned for Company: \", function(){\r",
													"        var permissionFlag = false;\r",
													"        for( var i=0; i< jsonData.length; i++)\r",
													"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
													"            if (jsonData[i].permissionBundleName == pm.variables.get(\"combinedStr\"))\r",
													"            {\r",
													"                permissionFlag = true;\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"        pm.expect(permissionFlag).to.be.eql(true);\r",
													"   });\r",
													" });  "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"userParticipantId\": {{userParticipantId}},\n        \"permissionBundleId\": {{permissionBundleId}},\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\n        \"isEntitled\": {{isEntitled}}\n    }\n] \n"
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userId}}",
												"roles",
												"{{roldeId}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Company"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserEntitlements-OEN-1985",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check UserEntitlements NOT NULL\", function () {\r",
													"      pm.expect(responseJSONdata.body).not.eql(null);\r",
													"}); \r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"// pm.test(\"To check UserEntitlements - SaveTransaction \" , function () \r",
													"// {\r",
													"//       pm.expect(responseJSONdata[0].permissionNames).to.include(\"SaveTransaction\");\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenOen858}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
											"host": [
												"{{baseURI_userPermission}}"
											],
											"path": [
												"api",
												"UserEntitlements",
												"{{platformCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User Permissions/isEntitled_false-OEN-1985",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//This code is used to get current company and code.",
													"var companyId = pm.variables.get(\"company\"); ",
													"var currentCode = \"SCF\";",
													"",
													"//This array conatains the read, write permissions.",
													"var permissionArray = [\"Maker\"];",
													"",
													"//This request is used for getting company roles for the current products from which we get role id and role name.",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\"+ companyId + \"/roles?productCode=\" + currentCode + \"&isActive=true\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
													"      }",
													"}, ",
													"function (err, res) {",
													"        if (err) {console.log(\"error :\" + err); };",
													"        var jsonData = res.json();",
													"        var roleIdNew;",
													"        var roleNameNew;",
													"        // var jsonData = JSON.parse(responseBody);",
													"        for(i=0;i<jsonData.length;i++)",
													"        {",
													"            console.log(\"--------update permission -- for loop\");",
													"            if(jsonData[i].isActive == true)",
													"            {",
													"                if(jsonData[i].roleName.includes(\"Supplier\") && jsonData[i].participantId != 0)",
													"                {",
													"                    console.log(\"--------update permission -- if loop -- supplier\");",
													"",
													"                    roleIdNew = jsonData[i].roleId;",
													"                    roleNameNew = jsonData[i].roleName;",
													"                    pm.variables.set(\"roldeId\", roleIdNew);",
													"                    pm.variables.set(\"roleName\", roleNameNew);",
													"                    console.log(\"roleId--->\"+pm.variables.get(\"roldeId\"));",
													"                    console.log(\"roleName--->\"+pm.variables.get(\"roleName\"));",
													"                    break;",
													"",
													"                }",
													"            }",
													"        }",
													"    roleNameNew = String(roleNameNew);",
													"    var currentRole = roleNameNew.split('- ');",
													"    pm.variables.set('currentRole', currentRole[1]);",
													"    console.log(\"Current Company Role: \" + currentRole[1]);",
													"",
													"    //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
													"    // var permissioncount = pm.variables.get(\"permissioncounter\");",
													"    var permissioncount = pm.collectionVariables.get('permissioncount');",
													"    pm.collectionVariables.set('pa_count', permissionArray.length - 1);",
													"",
													"    pm.variables.set('permission', permissionArray[permissioncount]);",
													"    console.log(\"permissioncounter:\" + permissioncount);",
													"",
													"    //This 'combined' string is generated to so that we can get user permissions details",
													"    combinedStr = currentCode + \" \" + currentRole[1] + \" \" + permissionArray[permissioncount];",
													"",
													"    pm.variables.set(\"combinedStr\",combinedStr);",
													"    console.log(\"combinedStr------>\"+combinedStr);   ",
													"           ",
													"    var uId = pm.variables.get(\"uid1985\");",
													"    var url = pm.variables.get(\"baseURI\");",
													"    url = url.concat(\"/api/userpermissions/\" + uId + \"/roles/\" + roleIdNew + \"?entityType=Company\");",
													"    pm.sendRequest({",
													"        url: url,",
													"        method: 'GET',",
													"        header: {",
													"            'Accept': 'application/json',",
													"            'Content-Type': 'application/json',",
													"            'x-platform-code':pm.environment.get(\"platformCode\"),",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"        function (err, res) {",
													"            if (err) { console.log(\"error :\" + err); }",
													"            var jsonData = res.json();",
													"            var permissionName;",
													"            for (i = 0; i < jsonData.length; i++) {",
													"                if (jsonData[i].permissionBundleName.includes(combinedStr)) {",
													"                    if (jsonData[i].permissionBundleName.includes(\"Read\")) {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                    else {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", false);",
													"                        break;",
													"                    }",
													"                }",
													"",
													"            }",
													"            pm.variables.set(\"userId\", pm.variables.get(\"uid1985\"));",
													"        });",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"\r",
													"// //This code will execute till we complete the permission array counter\r",
													"// var permissioncounter = pm.collectionVariables.get('permissioncount');\r",
													"// let permissionLimit = pm.collectionVariables.get(\"pa_count\");\r",
													"// let found = false;\r",
													"// console.log(\"limit:\"+permissionLimit);\r",
													"// console.log(\"permissioncounter:\"+permissioncounter);\r",
													"// console.log(\"found:\"+found);\r",
													"// if(permissioncounter < permissionLimit && !found)\r",
													"// {\r",
													"//     console.log(\"setting next request\");\r",
													"//     postman.setNextRequest(\"Update User Permissions/isEntitled_false-OEN858-Maker\");\r",
													"//     pm.collectionVariables.unset(\"permissioncount\");\r",
													"//     pm.variables.unset(\"roleName\");\r",
													"//     pm.variables.unset(\"roldeId\");\r",
													"//     pm.collectionVariables.set(\"permissioncount\", parseInt(permissioncounter)+1) ;\r",
													"//     console.log(\"--------->\"+permissioncounter);\r",
													"// }else if(permissioncounter === permissionLimit)\r",
													"// {\r",
													"//     console.log(\"Condition match! Execution loop completed\");\r",
													"//     pm.collectionVariables.set(\"permissioncount\", 0) ;\r",
													"//     pm.collectionVariables.set(\"pa_count\",0);\r",
													"//     console.log(\"Counter reset to 0\");\r",
													"// }\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"userParticipantId\": {{userParticipantId}},\n        \"permissionBundleId\": {{permissionBundleId}},\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\n        \"isEntitled\": {{isEntitled}}\n    }\n] \n"
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userId}}",
												"roles",
												"{{roldeId}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Company"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "SCF-Buyer-Maker-OEN-1985",
							"item": [
								{
									"name": "Get Company by ID-OEN-1985",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expCompany = pm.variables.get(\"company\");\r",
													"console.log(expCompany);\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
													"    pm.expect(responseJSONdata.id).to.eql(parseInt(expCompany));\r",
													"}); \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var companies = pm.environment.get(\"SCF_Companies\").split(',');",
													"pm.variables.set('company', companies[1]);",
													"",
													"// //This counter is used to traverse company id array and setting the current value to the variable 'company'",
													"// var c_counter = pm.collectionVariables.get('cmp_counter');",
													"// pm.variables.set('company', companies[c_counter]);",
													"// console.log(\"Company counter:\" + c_counter);",
													"",
													"// //This code is used to find the total count of product specific companies in the array.",
													"// pm.collectionVariables.set('cmp_count', companies.length - 1);",
													"// console.log(\"Total Company------>:\" + pm.collectionVariables.get(\"cmp_count\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{company}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{company}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Company Users-OEN-1985",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"CompanyId\", pm.variables.get(\"company\"));",
													"   "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.variables.set(\"uid1985\", jsonData[0].id);\r",
													"console.log(\"-------\" +pm.variables.get(\"uid1985\" ));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{CompanyId}}/users",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{CompanyId}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User Permissions-OEN-1985",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//This code is used to get current company and code.",
													"var companyId = pm.variables.get(\"company\"); ",
													"var currentCode = \"SCF\";",
													"",
													"//This array conatains the read, write permissions.",
													"var permissionArray = [\"Maker\"];",
													"",
													"//This request is used for getting company roles for the current products from which we get role id and role name.",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\"+ companyId + \"/roles?productCode=\" + currentCode + \"&isActive=true\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
													"      }",
													"}, ",
													"function (err, res) {",
													"        if (err) {console.log(\"error :\" + err); };",
													"        var jsonData = res.json();",
													"        var roleIdNew;",
													"        var roleNameNew;",
													"        for(i=0;i<jsonData.length;i++)",
													"        {",
													"            console.log(\"--------update permission -- for loop\");",
													"            if(jsonData[i].isActive == true)",
													"            {",
													"                if(jsonData[i].roleName.includes(\"Buyer\") && jsonData[i].participantId != 0)",
													"                {",
													"                    console.log(\"--------update permission -- if loop -- supplier\");",
													"",
													"                    roleIdNew = jsonData[i].roleId;",
													"                    roleNameNew = jsonData[i].roleName;",
													"                    pm.variables.set(\"roldeId\", roleIdNew);",
													"                    pm.variables.set(\"roleName\", roleNameNew);",
													"                    console.log(\"roleId--->\"+pm.variables.get(\"roldeId\"));",
													"                    console.log(\"roleName--->\"+pm.variables.get(\"roleName\"));",
													"                    break;",
													"",
													"                }",
													"            }",
													"        }",
													"    roleNameNew = String(roleNameNew);",
													"    var currentRole = roleNameNew.split('- ');",
													"    pm.variables.set('currentRole', currentRole[1]);",
													"    console.log(\"Current Company Role: \" + currentRole[1]);",
													"",
													"    //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
													"    // var permissioncount = pm.variables.get(\"permissioncounter\");",
													"    var permissioncount = pm.collectionVariables.get('permissioncount');",
													"    pm.collectionVariables.set('pa_count', permissionArray.length - 1);",
													"",
													"    pm.variables.set('permission', permissionArray[permissioncount]);",
													"    console.log(\"permissioncounter:\" + permissioncount);",
													" ",
													"    combinedStr = currentCode + \" \" + currentRole[1] + \" \" + permissionArray[permissioncount];",
													"",
													"    pm.variables.set(\"combinedStr\",combinedStr);",
													"    console.log(\"combinedStr------>\"+combinedStr);    ",
													"           ",
													"    var uId = pm.variables.get(\"uid1985\");",
													"    var url = pm.variables.get(\"baseURI\");",
													"    url = url.concat(\"/api/userpermissions/\" + uId + \"/roles/\" + roleIdNew + \"?entityType=Company\");",
													"    pm.sendRequest({",
													"        url: url,",
													"        method: 'GET',",
													"        header: {",
													"            'Accept': 'application/json',",
													"            'Content-Type': 'application/json',",
													"            'x-platform-code':pm.environment.get(\"platformCode\"),",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"        function (err, res) {",
													"            if (err) { console.log(\"error :\" + err); }",
													"            var jsonData = res.json();",
													"            var permissionName;",
													"            for (i = 0; i < jsonData.length; i++) {",
													"                if (jsonData[i].permissionBundleName.includes(combinedStr)) {",
													"                    if (jsonData[i].permissionBundleName.includes(\"Read\")) {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                    else {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                }",
													"",
													"            }",
													"            pm.variables.set(\"userId\", pm.variables.get(\"uid1985\"));",
													"        });",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"//This code used for getting user permissions and verifying with updated permissions.\r",
													"var userId = pm.variables.get(\"uid1985\");\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Company\";\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"   \r",
													"    pm.test(\"Validate the userpermissions updated for user \" + userId + \" returned for Company: \", function(){\r",
													"        var permissionFlag = false;\r",
													"        for( var i=0; i< jsonData.length; i++)\r",
													"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
													"            if (jsonData[i].permissionBundleName == pm.variables.get(\"combinedStr\"))\r",
													"            {\r",
													"                permissionFlag = true;\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"        pm.expect(permissionFlag).to.be.eql(true);\r",
													"   });\r",
													" });  "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"userParticipantId\": {{userParticipantId}},\n        \"permissionBundleId\": {{permissionBundleId}},\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\n        \"isEntitled\": {{isEntitled}}\n    }\n] \n"
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userId}}",
												"roles",
												"{{roldeId}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Company"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserEntitlements-OEN-1985",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check UserEntitlements NOT NULL\", function () {\r",
													"      pm.expect(responseJSONdata.body).not.eql(null);\r",
													"}); \r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"// pm.test(\"To check UserEntitlements - SaveTransaction \" , function () \r",
													"// {\r",
													"//       pm.expect(responseJSONdata[0].permissionNames).to.include(\"SaveTransaction\");\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenOen858}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
											"host": [
												"{{baseURI_userPermission}}"
											],
											"path": [
												"api",
												"UserEntitlements",
												"{{platformCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User Permissions/isEntitled_false-OEN-1985",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//This code is used to get current company and code.",
													"var companyId = pm.variables.get(\"company\"); ",
													"var currentCode = \"SCF\";",
													"",
													"//This array conatains the read, write permissions.",
													"var permissionArray = [\"Maker\"];",
													"",
													"//This request is used for getting company roles for the current products from which we get role id and role name.",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\"+ companyId + \"/roles?productCode=\" + currentCode + \"&isActive=true\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
													"      }",
													"}, ",
													"function (err, res) {",
													"        if (err) {console.log(\"error :\" + err); };",
													"        var jsonData = res.json();",
													"        var roleIdNew;",
													"        var roleNameNew;",
													"        // var jsonData = JSON.parse(responseBody);",
													"        for(i=0;i<jsonData.length;i++)",
													"        {",
													"            console.log(\"--------update permission -- for loop\");",
													"            if(jsonData[i].isActive == true)",
													"            {",
													"                if(jsonData[i].roleName.includes(\"Buyer\") && jsonData[i].participantId != 0)",
													"                {",
													"                    console.log(\"--------update permission -- if loop -- supplier\");",
													"",
													"                    roleIdNew = jsonData[i].roleId;",
													"                    roleNameNew = jsonData[i].roleName;",
													"                    pm.variables.set(\"roldeId\", roleIdNew);",
													"                    pm.variables.set(\"roleName\", roleNameNew);",
													"                    console.log(\"roleId--->\"+pm.variables.get(\"roldeId\"));",
													"                    console.log(\"roleName--->\"+pm.variables.get(\"roleName\"));",
													"                    break;",
													"",
													"                }",
													"            }",
													"        }",
													"    roleNameNew = String(roleNameNew);",
													"    var currentRole = roleNameNew.split('- ');",
													"    pm.variables.set('currentRole', currentRole[1]);",
													"    console.log(\"Current Company Role: \" + currentRole[1]);",
													"",
													"    //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
													"    // var permissioncount = pm.variables.get(\"permissioncounter\");",
													"    var permissioncount = pm.collectionVariables.get('permissioncount');",
													"    pm.collectionVariables.set('pa_count', permissionArray.length - 1);",
													"",
													"    pm.variables.set('permission', permissionArray[permissioncount]);",
													"    console.log(\"permissioncounter:\" + permissioncount);",
													"",
													"    //This 'combined' string is generated to so that we can get user permissions details",
													"    combinedStr = currentCode + \" \" + currentRole[1] + \" \" + permissionArray[permissioncount];",
													"",
													"    pm.variables.set(\"combinedStr\",combinedStr);",
													"    console.log(\"combinedStr------>\"+combinedStr);   ",
													"           ",
													"    var uId = pm.variables.get(\"uid1985\");",
													"    var url = pm.variables.get(\"baseURI\");",
													"    url = url.concat(\"/api/userpermissions/\" + uId + \"/roles/\" + roleIdNew + \"?entityType=Company\");",
													"    pm.sendRequest({",
													"        url: url,",
													"        method: 'GET',",
													"        header: {",
													"            'Accept': 'application/json',",
													"            'Content-Type': 'application/json',",
													"            'x-platform-code':pm.environment.get(\"platformCode\"),",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"        function (err, res) {",
													"            if (err) { console.log(\"error :\" + err); }",
													"            var jsonData = res.json();",
													"            var permissionName;",
													"            for (i = 0; i < jsonData.length; i++) {",
													"                if (jsonData[i].permissionBundleName.includes(combinedStr)) {",
													"                    if (jsonData[i].permissionBundleName.includes(\"Read\")) {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    }",
													"                    else {",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", false);",
													"                        break;",
													"                    }",
													"                }",
													"",
													"            }",
													"            pm.variables.set(\"userId\", pm.variables.get(\"uid1985\"));",
													"        });",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"\r",
													"// //This code will execute till we complete the permission array counter\r",
													"// var permissioncounter = pm.collectionVariables.get('permissioncount');\r",
													"// let permissionLimit = pm.collectionVariables.get(\"pa_count\");\r",
													"// let found = false;\r",
													"// console.log(\"limit:\"+permissionLimit);\r",
													"// console.log(\"permissioncounter:\"+permissioncounter);\r",
													"// console.log(\"found:\"+found);\r",
													"// if(permissioncounter < permissionLimit && !found)\r",
													"// {\r",
													"//     console.log(\"setting next request\");\r",
													"//     postman.setNextRequest(\"Update User Permissions/isEntitled_false-OEN858-Maker\");\r",
													"//     pm.collectionVariables.unset(\"permissioncount\");\r",
													"//     pm.variables.unset(\"roleName\");\r",
													"//     pm.variables.unset(\"roldeId\");\r",
													"//     pm.collectionVariables.set(\"permissioncount\", parseInt(permissioncounter)+1) ;\r",
													"//     console.log(\"--------->\"+permissioncounter);\r",
													"// }else if(permissioncounter === permissionLimit)\r",
													"// {\r",
													"//     console.log(\"Condition match! Execution loop completed\");\r",
													"//     pm.collectionVariables.set(\"permissioncount\", 0) ;\r",
													"//     pm.collectionVariables.set(\"pa_count\",0);\r",
													"//     console.log(\"Counter reset to 0\");\r",
													"// }\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"userParticipantId\": {{userParticipantId}},\n        \"permissionBundleId\": {{permissionBundleId}},\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\n        \"isEntitled\": {{isEntitled}}\n    }\n] \n"
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userId}}",
												"roles",
												"{{roldeId}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Company"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "UserPreferences-DefaultLandingPage-ENT-903",
							"item": [
								{
									"name": "Get UserPreferences",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SCFbaseURI}}/api/UserPreferences",
											"host": [
												"{{SCFbaseURI}}"
											],
											"path": [
												"api",
												"UserPreferences"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit UserPreferences",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"key\": \"landingPage\", \r\n        \"value\": \r\n        { \r\n            \"productCode\": \"MO\", \r\n            \"route\": \"entl/companies\", \r\n            \"description\": \"ENT - Companies\", \r\n            \"routePermissions\": \r\n            [\r\n                \"ViewCompanyListTabs\", \r\n                \"EditCompanyListTabs\"\r\n            ],\r\n            \"roles\": [] \r\n        } \r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SCFbaseURI}}/api/UserPreferences",
											"host": [
												"{{SCFbaseURI}}"
											],
											"path": [
												"api",
												"UserPreferences"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Insurance",
					"item": [
						{
							"name": "INS-IP-PolicyManagementAddBuyer-OEN1420",
							"item": [
								{
									"name": "Create_accessToken_INSUser IP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													" \r",
													"let accessToken_User = jsonData.access_token;\r",
													"console.log(\"Top Level\", accessToken_User);\r",
													"pm.variables.set('accessToken_apiTestQA', accessToken_User);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{CommonUser}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Liquidx123",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid {{audience}} offline_access",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{audience}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{B2C_URI}}",
											"host": [
												"{{B2C_URI}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update INS IP_Policy Management Add Buyer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/users?count=10000&productCode=INS\");\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"            \r",
													"    pm.test(\"To check /api/users response is 200\", function () {\r",
													"        pm.expect(res.code).to.eql(200);      \r",
													"    });\r",
													"\r",
													"    var jsonData = res.json();\r",
													"    for(i=0; i< jsonData.length; i++)\r",
													"    { \r",
													"        if(pm.environment.get(\"baseURI\").includes(\"test2\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))\r",
													"        {\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                pm.variables.set(\"userIdC\", jsonData[i].id);\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"        else if(pm.environment.get(\"baseURI\").includes(\"test2\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))\r",
													"        {\r",
													"            // console.log(pm.variables.get(\"CommonUser\"))\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                pm.variables.set(\"userIdC\", jsonData[i].id);\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"        else if(pm.environment.get(\"baseURI\").includes(\"qa\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))\r",
													"        {\r",
													"            // console.log(pm.variables.get(\"CommonUser\"))\r",
													"\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"userIdC\", guid);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"        else if(pm.environment.get(\"baseURI\").includes(\"qa\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))\r",
													"        {\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                pm.variables.set(\"userIdC\", jsonData[i].id);\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"        else if(pm.environment.get(\"baseURI\").includes(\"uatdemo\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))\r",
													"        {\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"userIdC\", guid);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"        else if(pm.environment.get(\"baseURI\").includes(\"uatdemo\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))\r",
													"        {\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                pm.variables.set(\"userIdC\", jsonData[i].id);\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"\r",
													"    var url1 = pm.variables.get(\"baseURI\");\r",
													"    url1 = url1.concat(\"/api/companies?format=company-only&count=15000\");\r",
													"    pm.sendRequest({\r",
													"        url: url1,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"\r",
													"        if (err) { console.log(url + err); }\r",
													"            \r",
													"        pm.test(\"To check /api/companies response is 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"        for(i=0; i< jsonData1.length; i++)\r",
													"        { \r",
													"            // console.log(pm.variables.get(\"insCmpName\"));\r",
													"            if(jsonData1[i].name === pm.variables.get(\"insCmpName\"))\r",
													"            {\r",
													"                var gcmpId =  jsonData1[i].companyId;\r",
													"                console.log(\"companyId: \"+gcmpId);\r",
													"                pm.variables.set(\"gcmpId\", gcmpId);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"\r",
													"        var url0 = pm.variables.get(\"baseURI\");\r",
													"        url0 = url0.concat(\"/api/companies/\"+pm.variables.get(\"gcmpId\")+\"/entitlements\");\r",
													"        pm.sendRequest({\r",
													"            url: url0,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"\r",
													"            if (err) { console.log(url + err); }\r",
													"                    \r",
													"            pm.test(\"To check /api/company roles response is 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData1 = res.json();\r",
													"            for(i=0; i< jsonData1.length; i++)\r",
													"            { \r",
													"                if(jsonData1[i].productCode == \"INS\" && jsonData1[i].roleName.includes(\"Insured Party\"))\r",
													"                {\r",
													"                    var insRoleId =  jsonData1[i].roleId;\r",
													"                    console.log(\"insRoleId: \"+insRoleId);\r",
													"                    pm.variables.set(\"roldeIdIP\", insRoleId);\r",
													"\r",
													"                }\r",
													"            }\r",
													"            // pm.variables.set(\"roldeId\", 14);\r",
													"\r",
													"            var url = pm.variables.get(\"baseURI\");\r",
													"            url = url.concat(\"/api/userpermissions/\" + pm.variables.get(\"userIdC\") + \"/roles/\" + pm.variables.get(\"roldeIdIP\") + \"?entityType=Company\");\r",
													"            pm.sendRequest({\r",
													"                url: url,\r",
													"                method: 'GET',\r",
													"                header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
													"                }\r",
													"            },\r",
													"            function (err, res) {\r",
													"                if (err) { console.log(\"error :\" + err); }\r",
													"           \r",
													"                pm.test(\"To check /api/userpermissions response is 200\", function () {\r",
													"                    pm.expect(res.code).to.eql(200);      \r",
													"                });\r",
													"                var jsonData = res.json();\r",
													"                for (i = 0; i < jsonData.length; i++) {\r",
													"                    if (jsonData[i].permissionBundleName.includes(\"Policy Management Add Buyer\")) {\r",
													"                            pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);\r",
													"                            pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);\r",
													"                            pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);\r",
													"                            pm.variables.set(\"isEntitled\", true);\r",
													"                            break;                \r",
													"                    }\r",
													"                }\r",
													"            });\r",
													"        });\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"\r",
													"var userId = pm.variables.get(\"userIdC\");\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Company\";\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"\r",
													"    if (err) { console.log(url + err); }\r",
													"            \r",
													"    pm.test(\"To check /api/userpermissions after response is 200\", function () {\r",
													"        pm.expect(res.code).to.eql(200);      \r",
													"    });\r",
													"\r",
													"    var jsonData = res.json();\r",
													"   \r",
													"    pm.test(\"Validate the INS IP_Policy Management Add Buyer permissions updated for user \" + userId , function(){\r",
													"        var permissionFlag = false;\r",
													"        for( var i=0; i< jsonData.length; i++)\r",
													"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
													"            if (jsonData[i].permissionBundleName == \"Policy Management Add Buyer\")\r",
													"            {\r",
													"                pm.expect(jsonData[i].entityType).to.be.eql(\"Company\");\r",
													"                pm.expect(jsonData[i].productCode).to.be.eql(\"INS\");\r",
													"                // pm.expect(jsonData[i].roleName).to.be.eql(\"InsuredParty\");\r",
													"                permissionFlag = true;\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"        pm.expect(permissionFlag).to.be.eql(true);\r",
													"   });\r",
													"\r",
													"    var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    pm.sendRequest({\r",
													"    url: url1,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"         'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"                                                \r",
													"            }\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        if(pm.environment.get(\"baseURI\").includes(\"test2\")&& pm.environment.get(\"platformCode\").includes(\"LQX\"))\r",
													"        {\r",
													"            var acsToken = pm.variables.get(\"accessToken_apiTestQA\");\r",
													"        }\r",
													"        // else if(pm.environment.get(\"baseURI\").includes(\"qa\"))\r",
													"        // {\r",
													"        //     var acsToken = pm.variables.get(\"accessToken_ArAdminQa\");\r",
													"\r",
													"        // }\r",
													"        // else if(pm.environment.get(\"baseURI\").includes(\"uatdemo\"))\r",
													"        // {\r",
													"        //     var acsToken = pm.variables.get(\"accessToken_ArAdminUat\");\r",
													"\r",
													"        // }\r",
													"        // var url0 = pm.variables.get(\"baseURI_userPermission\");\r",
													"        // url0 = url0.concat(\"/api/UserEntitlements/\"+pm.environment.get(\"platformCode\"));\r",
													"\r",
													"        // pm.sendRequest({\r",
													"        //     url: url0,\r",
													"        //     method: 'GET',\r",
													"        //     header: {\r",
													"        //         'Accept': 'application/json',\r",
													"        //         'Content-Type': 'application/json',\r",
													"        //         'Authorization': 'bearer '+ acsToken\r",
													"        //     }\r",
													"            \r",
													"        // }, function (err, res) {\r",
													"        //     var jsonData = res.json();\r",
													"        //     pm.test(\"To check /api/UserEntitlements has response 200\", function () {\r",
													"        //         pm.expect(res.code).to.eql(200);      \r",
													"        //     });\r",
													"        //     pm.test(\"To check UserEntitlements NOT NULL\", function () {\r",
													"        //         pm.expect(jsonData.body).not.eql(null);\r",
													"        //     }); \r",
													"\r",
													"        //     pm.test(\"To check UserEntitlements - Policy Management Add Buyer\" , function () \r",
													"        //     {\r",
													"        //         pm.expect(jsonData[0].permissionNames).to.include(\"ViewPolicymanagementGrid\");\r",
													"        //         pm.expect(jsonData[0].permissionNames).to.include(\"ViewPolicyDetailsPage\");  \r",
													"        //         pm.expect(jsonData[0].permissionNames).to.include(\"PolicymanagementEditBuyer\");\r",
													"                \r",
													"        //     });\r",
													"        // });\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"userParticipantId\": {{userParticipantId}},\r\n        \"permissionBundleId\": {{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"isEntitled\": {{isEntitled}}\r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userIdC}}/roles/{{roldeIdIP}}?entityType=Company",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userIdC}}",
												"roles",
												"{{roldeIdIP}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Company"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserEntitlements INS IP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"To check UserEntitlements: \" + jsonData.length);\r",
													"\r",
													"pm.test(\"To check UserEntitlements NOT NULL\", function () {\r",
													"    pm.expect(jsonData.body).not.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"To check InsuredParty UserEntitlements - Policy Management Add Buyer\", function () {\r",
													"    for (i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].productCode === \"INS\" && jsonData[i].permissionNames.length === 3)\r",
													"        { \r",
													"            pm.expect(jsonData[i].permissionNames).to.have.members([\"PolicyManagementEditBuyer\",\"ViewPolicyDetailsPage\", \"ViewPolicyManagementGrid\"]);\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken_apiTestQA}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
											"host": [
												"{{baseURI_userPermission}}"
											],
											"path": [
												"api",
												"UserEntitlements",
												"{{platformCode}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(pm.environment.get(\"baseURI\").includes(\"entapi-qa\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxnga+API_INS_T2LQX@gmail.com\");",
											"}",
											"else if(pm.environment.get(\"baseURI\").includes(\"entapi-qa\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxscf+apiTest2Caps@gmail.com\");",
											"}",
											"else if(pm.environment.get(\"baseURI\").includes(\"qa\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxscf+apiQA_LQX@gmail.com\");",
											"}",
											"else if(pm.environment.get(\"baseURI\").includes(\"qa\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxscf+apiQA_Caps@gmail.com\");",
											"}",
											"else if(pm.environment.get(\"baseURI\").includes(\"uat\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxscf+apiUATLQX1@gmail.com\");",
											"}",
											"else if(pm.environment.get(\"baseURI\").includes(\"uat\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxscf+apiUATCaps1@gmail.com\");",
											"}"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "INS-Admin-PolicyManagementAddBuyer-OEN1420",
							"item": [
								{
									"name": "Create_accessToken_INSUser Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													" \r",
													"let accessToken_User = jsonData.access_token;\r",
													"console.log(\"Top Level\", accessToken_User);\r",
													"pm.variables.set('accessToken_apiTestQA', accessToken_User);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{CommonUser}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Liquidx123",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid {{audience}} offline_access",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{audience}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{B2C_URI}}",
											"host": [
												"{{B2C_URI}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update INS Admin_Policy Management Add Buyer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/users?count=10000&productCode=INS\");\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"            \r",
													"    pm.test(\"To check /api/users response is 200\", function () {\r",
													"        pm.expect(res.code).to.eql(200);      \r",
													"    });\r",
													"\r",
													"    var jsonData = res.json();\r",
													"    for(i=0; i< jsonData.length; i++)\r",
													"    { \r",
													"        if(pm.environment.get(\"baseURI\").includes(\"test2\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))\r",
													"        {\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                pm.variables.set(\"userIdC\", jsonData[i].id);\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"        else if(pm.environment.get(\"baseURI\").includes(\"test2\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))\r",
													"        {\r",
													"            // console.log(pm.variables.get(\"CommonUser\"))\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                pm.variables.set(\"userIdC\", jsonData[i].id);\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"        else if(pm.environment.get(\"baseURI\").includes(\"qa\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))\r",
													"        {\r",
													"            // console.log(pm.variables.get(\"CommonUser\"))\r",
													"\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"userIdC\", guid);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"        else if(pm.environment.get(\"baseURI\").includes(\"qa\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))\r",
													"        {\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                pm.variables.set(\"userIdC\", jsonData[i].id);\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"        else if(pm.environment.get(\"baseURI\").includes(\"uatdemo\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))\r",
													"        {\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"userIdC\", guid);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"        else if(pm.environment.get(\"baseURI\").includes(\"uatdemo\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))\r",
													"        {\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                pm.variables.set(\"userIdC\", jsonData[i].id);\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"\r",
													"    var url1 = pm.variables.get(\"baseURI\");\r",
													"    url1 = url1.concat(\"/api/companies?format=company-only&count=5000\");\r",
													"    pm.sendRequest({\r",
													"        url: url1,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"\r",
													"        if (err) { console.log(url + err); }\r",
													"            \r",
													"        pm.test(\"To check /api/companies response is 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"        for(i=0; i< jsonData1.length; i++)\r",
													"        { \r",
													"\r",
													"            if(jsonData1[i].name === pm.variables.get(\"insCmpName\"))\r",
													"            {\r",
													"                var gcmpId =  jsonData1[i].companyId;\r",
													"                console.log(\"companyId: \"+gcmpId);\r",
													"                pm.variables.set(\"gcmpId\", gcmpId);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"\r",
													"        var url0 = pm.variables.get(\"baseURI\");\r",
													"        url0 = url0.concat(\"/api/companies/\"+pm.variables.get(\"gcmpId\")+\"/entitlements\");\r",
													"        pm.sendRequest({\r",
													"            url: url0,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"\r",
													"            if (err) { console.log(url + err); }\r",
													"                    \r",
													"            pm.test(\"To check /api/company roles response is 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData1 = res.json();\r",
													"            for(i=0; i< jsonData1.length; i++)\r",
													"            { \r",
													"                if(jsonData1[i].productCode == \"INS\" && jsonData1[i].roleName.includes(\"Insured Party\"))\r",
													"                {\r",
													"                    var insRoleId =  jsonData1[i].roleId;\r",
													"                    console.log(\"insRoleId: \"+insRoleId);\r",
													"                    pm.variables.set(\"roldeIdIP\", insRoleId);\r",
													"\r",
													"                }\r",
													"            }\r",
													"\r",
													"            var url = pm.variables.get(\"baseURI\");\r",
													"            url = url.concat(\"/api/userpermissions/\" + pm.variables.get(\"userIdC\") + \"/roles/\" + pm.variables.get(\"roldeIdIP\") + \"?entityType=Company\");\r",
													"            pm.sendRequest({\r",
													"                url: url,\r",
													"                method: 'GET',\r",
													"                header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
													"                }\r",
													"            },\r",
													"            function (err, res) {\r",
													"                if (err) { console.log(\"error :\" + err); }\r",
													"           \r",
													"                pm.test(\"To check /api/userpermissions response is 200\", function () {\r",
													"                    pm.expect(res.code).to.eql(200);      \r",
													"                });\r",
													"                var jsonData = res.json();\r",
													"                for (i = 0; i < jsonData.length; i++) {\r",
													"                    if (jsonData[i].permissionBundleName.includes(\"Policy Management Add Buyer\")) {\r",
													"                            pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);\r",
													"                            pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);\r",
													"                            pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);\r",
													"                            pm.variables.set(\"isEntitled\", true);\r",
													"                            break;                \r",
													"                    }\r",
													"                }\r",
													"            });\r",
													"        });\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"\r",
													"var userId = pm.variables.get(\"userIdC\");\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Company\";\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"\r",
													"    if (err) { console.log(url + err); }\r",
													"            \r",
													"    pm.test(\"To check /api/userpermissions after response is 200\", function () {\r",
													"        pm.expect(res.code).to.eql(200);      \r",
													"    });\r",
													"\r",
													"    var jsonData = res.json();\r",
													"   \r",
													"    pm.test(\"Validate the INS Admin_Policy Management Add Buyer permissions updated for user \" + userId , function(){\r",
													"        var permissionFlag = false;\r",
													"        for( var i=0; i< jsonData.length; i++)\r",
													"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
													"            if (jsonData[i].permissionBundleName == \"Policy Management Add Buyer\")\r",
													"            {\r",
													"                pm.expect(jsonData[i].entityType).to.be.eql(\"Company\");\r",
													"                pm.expect(jsonData[i].productCode).to.be.eql(\"INS\");\r",
													"                // pm.expect(jsonData[i].roleName).to.be.eql(\"Administrator\");\r",
													"                permissionFlag = true;\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"        pm.expect(permissionFlag).to.be.eql(true);\r",
													"   });\r",
													"\r",
													"    var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    pm.sendRequest({\r",
													"    url: url1,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"         'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {                                                    \r",
													"            }\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"userParticipantId\": {{userParticipantId}},\r\n        \"permissionBundleId\": {{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"isEntitled\": {{isEntitled}}\r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userIdC}}/roles/{{roldeId}}?entityType=Company",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userIdC}}",
												"roles",
												"{{roldeId}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Company"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserEntitlements Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"To check UserEntitlements: \" + jsonData.length);\r",
													"\r",
													"pm.test(\"To check UserEntitlements NOT NULL\", function () {\r",
													"    pm.expect(jsonData.body).not.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"To check InsuredParty UserEntitlements - Policy Management Add Buyer\", function () {\r",
													"    for (i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].productCode === \"INS\" && jsonData[i].permissionNames.length === 3)\r",
													"        { \r",
													"            pm.expect(jsonData[i].permissionNames).to.have.members([\"PolicyManagementEditBuyer\",\"ViewPolicyDetailsPage\", \"ViewPolicyManagementGrid\"]);\r",
													"            }\r",
													"        }\r",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken_apiTestQA}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
											"host": [
												"{{baseURI_userPermission}}"
											],
											"path": [
												"api",
												"UserEntitlements",
												"{{platformCode}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(pm.environment.get(\"baseURI\").includes(\"entapi-qa\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxnga+API_INS_T2LQX@gmail.com\");",
											"}",
											"else if(pm.environment.get(\"baseURI\").includes(\"entapi-qa\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxscf+apiTest2Caps@gmail.com\");",
											"}",
											"else if(pm.environment.get(\"baseURI\").includes(\"qa\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxscf+apiQA_LQX@gmail.com\");",
											"}",
											"else if(pm.environment.get(\"baseURI\").includes(\"qa\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxscf+apiQA_Caps@gmail.com\");",
											"}",
											"else if(pm.environment.get(\"baseURI\").includes(\"uat\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxscf+apiUATLQX1@gmail.com\");",
											"}",
											"else if(pm.environment.get(\"baseURI\").includes(\"uat\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxscf+apiUATCaps1@gmail.com\");",
											"}"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "INS-Broker-Read-OEN1229",
							"item": [
								{
									"name": "Create_accessToken_INSUser Broker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													" \r",
													"let accessToken_User = jsonData.access_token;\r",
													"console.log(\"Top Level\", accessToken_User);\r",
													"pm.variables.set('accessToken_apiTestQA', accessToken_User);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{CommonUser}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Liquidx123",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid {{audience}} offline_access",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{audience}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{B2C_URI}}",
											"host": [
												"{{B2C_URI}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update INS Broker_Read Broker",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/users?count=10000&productCode=INS\");\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"            \r",
													"    pm.test(\"To check /api/users response is 200\", function () {\r",
													"        pm.expect(res.code).to.eql(200);      \r",
													"    });\r",
													"\r",
													"    var jsonData = res.json();\r",
													"    for(i=0; i< jsonData.length; i++)\r",
													"    { \r",
													"        if(pm.environment.get(\"baseURI\").includes(\"test2\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))\r",
													"        {\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                pm.variables.set(\"userIdC\", jsonData[i].id);\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"        else if(pm.environment.get(\"baseURI\").includes(\"test2\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))\r",
													"        {\r",
													"            // console.log(pm.variables.get(\"CommonUser\"))\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                pm.variables.set(\"userIdC\", jsonData[i].id);\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"        else if(pm.environment.get(\"baseURI\").includes(\"qa\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))\r",
													"        {\r",
													"            // console.log(pm.variables.get(\"CommonUser\"))\r",
													"\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"userIdC\", guid);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"        else if(pm.environment.get(\"baseURI\").includes(\"qa\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))\r",
													"        {\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                pm.variables.set(\"userIdC\", jsonData[i].id);\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"        else if(pm.environment.get(\"baseURI\").includes(\"uatdemo\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))\r",
													"        {\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"userIdC\", guid);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"        else if(pm.environment.get(\"baseURI\").includes(\"uatdemo\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))\r",
													"        {\r",
													"            if(jsonData[i].userName == pm.variables.get(\"CommonUser\"))\r",
													"            {\r",
													"                var guid =  jsonData[i].id;\r",
													"                pm.variables.set(\"userIdC\", jsonData[i].id);\r",
													"                console.log(\"userIdC: \"+jsonData[i].id);\r",
													"                console.log(\"companyName: \"+jsonData[i].companyName);\r",
													"                pm.variables.set(\"insCmpName\", jsonData[i].companyName);\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"\r",
													"    var url1 = pm.variables.get(\"baseURI\");\r",
													"    url1 = url1.concat(\"/api/companies?format=company-only&count=5000\");\r",
													"    pm.sendRequest({\r",
													"        url: url1,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"\r",
													"        if (err) { console.log(url + err); }\r",
													"            \r",
													"        pm.test(\"To check /api/companies response is 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });\r",
													"\r",
													"        var jsonData1 = res.json();\r",
													"        for(i=0; i< jsonData1.length; i++)\r",
													"        { \r",
													"            if(jsonData1[i].name === pm.variables.get(\"insCmpName\"))\r",
													"            {\r",
													"                var gcmpId =  jsonData1[i].companyId;\r",
													"                console.log(\"companyId: \"+gcmpId);\r",
													"                pm.variables.set(\"gcmpId\", gcmpId);\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"\r",
													"        var url0 = pm.variables.get(\"baseURI\");\r",
													"        url0 = url0.concat(\"/api/companies/\"+pm.variables.get(\"gcmpId\")+\"/entitlements\");\r",
													"        pm.sendRequest({\r",
													"            url: url0,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"\r",
													"            if (err) { console.log(url + err); }\r",
													"                    \r",
													"            pm.test(\"To check /api/company roles response is 200\", function () {\r",
													"                pm.expect(res.code).to.eql(200);      \r",
													"            });\r",
													"\r",
													"            var jsonData1 = res.json();\r",
													"            for(i=0; i< jsonData1.length; i++)\r",
													"            { \r",
													"                if(jsonData1[i].productCode == \"INS\" && jsonData1[i].roleName.includes(\"Insurance - Broker\"))\r",
													"                {\r",
													"                    var insRoleId =  jsonData1[i].roleId;\r",
													"                    console.log(\"insRoleId: \"+insRoleId);\r",
													"                    pm.variables.set(\"roldeIdIP\", insRoleId);\r",
													"\r",
													"                }\r",
													"            }\r",
													"\r",
													"            var url = pm.variables.get(\"baseURI\");\r",
													"            url = url.concat(\"/api/userpermissions/\" + pm.variables.get(\"userIdC\") + \"/roles/\" + pm.variables.get(\"roldeIdIP\") + \"?entityType=Company\");\r",
													"            pm.sendRequest({\r",
													"                url: url,\r",
													"                method: 'GET',\r",
													"                header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
													"                }\r",
													"            },\r",
													"            function (err, res) {\r",
													"                if (err) { console.log(\"error :\" + err); }\r",
													"           \r",
													"                pm.test(\"To check /api/userpermissions response is 200\", function () {\r",
													"                    pm.expect(res.code).to.eql(200);      \r",
													"                });\r",
													"                var jsonData = res.json();\r",
													"                for (i = 0; i < jsonData.length; i++) {\r",
													"                    if (jsonData[i].permissionBundleName.includes(\"INS Broker Read\")) {\r",
													"                            pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);\r",
													"                            pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);\r",
													"                            pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);\r",
													"                            pm.variables.set(\"isEntitled\", true);\r",
													"                            break;                \r",
													"                    }\r",
													"                }\r",
													"            });\r",
													"        });\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"\r",
													"var userId = pm.variables.get(\"userIdC\");\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Company\";\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"\r",
													"    if (err) { console.log(url + err); }\r",
													"            \r",
													"    pm.test(\"To check /api/userpermissions after response is 200\", function () {\r",
													"        pm.expect(res.code).to.eql(200);      \r",
													"    });\r",
													"\r",
													"    var jsonData = res.json();\r",
													"   \r",
													"    pm.test(\"Validate the INS Admin_Policy Management Add Buyer permissions updated for user \" + userId , function(){\r",
													"        var permissionFlag = false;\r",
													"        for( var i=0; i< jsonData.length; i++)\r",
													"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
													"            if (jsonData[i].permissionBundleName == \"Policy Management Add Buyer\")\r",
													"            {\r",
													"                pm.expect(jsonData[i].entityType).to.be.eql(\"Company\");\r",
													"                pm.expect(jsonData[i].productCode).to.be.eql(\"INS\");\r",
													"                // pm.expect(jsonData[i].roleName).to.be.eql(\"Administrator\");\r",
													"                permissionFlag = true;\r",
													"                break;\r",
													"            }\r",
													"        }\r",
													"        pm.expect(permissionFlag).to.be.eql(true);\r",
													"   });\r",
													"\r",
													"    var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"    pm.sendRequest({\r",
													"    url: url1,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"         'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {                                                    \r",
													"            }\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) { console.log(url + err); }\r",
													"        pm.test(\"To check /api/Publications has response 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);      \r",
													"        });            \r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"userParticipantId\": {{userParticipantId}},\r\n        \"permissionBundleId\": {{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"isEntitled\": {{isEntitled}}\r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userIdC}}/roles/{{roldeId}}?entityType=Company",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userIdC}}",
												"roles",
												"{{roldeId}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Company"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserEntitlements Broker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"To check UserEntitlements: \" + jsonData.length);\r",
													"\r",
													"pm.test(\"To check UserEntitlements NOT NULL\", function () {\r",
													"    pm.expect(jsonData.body).not.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"To check Broker  UserEntitlements - Read\", function () {\r",
													"    for (i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].productCode === \"INS\" && jsonData[i].permissionNames.length === 10)\r",
													"        { \r",
													"            pm.expect(jsonData[i].permissionNames).to.have.members([\"ViewApprovedLimitDetailsPage\",\"ViewApprovedLimitsTab\", \"ViewIndicativeQuotes\",\"ViewMultiQuoteAcceptancePage\",\"ViewPendingQuotesTab\",\"ViewPolicyDetailsPage\",\"ViewPolicyManagementGrid\",\"ViewRFQDetailsPage\",\"ViewTradeRecapDetailsPage\",\"ViewTransactionTabs\"]);            \r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken_apiTestQA}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
											"host": [
												"{{baseURI_userPermission}}"
											],
											"path": [
												"api",
												"UserEntitlements",
												"{{platformCode}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(pm.environment.get(\"baseURI\").includes(\"entapi-qa\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxnga+API_INS_T2LQX@gmail.com\");",
											"}",
											"else if(pm.environment.get(\"baseURI\").includes(\"entapi-qa\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxscf+apiTest2Caps@gmail.com\");",
											"}",
											"else if(pm.environment.get(\"baseURI\").includes(\"qa\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxscf+apiQA_LQX@gmail.com\");",
											"}",
											"else if(pm.environment.get(\"baseURI\").includes(\"qa\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxscf+apiQA_Caps@gmail.com\");",
											"}",
											"else if(pm.environment.get(\"baseURI\").includes(\"uat\") && pm.environment.get(\"platformCode\").includes(\"LQX\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxscf+apiUATLQX1@gmail.com\");",
											"}",
											"else if(pm.environment.get(\"baseURI\").includes(\"uat\") && pm.environment.get(\"platformCode\").includes(\"Capstone\"))",
											"{",
											"    pm.variables.set(\"CommonUser\",\"lqxscf+apiUATCaps1@gmail.com\");",
											"}"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "GET",
							"item": [
								{
									"name": "Get Users?productCode&participantId- IP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//   var url = pm.variables.get(\"baseURI\");",
													"//     url = url.concat(\"/api/users/\" + uid);",
													"",
													"//     pm.sendRequest({",
													"//         url: url,",
													"//         method: 'GET',",
													"//         header: {",
													"//             'Accept': 'application/json',",
													"//             'Content-Type': 'application/json',",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"//         }",
													"//     },",
													"//         function (err, res) {",
													"//             var jsonData = res.json();",
													"//             pm.variables.set(\"UserId\", jsonData.id);",
													"",
													"//             pm.variables.set(\"UpdatedOn\", jsonData.updatedOn);",
													"//             var updatedFName = \"Test123_\" + user;",
													"//             pm.variables.set(\"updatedFName\", updatedFName);",
													"//             var UpdatedOn = pm.variables.get(\"UpdatedOn\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/users?productCode=INS&participantId=10610",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"users"
											],
											"query": [
												{
													"key": "productCode",
													"value": "INS"
												},
												{
													"key": "count",
													"value": "100",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "10610"
												}
											]
										},
										"description": "(ALL users for the selected product)"
									},
									"response": []
								},
								{
									"name": "Get Users?productCode&participantId- IC",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//   var url = pm.variables.get(\"baseURI\");",
													"//     url = url.concat(\"/api/users/\" + uid);",
													"",
													"//     pm.sendRequest({",
													"//         url: url,",
													"//         method: 'GET',",
													"//         header: {",
													"//             'Accept': 'application/json',",
													"//             'Content-Type': 'application/json',",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"//         }",
													"//     },",
													"//         function (err, res) {",
													"//             var jsonData = res.json();",
													"//             pm.variables.set(\"UserId\", jsonData.id);",
													"",
													"//             pm.variables.set(\"UpdatedOn\", jsonData.updatedOn);",
													"//             var updatedFName = \"Test123_\" + user;",
													"//             pm.variables.set(\"updatedFName\", updatedFName);",
													"//             var UpdatedOn = pm.variables.get(\"UpdatedOn\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/users?productCode=INS&participantId=14056",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"users"
											],
											"query": [
												{
													"key": "productCode",
													"value": "INS"
												},
												{
													"key": "count",
													"value": "100",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "14056"
												}
											]
										},
										"description": "(ALL users for the selected product)"
									},
									"response": []
								},
								{
									"name": "Get Users?productCode&participantId- Broker",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//   var url = pm.variables.get(\"baseURI\");",
													"//     url = url.concat(\"/api/users/\" + uid);",
													"",
													"//     pm.sendRequest({",
													"//         url: url,",
													"//         method: 'GET',",
													"//         header: {",
													"//             'Accept': 'application/json',",
													"//             'Content-Type': 'application/json',",
													"//             'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"//         }",
													"//     },",
													"//         function (err, res) {",
													"//             var jsonData = res.json();",
													"//             pm.variables.set(\"UserId\", jsonData.id);",
													"",
													"//             pm.variables.set(\"UpdatedOn\", jsonData.updatedOn);",
													"//             var updatedFName = \"Test123_\" + user;",
													"//             pm.variables.set(\"updatedFName\", updatedFName);",
													"//             var UpdatedOn = pm.variables.get(\"UpdatedOn\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/users?productCode=INS&participantId=10609",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"users"
											],
											"query": [
												{
													"key": "productCode",
													"value": "INS"
												},
												{
													"key": "count",
													"value": "100",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "10609"
												}
											]
										},
										"description": "(ALL users for the selected product)"
									},
									"response": []
								},
								{
									"name": "Get Realtionships productCode=INS Insured Party-Broker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200 && responseBody !== '') {\r",
													"    var responseJSONdata = JSON.parse(responseBody);\r",
													"    pm.test(\"To check record-types details not null: \" + responseJSONdata.length, function () {\r",
													"        for (i = 0; i < responseJSONdata.length; i++) {\r",
													"            pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"        }\r",
													"    });\r",
													"    pm.test(\"To check productCode 'INS' \" , function () {\r",
													"        for (i = 0; i < responseJSONdata.length; i++) {\r",
													"            pm.expect(responseJSONdata[i].productCode).to.eql(\"INS\");\r",
													"            pm.expect(responseJSONdata[i].relationshipType.name).to.eql(\"Insurance (Insured Party-Broker)\");\r",
													"        }\r",
													"    });\r",
													"    pm.test(\"Validating record-types format from response body \", function () {\r",
													"     //   for (i = 0; i < responseJSONdata.length; i++) {\r",
													"            pm.expect(responseJSONdata[0]).to.have.any.keys('id', 'productCode', 'buyerId', 'buyerName', 'supplierId', 'supplierName', 'currencyCode', 'descOfGoodsServices', 'startDate', 'retainedDays', 'incoTerms', 'invoiceDueDateAdjustmentId','invoiceDueDateAdjustement','paymentTerms',  'governingLawId',\r",
													"        'governingLaw', 'additionalDetails', 'regionCode', 'statusId', 'status', 'disclosureTypeId','isPayablesEligible',\r",
													"        'recordTypeId','recordType', 'incoTermsTypeId', 'salesforceId', 'annualSales','calendars');\r",
													"       // }\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/Relationships?relationshipTypeId=4",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											],
											"query": [
												{
													"key": "relationshipTypeId",
													"value": "4"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Realtionships productCode=INS Insured Party-Platform Broker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200 && responseBody !== '') {\r",
													"    var responseJSONdata = JSON.parse(responseBody);\r",
													"    pm.test(\"To check record-types details not null: \" + responseJSONdata.length, function () {\r",
													"        for (i = 0; i < responseJSONdata.length; i++) {\r",
													"            pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"        }\r",
													"    });\r",
													"    pm.test(\"To check productCode 'INS' \" , function () {\r",
													"        for (i = 0; i < responseJSONdata.length; i++) {\r",
													"            pm.expect(responseJSONdata[i].productCode).to.eql(\"INS\");\r",
													"            pm.expect(responseJSONdata[i].relationshipType.name).to.eql(\"Insurance (Insured Party-Platform Broker)\");\r",
													"        }\r",
													"    });\r",
													"    pm.test(\"Validating record-types format from response body \", function () {\r",
													"     //   for (i = 0; i < responseJSONdata.length; i++) {\r",
													"            pm.expect(responseJSONdata[0]).to.have.any.keys('id', 'productCode', 'buyerId', 'buyerName', 'supplierId', 'supplierName', 'currencyCode', 'descOfGoodsServices', 'startDate', 'retainedDays', 'incoTerms', 'invoiceDueDateAdjustmentId','invoiceDueDateAdjustement','paymentTerms',  'governingLawId',\r",
													"        'governingLaw', 'additionalDetails', 'regionCode', 'statusId', 'status', 'disclosureTypeId','isPayablesEligible',\r",
													"        'recordTypeId','recordType', 'incoTermsTypeId', 'salesforceId', 'annualSales','calendars');\r",
													"       // }\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/Relationships?relationshipTypeId=5",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											],
											"query": [
												{
													"key": "relationshipTypeId",
													"value": "5"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CreateInsuranceRelationship-OEN-1917andOEN-2110",
							"item": [
								{
									"name": "Post Company - IP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"var timeToday = moment.utc().format('DDMMYY');\r",
													"\r",
													"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
													"function getRandomAlphaNumeric(len, chars) {\r",
													"    var result = '';\r",
													"    for (var i = len; i > 0; i--)\r",
													"    { \r",
													"     result += chars[Math.floor(Math.random() * chars.length)];\r",
													"    }\r",
													"     return result;\r",
													"}\r",
													"var randomS = timeToday+\"_\"+cRandom;\r",
													"pm.variables.set(\"entityName\", randomS);\r",
													"console.log(\"______________________\" + randomS);\r",
													"// pm.variables.set(\"entityName\", cRandom);\r",
													"\r",
													"pm.variables.set(\"recordTypeId\", 1);\r",
													"\r",
													"var moment = require('moment'); \r",
													"var timeT = moment.utc().format();  \r",
													"console.log(\"Current time: \"+timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/countries\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"    for(i=0; i< jsonData.length; i++)\r",
													"    { \r",
													"        if(jsonData[i].countryCode.includes(\"US\"))\r",
													"        {\r",
													"            var countryName =  jsonData[i].name;\r",
													"            var countryCode = jsonData[i].countryCode;\r",
													"            console.log(\"country Name: \"+countryName);\r",
													"            pm.variables.set(\"country\", countryName);\r",
													"            pm.variables.set(\"code1\", countryCode);\r",
													"            console.log(\"country code: \"+countryCode);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
													"    pm.sendRequest({\r",
													"        url: url,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        var jsonData = res.json();\r",
													"        var stateName = jsonData[0].name;\r",
													"        console.log(\"state Name: \"+stateName);\r",
													"        pm.variables.set(\"stateRegion\", stateName);     \r",
													"        var stateId = jsonData[0].id;\r",
													"        console.log(\"state Id: \"+stateId);\r",
													"        pm.variables.set(\"stateRegionId\", stateId);    \r",
													"\r",
													"       \r",
													"        var url2 = pm.variables.get(\"baseURI\");\r",
													"        url2 = url2.concat(\"/api/institution-types\");\r",
													"        pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"        }, function (err, res) {\r",
													"            var jsonData = res.json();\r",
													"            var institutionType = jsonData[0].id;\r",
													"            console.log(\"institutionType id: \"+institutionType);\r",
													"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
													"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
													"\r",
													"            var url3 = pm.variables.get(\"baseURI\");\r",
													"            url3 = url3.concat(\"/api/sectors\");\r",
													"            pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"            }, function (err, res) {\r",
													"                var jsonData = res.json();\r",
													"                var sectorId = jsonData[5].id;\r",
													"                console.log(\"sector id: \"+sectorId);\r",
													"                console.log(\"sector name: \"+jsonData[5].name);\r",
													"                pm.variables.set(\"sectorId\", sectorId);   \r",
													"                \r",
													"                var url4 = pm.variables.get(\"baseURI\");\r",
													"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
													"                pm.sendRequest({\r",
													"                url: url4,\r",
													"                method: 'GET',\r",
													"                header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"                }, function (err, res) {\r",
													"                    var jsonData = res.json();\r",
													"                    var industryId = jsonData[0].id;\r",
													"                    console.log(\"industry Id : \"+industryId);\r",
													"                    console.log(\"industry name: \"+jsonData[0].name);\r",
													"                    pm.variables.set(\"industryId\", industryId);   \r",
													"\r",
													"                }); \r",
													"            }); \r",
													"        });\r",
													"    });\r",
													"});\r",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code for newly created company is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var suffix = pm.variables.get(\"entityName\");\r",
													"var expCmpId = jsonData.id;\r",
													"pm.variables.set(\"IPCompany\",expCmpId)\r",
													"pm.variables.set(\"IPCompanyName\",jsonData.legalEntityName)\r",
													"\r",
													"pm.test(\"To check new created IPCompany: \" + expCmpId, function () {\r",
													"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegINSParty_' + suffix);\r",
													"});\r",
													"\r",
													"// var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"?command=activate\";\r",
													"// pm.sendRequest({\r",
													"//     url: url,\r",
													"//     method: 'PUT',\r",
													"//     header: {\r",
													"//         'Content-Type': 'application/json',\r",
													"//         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//     },\r",
													"//     body: {\r",
													"//         mode: 'raw',\r",
													"//         raw: {\r",
													"           \r",
													"//             \"id\": expCmpId,                                       \r",
													"//         }\r",
													"//     }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"    \r",
													"//     pm.test(\"To check activate company has response 200\", function () {\r",
													"//         pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"\r",
													"//     var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"//     pm.sendRequest({\r",
													"//     url: url1,\r",
													"//     method: 'POST',\r",
													"//     header: {\r",
													"//         'Content-Type': 'application/json',\r",
													"//         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//     },\r",
													"//     body: {\r",
													"//         mode: 'raw',\r",
													"//         raw: {\r",
													"                                                  \r",
													"//             }\r",
													"//         }\r",
													"//     }, function (err, res) {\r",
													"//         if (err) { console.log(url + err); }\r",
													"//     });\r",
													"\r",
													"//     var url2 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=5000\";\r",
													"//     pm.sendRequest({\r",
													"//     url: url2,\r",
													"//     method: 'GET',\r",
													"//     header: {\r",
													"//                 'Accept': 'application/json',\r",
													"//                 'Content-Type': 'application/json',\r",
													"//                 'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//             }\r",
													"//     }, function (err, res) {\r",
													"//         if (err) { console.log(url + err); }\r",
													"\r",
													"//         var jsonData1 = res.json();\r",
													"//             for (i = 0; i < jsonData1.length; i++) {\r",
													"//                 if (jsonData1[i].id == expCmpId) {\r",
													"                    \r",
													"//                     pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
													"//                         pm.expect(jsonData1[i].recordTypeId).to.eql(1);\r",
													"//                         pm.expect(jsonData1[i].isActive).to.eql(true);\r",
													"\r",
													"//                     });\r",
													"//                 }\r",
													"//             }\r",
													"//     });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"legalEntityName\": \"EntlRegINSParty_{{entityName}}\",\r\n    \"name\": \"EntlRegINSParty_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/companies",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProductRoles-Activate-IP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"var companyId = pm.variables.get(\"IPCompany\");",
													"",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\" + companyId + \"/roles\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"    function (err, res) {",
													"    if (err) { console.log(\"error :\" + err); };",
													"",
													"    var responseJSONdata = res.json();",
													"    for (var i = 0; i < responseJSONdata.length; i++) {",
													"        if(responseJSONdata[i].roldeId == pm.variables.get(\"roldeId\"))",
													"        {",
													"        pm.test(\"To check /companies/{id} returns company details\", function () {",
													"            // for (var i = 0; i < responseJSONdata.length; i++) {",
													"            pm.expect(responseJSONdata[i].companyId).to.eql(parseInt(companyId));",
													"            // }",
													"        }); ",
													"        pm.test(\"To check Company Roles_activate\", function () {",
													"            // for (var i = 0; i < responseJSONdata.length; i++) {",
													"            pm.expect(responseJSONdata[i].isActive).to.eql(true);",
													"            // }",
													"        }); ",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var companyId = pm.variables.get(\"IPCompany\");",
													"pm.variables.set('companyL', companyId);",
													"",
													"var url = pm.variables.get(\"baseURI\");",
													"  url = url.concat(\"/api/Companies/\" + companyId + \"/roles?productCode=INS\" );",
													"pm.sendRequest({",
													"  url: url,",
													"  method: 'GET',",
													"  header: {",
													"    'Accept': 'application/json',",
													"    'Content-Type': 'application/json',",
													"    'x-platform-code': pm.environment.get(\"platformCode\"),",
													"    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"  }",
													"},",
													"  function (err, res) {",
													"    if (err) { console.log(\"error :\" + err); };",
													"    var jsonData = res.json();",
													"    for(i=0;i<jsonData.length;i++)",
													"    {",
													"        console.log(\"--------update permission -- for loop\");",
													"        if(jsonData[i].roleName.includes(\"Party\"))",
													"        {",
													"            var roleIdNew = jsonData[i].roleId;",
													"            var roleNameNew = jsonData[i].roleName;",
													"            var participantIdNew = jsonData[i].participantId;",
													"",
													"            console.log(\"roleId--->\" + roleIdNew);",
													"            console.log(\"roleName--->\" + roleNameNew);",
													"            console.log(\"participantId--->\" + participantIdNew);",
													"        ",
													"            pm.variables.set(\"roldeId\", roleIdNew);",
													"            pm.variables.set(\"roleName\", roleNameNew);",
													"            pm.variables.set(\"participantId\", participantIdNew);",
													"            pm.variables.set(\"isActive\", true);",
													"",
													"            break;",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t{\n\t\t\"participantId\":{{participantId}},\n\t\t\"isActive\": true,\n\t\t\"companyId\":{{companyL}},\n\t\t\"productCode\":\"INS\",\n\t\t\"roleId\":{{roldeId}},\n\t\t\"roleName\":\"{{roleName}}\"\n\t}\n]"
										},
										"url": {
											"raw": "{{baseURI}}/api/companies/{{companyL}}/roles",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{companyL}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate_Companies - IP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"To check company is active \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isActive).to.eql(true);",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var companyL = pm.variables.get(\"IPCompany\");",
													"pm.variables.set('companyL', companyL);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \r\n\t\"id\": {{companyL}}\r\n}"
										},
										"url": {
											"raw": "{{baseURI}}/api/companies/{{companyL}}/update-status?command=activate",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{companyL}}",
												"update-status"
											],
											"query": [
												{
													"key": "command",
													"value": "activate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Company by ID - IP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expCompany = pm.variables.get(\"IPCompany\");\r",
													"console.log(expCompany);\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
													"    pm.expect(responseJSONdata.id).to.eql(parseInt(expCompany));\r",
													"}); \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"IPCompany\",pm.variables.get(\"IPCompany\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{IPCompany}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{IPCompany}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Company - INSBroker",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"entityName\", pm.variables.get(\"entityName\"));\r",
													"pm.variables.set(\"recordTypeId\", 1);\r",
													"\r",
													"var moment = require('moment'); \r",
													"var timeT = moment.utc().format();  \r",
													"console.log(\"Current time: \"+timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/countries\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"    for(i=0; i< jsonData.length; i++)\r",
													"    { \r",
													"        if(jsonData[i].countryCode.includes(\"US\"))\r",
													"        {\r",
													"            var countryName =  jsonData[i].name;\r",
													"            var countryCode = jsonData[i].countryCode;\r",
													"            console.log(\"country Name: \"+countryName);\r",
													"            pm.variables.set(\"country\", countryName);\r",
													"            pm.variables.set(\"code1\", countryCode);\r",
													"            console.log(\"country code: \"+countryCode);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
													"    pm.sendRequest({\r",
													"        url: url,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        var jsonData = res.json();\r",
													"        var stateName = jsonData[0].name;\r",
													"        console.log(\"state Name: \"+stateName);\r",
													"        pm.variables.set(\"stateRegion\", stateName);     \r",
													"        var stateId = jsonData[0].id;\r",
													"        console.log(\"state Id: \"+stateId);\r",
													"        pm.variables.set(\"stateRegionId\", stateId);   \r",
													"        \r",
													"       \r",
													"        var url2 = pm.variables.get(\"baseURI\");\r",
													"        url2 = url2.concat(\"/api/institution-types\");\r",
													"        pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"        }, function (err, res) {\r",
													"            var jsonData = res.json();\r",
													"            var institutionType = jsonData[0].id;\r",
													"            console.log(\"institutionType id: \"+institutionType);\r",
													"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
													"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
													"\r",
													"            var url3 = pm.variables.get(\"baseURI\");\r",
													"            url3 = url3.concat(\"/api/sectors\");\r",
													"            pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"            }, function (err, res) {\r",
													"                var jsonData = res.json();\r",
													"                var sectorId = jsonData[5].id;\r",
													"                console.log(\"sector id: \"+sectorId);\r",
													"                console.log(\"sector name: \"+jsonData[5].name);\r",
													"                pm.variables.set(\"sectorId\", sectorId);   \r",
													"                \r",
													"                var url4 = pm.variables.get(\"baseURI\");\r",
													"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
													"                pm.sendRequest({\r",
													"                url: url4,\r",
													"                method: 'GET',\r",
													"                header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"                }, function (err, res) {\r",
													"                    var jsonData = res.json();\r",
													"                    var industryId = jsonData[0].id;\r",
													"                    console.log(\"industry Id : \"+industryId);\r",
													"                    console.log(\"industry name: \"+jsonData[0].name);\r",
													"                    pm.variables.set(\"industryId\", industryId);   \r",
													"\r",
													"                }); \r",
													"            }); \r",
													"        });\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code for newly created company is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var suffix = pm.variables.get(\"entityName\");\r",
													"var expCmpId = jsonData.id;\r",
													"pm.variables.set(\"INSBrokerCompany\",expCmpId)\r",
													"pm.variables.set(\"INSBrokerCompanyName\",jsonData.legalEntityName)\r",
													"\r",
													"pm.test(\"To check new created IPCompany: \" + expCmpId, function () {\r",
													"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegINSBroker_' + suffix);\r",
													"});\r",
													"\r",
													"// var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"?command=activate\";\r",
													"// pm.sendRequest({\r",
													"//     url: url,\r",
													"//     method: 'PUT',\r",
													"//     header: {\r",
													"//         'Content-Type': 'application/json',\r",
													"//         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//     },\r",
													"//     body: {\r",
													"//         mode: 'raw',\r",
													"//         raw: {\r",
													"           \r",
													"//             \"id\": expCmpId,                                       \r",
													"//         }\r",
													"//     }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"    \r",
													"//     pm.test(\"To check activate company has response 200\", function () {\r",
													"//         pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"\r",
													"//     var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"//     pm.sendRequest({\r",
													"//     url: url1,\r",
													"//     method: 'POST',\r",
													"//     header: {\r",
													"//         'Content-Type': 'application/json',\r",
													"//         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//     },\r",
													"//     body: {\r",
													"//         mode: 'raw',\r",
													"//         raw: {\r",
													"                                                  \r",
													"//             }\r",
													"//         }\r",
													"//     }, function (err, res) {\r",
													"//         if (err) { console.log(url + err); }\r",
													"//     });\r",
													"\r",
													"//     var url2 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=5000\";\r",
													"//     pm.sendRequest({\r",
													"//     url: url2,\r",
													"//     method: 'GET',\r",
													"//     header: {\r",
													"//                 'Accept': 'application/json',\r",
													"//                 'Content-Type': 'application/json',\r",
													"//                 'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//             }\r",
													"//     }, function (err, res) {\r",
													"//         if (err) { console.log(url + err); }\r",
													"\r",
													"//         var jsonData1 = res.json();\r",
													"//             for (i = 0; i < jsonData1.length; i++) {\r",
													"//                 if (jsonData1[i].id == expCmpId) {\r",
													"                    \r",
													"//                     pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
													"//                         pm.expect(jsonData1[i].recordTypeId).to.eql(1);\r",
													"//                         pm.expect(jsonData1[i].isActive).to.eql(true);\r",
													"\r",
													"//                     });\r",
													"//                 }\r",
													"//             }\r",
													"//     });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"legalEntityName\": \"EntlRegINSBroker_{{entityName}}\",\r\n    \"name\": \"EntlRegINSBroker_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/companies",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProductRoles-Activate-INSBroker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"var companyId = pm.variables.get(\"INSBrokerCompany\");",
													"",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\" + companyId + \"/roles\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"    function (err, res) {",
													"    if (err) { console.log(\"error :\" + err); };",
													"",
													"    var responseJSONdata = res.json();",
													"    for (var i = 0; i < responseJSONdata.length; i++) {",
													"        if(responseJSONdata[i].roldeId == pm.variables.get(\"roldeId\"))",
													"        {",
													"        pm.test(\"To check /companies/{id} returns company details\", function () {",
													"            // for (var i = 0; i < responseJSONdata.length; i++) {",
													"            pm.expect(responseJSONdata[i].companyId).to.eql(parseInt(companyId));",
													"            // }",
													"        }); ",
													"        pm.test(\"To check Company Roles_activate\", function () {",
													"            // for (var i = 0; i < responseJSONdata.length; i++) {",
													"            pm.expect(responseJSONdata[i].isActive).to.eql(true);",
													"            // }",
													"        }); ",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var companyId = pm.variables.get(\"INSBrokerCompany\");",
													"pm.variables.set('companyL', companyId);",
													"",
													"var url = pm.variables.get(\"baseURI\");",
													"  url = url.concat(\"/api/Companies/\" + companyId + \"/roles?productCode=INS\" );",
													"pm.sendRequest({",
													"  url: url,",
													"  method: 'GET',",
													"  header: {",
													"    'Accept': 'application/json',",
													"    'Content-Type': 'application/json',",
													"    'x-platform-code': pm.environment.get(\"platformCode\"),",
													"    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"  }",
													"},",
													"  function (err, res) {",
													"    if (err) { console.log(\"error :\" + err); };",
													"    var jsonData = res.json();",
													"    for(i=0;i<jsonData.length;i++)",
													"    {",
													"        console.log(\"--------update permission -- for loop\");",
													"        if(jsonData[i].roleName.includes(\"Broker\"))",
													"        {",
													"            var roleIdNew = jsonData[i].roleId;",
													"            var roleNameNew = jsonData[i].roleName;",
													"            var participantIdNew = jsonData[i].participantId;",
													"",
													"            console.log(\"roleId--->\" + roleIdNew);",
													"            console.log(\"roleName--->\" + roleNameNew);",
													"            console.log(\"participantId--->\" + participantIdNew);",
													"        ",
													"            pm.variables.set(\"roldeId\", roleIdNew);",
													"            pm.variables.set(\"roleName\", roleNameNew);",
													"            pm.variables.set(\"participantId\", participantIdNew);",
													"            pm.variables.set(\"isActive\", true);",
													"",
													"            break;",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t{\n\t\t\"participantId\":{{participantId}},\n\t\t\"isActive\": true,\n\t\t\"companyId\":{{companyL}},\n\t\t\"productCode\":\"INS\",\n\t\t\"roleId\":{{roldeId}},\n\t\t\"roleName\":\"{{roleName}}\"\n\t}\n]"
										},
										"url": {
											"raw": "{{baseURI}}/api/companies/{{companyL}}/roles",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{companyL}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate_Companies - INSBroker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"To check company is active \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isActive).to.eql(true);",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var companyL = pm.variables.get(\"INSBrokerCompany\");",
													"pm.variables.set('companyL', companyL);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \r\n\t\"id\": {{companyL}}\r\n}"
										},
										"url": {
											"raw": "{{baseURI}}/api/companies/{{companyL}}/update-status?command=activate",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{companyL}}",
												"update-status"
											],
											"query": [
												{
													"key": "command",
													"value": "activate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Company by ID - INSBroker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expCompany = pm.variables.get(\"INSBrokerCompany\");\r",
													"console.log(expCompany);\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
													"    pm.expect(responseJSONdata.id).to.eql(parseInt(expCompany));\r",
													"}); \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"INSBrokerCompany\",pm.variables.get(\"INSBrokerCompany\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{INSBrokerCompany}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{INSBrokerCompany}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_INS IP-Broker OEN-1917",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"productCode1 = \"INS\";\r",
													"pm.variables.set(\"productCode1\", \"INS\");\r",
													"pm.variables.set(\"relationshipTypeId\",4); //SCF=1, AR=2, INBLOCK=3, INS=4\r",
													"pm.variables.set(\"delegationTypeId\",2); //Read Only=1, RFQ Only=2, Accept/Bind Quotes=3\r",
													"\r",
													"var moment = require('moment'); \r",
													"var timeT = moment.utc().format();  \r",
													"console.log(\"Current time: \"+timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.environment.get(\"baseURI\") + \"/api/participants?productCode=\" + productCode1 + \"&role=InsuredParty&recordTypeId=1&isActive=true\"+\"&companyName=\"+pm.variables.get(\"IPCompanyName\");\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    var jsonData = res.json();\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].name === pm.variables.get(\"IPCompanyName\")  && jsonData[i].participantRole === \"InsuredParty\")\r",
													"        {\r",
													"            pm.variables.set(\"IPId\", jsonData[i].id);\r",
													"            pm.variables.set(\"IPName\", jsonData[i].name);\r",
													"            console.log(\"IPId\", jsonData[i].id);\r",
													"            console.log(\"IPName\", jsonData[i].name);\r",
													"            pm.variables.set(\"countryOfJurisdiction_IP\", jsonData[i].countryOfFormation);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"var url = pm.environment.get(\"baseURI\") + \"/api/participants?productCode=\" + productCode1 + \"&role=Broker&recordTypeId=1&isActive=true\"+\"&companyName=\"+pm.variables.get(\"INSBrokerCompanyName\");\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    var jsonData = res.json();\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].name === pm.variables.get(\"INSBrokerCompanyName\") && jsonData[i].participantRole === \"Broker\") \r",
													"        {\r",
													"            pm.variables.set(\"BrokerId\", jsonData[i].id);\r",
													"            pm.variables.set(\"BrokerName\", jsonData[i].name);\r",
													"            console.log(\"BrokerId\", jsonData[i].id);\r",
													"            console.log(\"BrokerName\", jsonData[i].name);\r",
													"            pm.variables.set(\"countryOfJurisdiction_Broker\", jsonData[i].countryOfFormation);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"INS relationship gets created. Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"pm.variables.set(\"relationshipIdINS\",relationshipId);\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'POST',\r",
													"// header: {\r",
													"//     'Content-Type': 'application/json',\r",
													"//      'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"// },\r",
													"// body: {\r",
													"//     mode: 'raw',\r",
													"//     raw: {\r",
													"                                                \r",
													"//         }\r",
													"//     }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"// });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Insured Party\",\r\n            \"participantId\": {{IPId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_IP}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Broker\",\r\n            \"participantId\": {{BrokerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Broker}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },\r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [],\r\n    \"retainedDays\": -32768,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCode1}}\",\r\n    \"buyerValidationDate\": null,\r\n    \"delegationTypeId\": {{delegationTypeId}},\r\n    \"startDate\": \"{{currentTime}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get INS Relationship by Id INS IP-Broker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Validating inblockrelationships by id details \", function () {\r",
													"    for(var i=0; i<responseJSONdata.length; i++)\r",
													"    {\r",
													"        pm.expect(responseJSONdata[i]).to.have.any.keys('status', 'id', 'productCode', 'statusId', 'relationshipType');\r",
													"\r",
													"        pm.expect(responseJSONdata[i].status).to.eql(\"Active\");\r",
													"\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"relationshipIdINS\",pm.variables.get(\"relationshipIdINS\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/relationships/{{relationshipIdINS}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"relationships",
												"{{relationshipIdINS}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Company - PlatformBroker",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"entityName\", pm.variables.get(\"entityName\"));\r",
													"pm.variables.set(\"recordTypeId\", 1);\r",
													"\r",
													"var moment = require('moment'); \r",
													"var timeT = moment.utc().format();  \r",
													"console.log(\"Current time: \"+timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/countries\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"    for(i=0; i< jsonData.length; i++)\r",
													"    { \r",
													"        if(jsonData[i].countryCode.includes(\"US\"))\r",
													"        {\r",
													"            var countryName =  jsonData[i].name;\r",
													"            var countryCode = jsonData[i].countryCode;\r",
													"            console.log(\"country Name: \"+countryName);\r",
													"            pm.variables.set(\"country\", countryName);\r",
													"            pm.variables.set(\"code1\", countryCode);\r",
													"            console.log(\"country code: \"+countryCode);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
													"    pm.sendRequest({\r",
													"        url: url,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        var jsonData = res.json();\r",
													"        var stateName = jsonData[0].name;\r",
													"        console.log(\"state Name: \"+stateName);\r",
													"        pm.variables.set(\"stateRegion\", stateName);     \r",
													"        var stateId = jsonData[0].id;\r",
													"        console.log(\"state Id: \"+stateId);\r",
													"        pm.variables.set(\"stateRegionId\", stateId);   \r",
													"        \r",
													"        \r",
													"        var url2 = pm.variables.get(\"baseURI\");\r",
													"        url2 = url2.concat(\"/api/institution-types\");\r",
													"        pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"        }, function (err, res) {\r",
													"            var jsonData = res.json();\r",
													"            var institutionType = jsonData[0].id;\r",
													"            console.log(\"institutionType id: \"+institutionType);\r",
													"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
													"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
													"\r",
													"            var url3 = pm.variables.get(\"baseURI\");\r",
													"            url3 = url3.concat(\"/api/sectors\");\r",
													"            pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"            }, function (err, res) {\r",
													"                var jsonData = res.json();\r",
													"                var sectorId = jsonData[5].id;\r",
													"                console.log(\"sector id: \"+sectorId);\r",
													"                console.log(\"sector name: \"+jsonData[5].name);\r",
													"                pm.variables.set(\"sectorId\", sectorId);   \r",
													"                \r",
													"                var url4 = pm.variables.get(\"baseURI\");\r",
													"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
													"                pm.sendRequest({\r",
													"                url: url4,\r",
													"                method: 'GET',\r",
													"                header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"                }, function (err, res) {\r",
													"                    var jsonData = res.json();\r",
													"                    var industryId = jsonData[0].id;\r",
													"                    console.log(\"industry Id : \"+industryId);\r",
													"                    console.log(\"industry name: \"+jsonData[0].name);\r",
													"                    pm.variables.set(\"industryId\", industryId);   \r",
													"\r",
													"                }); \r",
													"            }); \r",
													"        });\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code for newly created company is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var suffix = pm.variables.get(\"entityName\");\r",
													"var expCmpId = jsonData.id;\r",
													"pm.variables.set(\"INSPlatformBrokerCompany\",expCmpId)\r",
													"pm.variables.set(\"INSPlatformBrokerName\",jsonData.legalEntityName)\r",
													"\r",
													"pm.test(\"To check new created INSPlatformBrokerCompany: \" + expCmpId, function () {\r",
													"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegINSPlatformBroker_' + suffix);\r",
													"});\r",
													"\r",
													"// var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"?command=activate\";\r",
													"// pm.sendRequest({\r",
													"//     url: url,\r",
													"//     method: 'PUT',\r",
													"//     header: {\r",
													"//         'Content-Type': 'application/json',\r",
													"//         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//     },\r",
													"//     body: {\r",
													"//         mode: 'raw',\r",
													"//         raw: {\r",
													"           \r",
													"//             \"id\": expCmpId,                                       \r",
													"//         }\r",
													"//     }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"    \r",
													"//     pm.test(\"To check activate company has response 200\", function () {\r",
													"//         pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"\r",
													"//     var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"//     pm.sendRequest({\r",
													"//     url: url1,\r",
													"//     method: 'POST',\r",
													"//     header: {\r",
													"//         'Content-Type': 'application/json',\r",
													"//         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//     },\r",
													"//     body: {\r",
													"//         mode: 'raw',\r",
													"//         raw: {\r",
													"                                                  \r",
													"//             }\r",
													"//         }\r",
													"//     }, function (err, res) {\r",
													"//         if (err) { console.log(url + err); }\r",
													"//     });\r",
													"\r",
													"//     var url2 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=5000\";\r",
													"//     pm.sendRequest({\r",
													"//     url: url2,\r",
													"//     method: 'GET',\r",
													"//     header: {\r",
													"//                 'Accept': 'application/json',\r",
													"//                 'Content-Type': 'application/json',\r",
													"//                 'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//             }\r",
													"//     }, function (err, res) {\r",
													"//         if (err) { console.log(url + err); }\r",
													"\r",
													"//         var jsonData1 = res.json();\r",
													"//             for (i = 0; i < jsonData1.length; i++) {\r",
													"//                 if (jsonData1[i].id == expCmpId) {\r",
													"                    \r",
													"//                     pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
													"//                         pm.expect(jsonData1[i].recordTypeId).to.eql(1);\r",
													"//                         pm.expect(jsonData1[i].isActive).to.eql(true);\r",
													"\r",
													"//                     });\r",
													"//                 }\r",
													"//             }\r",
													"//     });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"legalEntityName\": \"EntlRegINSPlatformBroker_{{entityName}}\",\r\n    \"name\": \"EntlRegINSPlatformBroker_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/companies",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProductRoles-Activate-PlatformBroker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"var companyId = pm.variables.get(\"INSPlatformBrokerCompany\");",
													"",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\" + companyId + \"/roles\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"    function (err, res) {",
													"    if (err) { console.log(\"error :\" + err); };",
													"",
													"    var responseJSONdata = res.json();",
													"    for (var i = 0; i < responseJSONdata.length; i++) {",
													"        if(responseJSONdata[i].roldeId == pm.variables.get(\"roldeId\"))",
													"        {",
													"        pm.test(\"To check /companies/{id} returns company details\", function () {",
													"            // for (var i = 0; i < responseJSONdata.length; i++) {",
													"            pm.expect(responseJSONdata[i].companyId).to.eql(parseInt(companyId));",
													"            // }",
													"        }); ",
													"        pm.test(\"To check Company Roles_activate\", function () {",
													"            // for (var i = 0; i < responseJSONdata.length; i++) {",
													"            pm.expect(responseJSONdata[i].isActive).to.eql(true);",
													"            // }",
													"        }); ",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var companyId = pm.variables.get(\"INSPlatformBrokerCompany\");",
													"pm.variables.set('companyL', companyId);",
													"",
													"var url = pm.variables.get(\"baseURI\");",
													"  url = url.concat(\"/api/Companies/\" + companyId + \"/roles?productCode=INS\" );",
													"pm.sendRequest({",
													"  url: url,",
													"  method: 'GET',",
													"  header: {",
													"    'Accept': 'application/json',",
													"    'Content-Type': 'application/json',",
													"    'x-platform-code': pm.environment.get(\"platformCode\"),",
													"    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"  }",
													"},",
													"  function (err, res) {",
													"    if (err) { console.log(\"error :\" + err); };",
													"    var jsonData = res.json();",
													"    for(i=0;i<jsonData.length;i++)",
													"    {",
													"        console.log(\"--------update permission -- for loop\");",
													"        if(jsonData[i].roleName.includes(\"Platform Broker\"))",
													"        {",
													"            var roleIdNew = jsonData[i].roleId;",
													"            var roleNameNew = jsonData[i].roleName;",
													"            var participantIdNew = jsonData[i].participantId;",
													"",
													"            console.log(\"roleId--->\" + roleIdNew);",
													"            console.log(\"roleName--->\" + roleNameNew);",
													"            console.log(\"participantId--->\" + participantIdNew);",
													"        ",
													"            pm.variables.set(\"roldeId\", roleIdNew);",
													"            pm.variables.set(\"roleName\", roleNameNew);",
													"            pm.variables.set(\"participantId\", participantIdNew);",
													"            pm.variables.set(\"isActive\", true);",
													"",
													"            break;",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t{\n\t\t\"participantId\":{{participantId}},\n\t\t\"isActive\": true,\n\t\t\"companyId\":{{companyL}},\n\t\t\"productCode\":\"INS\",\n\t\t\"roleId\":{{roldeId}},\n\t\t\"roleName\":\"{{roleName}}\"\n\t}\n]"
										},
										"url": {
											"raw": "{{baseURI}}/api/companies/{{companyL}}/roles",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{companyL}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate_Companies - PlatformBroker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"To check company is active \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isActive).to.eql(true);",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var companyL = pm.variables.get(\"INSPlatformBrokerCompany\");",
													"pm.variables.set('companyL', companyL);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \r\n\t\"id\": {{companyL}}\r\n}"
										},
										"url": {
											"raw": "{{baseURI}}/api/companies/{{companyL}}/update-status?command=activate",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{companyL}}",
												"update-status"
											],
											"query": [
												{
													"key": "command",
													"value": "activate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Company by ID - PlatformBroker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expCompany = pm.variables.get(\"INSPlatformBrokerCompany\");\r",
													"console.log(expCompany);\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
													"    pm.expect(responseJSONdata.id).to.eql(parseInt(expCompany));\r",
													"}); \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"INSPlatformBrokerCompany\",pm.variables.get(\"INSPlatformBrokerCompany\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{INSPlatformBrokerCompany}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{INSPlatformBrokerCompany}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_INS IP-PlatformBroker OEN-2110",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"productCode1 = \"INS\";\r",
													"pm.variables.set(\"productCode1\", \"INS\");\r",
													"pm.variables.set(\"relationshipTypeId\",5); //SCF=1, AR=2, INBLOCK=3, INS IP-Broker=4, INS IP-PlatformBroker=5\r",
													"pm.variables.set(\"delegationTypeId\",2); //Read Only=1, RFQ Only=2, Accept/Bind Quotes=3\r",
													"\r",
													"var moment = require('moment'); \r",
													"var timeT = moment.utc().format();  \r",
													"console.log(\"Current time: \"+timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.environment.get(\"baseURI\") + \"/api/participants?productCode=\" + productCode1 + \"&role=InsuredParty&recordTypeId=1&isActive=true\"+\"&companyName=\"+pm.variables.get(\"IPCompanyName\");;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    var jsonData = res.json();\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].name === pm.variables.get(\"IPCompanyName\")  && jsonData[i].participantRole === \"InsuredParty\")\r",
													"        {\r",
													"            pm.variables.set(\"IPId\", jsonData[i].id);\r",
													"            pm.variables.set(\"IPName\", jsonData[i].name);\r",
													"            console.log(\"IPId\", jsonData[i].id);\r",
													"            console.log(\"IPName\", jsonData[i].name);\r",
													"            pm.variables.set(\"countryOfJurisdiction_IP\", jsonData[i].countryOfFormation);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"var url = pm.environment.get(\"baseURI\") + \"/api/participants?productCode=\" + productCode1 + \"&role=PlatformBroker&recordTypeId=1&isActive=true\"+\"&companyName=\"+pm.variables.get(\"INSPlatformBrokerName\");;\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    var jsonData = res.json();\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].name === pm.variables.get(\"INSPlatformBrokerName\") && jsonData[i].participantRole === \"PlatformBroker\") \r",
													"        {\r",
													"            pm.variables.set(\"PlatformBrokerId\", jsonData[i].id);\r",
													"            pm.variables.set(\"PlatformBrokerName\", jsonData[i].name);\r",
													"            console.log(\"PlatformBrokerId\", jsonData[i].id);\r",
													"            console.log(\"PlatformBrokerName\", jsonData[i].name);\r",
													"            pm.variables.set(\"countryOfJurisdiction_PlatformBroker\", jsonData[i].countryOfFormation);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"INS relationship gets created. Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"//  pm.test(\"Status code is 200\", function () {\r",
													"//      pm.expect(pm.response.code).to.be.oneOf([204,200,201]);\r",
													"//  });\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"pm.variables.set(\"relationshipIdINS1\",relationshipId);\r",
													"\r",
													"// var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"// pm.sendRequest({\r",
													"// url: url1,\r",
													"// method: 'POST',\r",
													"// header: {\r",
													"//     'Content-Type': 'application/json',\r",
													"//      'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"//     'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"// },\r",
													"// body: {\r",
													"//     mode: 'raw',\r",
													"//     raw: {\r",
													"                                                \r",
													"//         }\r",
													"//     }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"// });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Insured Party\",\r\n            \"participantId\": {{IPId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_IP}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Platform Broker\",\r\n            \"participantId\": {{PlatformBrokerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_PlatformBroker}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },\r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"retainedDays\": -32768,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCode1}}\",\r\n    \"startDate\": \"{{currentTime}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get INS Relationship by Id INS IP-PlatformBroker",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Validating inblockrelationships by id details \", function () {\r",
													"    for(var i=0; i<responseJSONdata.length; i++)\r",
													"    {\r",
													"        pm.expect(responseJSONdata[i]).to.have.any.keys('status', 'id', 'productCode', 'statusId', 'relationshipType');\r",
													"\r",
													"        pm.expect(responseJSONdata[i].status).to.eql(\"Active\");\r",
													"\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"relationshipIdINS1\",pm.variables.get(\"relationshipIdINS1\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/relationships/{{relationshipIdINS1}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"relationships",
												"{{relationshipIdINS1}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "PUTS",
					"item": [
						{
							"name": "Get IntroducingAgents Provider by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"  url = url.concat(\"/api/Companies/\" + pm.environment.get(\"PUTsProvider\") + \"/roles?productCode=PUT\" );\r",
											"pm.sendRequest({\r",
											"  url: url,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Accept': 'application/json',\r",
											"    'Content-Type': 'application/json',\r",
											"    'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"  }\r",
											"},\r",
											"  function (err, res) {\r",
											"    if (err) { console.log(\"error :\" + err); };\r",
											"    var jsonData = res.json();\r",
											"    for(i=0;i<jsonData.length;i++)\r",
											"    {\r",
											"        console.log(\"--------update permission -- for loop\");\r",
											"        if(jsonData[i].roleName.includes(\"Provider\"))\r",
											"        {\r",
											"            var participantIdProvider = jsonData[i].participantId;\r",
											"            console.log(\"participantIdProvider--> \"+participantIdProvider );\r",
											"            pm.variables.set(\"participantIdProvider\",jsonData[i].participantId);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify response structure format\", function () {\r",
											"    for(var i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        pm.expect(jsonData[i]).to.have.all.keys('isSelected','companyId','id','name','isActive');\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response id and name should not be null\", function () {\r",
											"    for(var i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        pm.expect(jsonData[i].id).to.be.not.eql(null);\r",
											"        pm.expect(jsonData[i].name).to.be.not.eql(null);\r",
											"\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI_PUTS}}/api/IntroducingAgent/platformCode/{{platformCode}}/providerId/{{participantIdProvider}}",
									"host": [
										"{{baseURI_PUTS}}"
									],
									"path": [
										"api",
										"IntroducingAgent",
										"platformCode",
										"{{platformCode}}",
										"providerId",
										"{{participantIdProvider}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put IntroducingAgents Provider by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"  url = url.concat(\"/api/Companies/\" + pm.environment.get(\"PUTsProvider\") + \"/roles?productCode=PUT\" );\r",
											"pm.sendRequest({\r",
											"  url: url,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Accept': 'application/json',\r",
											"    'Content-Type': 'application/json',\r",
											"    'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"  }\r",
											"},\r",
											"  function (err, res) {\r",
											"    if (err) { console.log(\"error :\" + err); };\r",
											"    var jsonData = res.json();\r",
											"    for(i=0;i<jsonData.length;i++)\r",
											"    {\r",
											"        console.log(\"--------update permission -- for loop\");\r",
											"        if(jsonData[i].roleName.includes(\"Provider\"))\r",
											"        {\r",
											"            var participantIdProvider = jsonData[i].participantId;\r",
											"            console.log(\"participantIdProvider--> \"+participantIdProvider );\r",
											"            pm.variables.set(\"participantIdProvider\",participantIdProvider);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    var url = pm.variables.get(\"baseURI_PUTS\");\r",
											"    url = url.concat(\"/api/IntroducingAgent/platformCode/\" + pm.environment.get(\"platformCode\") + \"/providerId/\" +pm.variables.get(\"participantIdProvider\"));\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
											"    }\r",
											"    },\r",
											"    function (err, res) {\r",
											"        if (err) { console.log(\"error :\" + err); };\r",
											"        var jsonData = res.json();\r",
											"        // for(i=0;i<jsonData.length;i++)\r",
											"        // {\r",
											"            pm.variables.set(\"isSelected\",true);\r",
											"            pm.variables.set(\"id\",jsonData[0].id);\r",
											"            pm.variables.set(\"name\",jsonData[0].name);\r",
											"            pm.variables.set(\"isActive\",jsonData[0].isActive);\r",
											"        // }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify response structure format\", function () {\r",
											"    for(var i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        pm.expect(jsonData[i]).to.have.all.keys('isSelected','companyId','id','name','isActive');\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response id and name should not be null\", function () {\r",
											"    for(var i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        pm.expect(jsonData[i].id).to.be.not.eql(null);\r",
											"        pm.expect(jsonData[i].name).to.be.not.eql(null);\r",
											"\r",
											"    }\r",
											"}); \r",
											"\r",
											"pm.test(\"Verify response for selected IntroducingAgent : \"+ pm.variables.get(\"name\"), function () {\r",
											"    for(var i=0; i<jsonData.length; i++)\r",
											"    {\r",
											"        pm.expect(jsonData[i].isSelected).to.be.eql(true);\r",
											"        pm.expect(jsonData[i].name).to.be.eql(pm.variables.get(\"name\"));\r",
											"\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"isSelected\": true,\r\n        \"id\": {{id}},\r\n        \"name\": \"{{name}}\",\r\n        \"isActive\": true\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI_PUTS}}/api/IntroducingAgent/platformCode/{{platformCode}}/providerId/{{participantIdProvider}}",
									"host": [
										"{{baseURI_PUTS}}"
									],
									"path": [
										"api",
										"IntroducingAgent",
										"platformCode",
										"{{platformCode}}",
										"providerId",
										"{{participantIdProvider}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Inblock",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "Get Companies?product=INBLOCK",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"To check products NOT NULL\", function () {\r",
													"    pm.expect(jsonData.id).not.eql(null);\r",
													"    pm.expect(jsonData.name).not.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate response body key: \", function () {\r",
													"    for(i=0;i<jsonData.length; i++)\r",
													"    {\r",
													"        pm.expect(jsonData[i]).to.have.any.keys('id', 'salesforceId', 'name', 'dba', 'phone', 'city', 'stateRegion', 'country', 'duns', 'taxId', 'stateOfIncorporation', 'countryOfJurisdiction', 'isActive', 'updatedOn', 'users');\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/companies?format=company-only&productCode=INBLOCK",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies"
											],
											"query": [
												{
													"key": "format",
													"value": "company-only"
												},
												{
													"key": "productCode",
													"value": "INBLOCK"
												}
											]
										},
										"description": "(for selected product)"
									},
									"response": []
								},
								{
									"name": "Get Realtionships productCode=INBLOCK",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200 && responseBody !== '') {\r",
													"    var responseJSONdata = JSON.parse(responseBody);\r",
													"    pm.test(\"To check record-types details not null: \" + responseJSONdata.length, function () {\r",
													"        for (i = 0; i < responseJSONdata.length; i++) {\r",
													"            pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"        }\r",
													"    });\r",
													"    pm.test(\"To check productCode 'INBLOCK' \" , function () {\r",
													"        for (i = 0; i < responseJSONdata.length; i++) {\r",
													"            pm.expect(responseJSONdata[i].productCode).to.eql(\"INBLOCK\");\r",
													"        }\r",
													"    });\r",
													"    pm.test(\"Validating record-types format from response body \", function () {\r",
													"     //   for (i = 0; i < responseJSONdata.length; i++) {\r",
													"            pm.expect(responseJSONdata[0]).to.have.any.keys('id', 'productCode', 'buyerId', 'buyerName', 'supplierId', 'supplierName', 'currencyCode', 'descOfGoodsServices', 'startDate', 'retainedDays', 'incoTerms', 'invoiceDueDateAdjustmentId','invoiceDueDateAdjustement','paymentTerms',  'governingLawId',\r",
													"        'governingLaw', 'additionalDetails', 'regionCode', 'statusId', 'status', 'disclosureTypeId','isPayablesEligible',\r",
													"        'recordTypeId','recordType', 'incoTermsTypeId', 'salesforceId', 'annualSales','calendars');\r",
													"       // }\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/Relationships?relationshipTypeId=3",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Relationships"
											],
											"query": [
												{
													"key": "relationshipTypeId",
													"value": "3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Customer_INBLOCK",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeC\", \"INBLOCK\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var code = pm.variables.get(\"productCodeC\");\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"To check Suppliers are displayed for product \" + code , function () {\r",
													"  for(var i=0; i<jsonData.length; i++){\r",
													"    pm.expect(jsonData[i].productCode).to.eql(code);\r",
													"    pm.expect(jsonData[i].participantRole).to.eql(\"Customer\"); \r",
													"  }\r",
													"}); \r",
													"pm.test(\"Validating participant format from response body \", function () {\r",
													"  for (i = 0; i < jsonData.length; i++) {\r",
													"    pm.expect(jsonData[i]).to.have.all.keys('id', 'name', 'productCode', 'roleId', 'participantRole', 'isActive', 'countryOfFormation');\r",
													"  }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Participants?role=customer&productCode={{productCodeC}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Participants"
											],
											"query": [
												{
													"key": "role",
													"value": "customer"
												},
												{
													"key": "productCode",
													"value": "{{productCodeC}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Suppliers_INBLOCK",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var code = pm.variables.get(\"productCodeC\");\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"To check Suppliers are displayed for product \" + code , function () {\r",
													"  for(var i=0; i<jsonData.length; i++){\r",
													"    pm.expect(jsonData[i].productCode).to.eql(code);\r",
													"    pm.expect(jsonData[i].participantRole).to.eql(\"Supplier\"); \r",
													"  }\r",
													"}); \r",
													"pm.test(\"Validating participant format from response body \", function () {\r",
													"  for (i = 0; i < jsonData.length; i++) {\r",
													"    pm.expect(jsonData[i]).to.have.all.keys('id', 'name', 'productCode', 'roleId', 'participantRole', 'isActive', 'countryOfFormation');\r",
													"  }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeC\", \"INBLOCK\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Participants?role=supplier&productCode={{productCodeC}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Participants"
											],
											"query": [
												{
													"key": "role",
													"value": "supplier"
												},
												{
													"key": "productCode",
													"value": "{{productCodeC}}"
												},
												{
													"key": "x-platform-code",
													"value": "{{platformCode}}",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Distributor_INBLOCK",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"productCodeC\", \"INBLOCK\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var code = pm.variables.get(\"productCodeC\");\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"To check Suppliers are displayed for product \" + code , function () {\r",
													"  for(var i=0; i<jsonData.length; i++){\r",
													"    pm.expect(jsonData[i].productCode).to.eql(code);\r",
													"    pm.expect(jsonData[i].participantRole).to.eql(\"Distributor\"); \r",
													"  }\r",
													"}); \r",
													"pm.test(\"Validating participant format from response body \", function () {\r",
													"  for (i = 0; i < jsonData.length; i++) {\r",
													"    pm.expect(jsonData[i]).to.have.all.keys('id', 'name', 'productCode', 'roleId', 'participantRole', 'isActive', 'countryOfFormation');\r",
													"  }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Participants?role=distributor&productCode={{productCodeC}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Participants"
											],
											"query": [
												{
													"key": "role",
													"value": "distributor"
												},
												{
													"key": "productCode",
													"value": "{{productCodeC}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CreateInBlockRelationships-OEN-1753-OEN-1296-OEN-1778-OEN-1918-OEN-2150",
							"item": [
								{
									"name": "Post Company - Inblock - Customer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"var timeToday = moment.utc().format('DDMMYY');\r",
													"\r",
													"var  cRandom = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
													"function getRandomAlphaNumeric(len, chars) {\r",
													"    var result = '';\r",
													"    for (var i = len; i > 0; i--)\r",
													"    { \r",
													"     result += chars[Math.floor(Math.random() * chars.length)];\r",
													"    }\r",
													"     return result;\r",
													"}\r",
													"var randomS = timeToday+\"_\"+cRandom;\r",
													"pm.variables.set(\"entityName\", randomS);\r",
													"\r",
													"pm.variables.set(\"recordTypeId\", 1);\r",
													"\r",
													"var moment = require('moment'); \r",
													"var timeT = moment.utc().format();  \r",
													"console.log(\"Current time: \"+timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/countries\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"    for(i=0; i< jsonData.length; i++)\r",
													"    { \r",
													"        if(jsonData[i].countryCode.includes(\"US\"))\r",
													"        {\r",
													"            var countryName =  jsonData[i].name;\r",
													"            var countryCode = jsonData[i].countryCode;\r",
													"            console.log(\"country Name: \"+countryName);\r",
													"            pm.variables.set(\"country\", countryName);\r",
													"            pm.variables.set(\"code1\", countryCode);\r",
													"            console.log(\"country code: \"+countryCode);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
													"    pm.sendRequest({\r",
													"        url: url,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        var jsonData = res.json();\r",
													"        var stateName = jsonData[0].name;\r",
													"        console.log(\"state Name: \"+stateName);\r",
													"        pm.variables.set(\"stateRegion\", stateName);     \r",
													"        var stateId = jsonData[0].id;\r",
													"        console.log(\"state Id: \"+stateId);\r",
													"        pm.variables.set(\"stateRegionId\", stateId);    \r",
													"\r",
													"       \r",
													"        var url2 = pm.variables.get(\"baseURI\");\r",
													"        url2 = url2.concat(\"/api/institution-types\");\r",
													"        pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"        }, function (err, res) {\r",
													"            var jsonData = res.json();\r",
													"            var institutionType = jsonData[0].id;\r",
													"            console.log(\"institutionType id: \"+institutionType);\r",
													"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
													"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
													"\r",
													"            var url3 = pm.variables.get(\"baseURI\");\r",
													"            url3 = url3.concat(\"/api/sectors\");\r",
													"            pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"            }, function (err, res) {\r",
													"                var jsonData = res.json();\r",
													"                var sectorId = jsonData[5].id;\r",
													"                console.log(\"sector id: \"+sectorId);\r",
													"                console.log(\"sector name: \"+jsonData[5].name);\r",
													"                pm.variables.set(\"sectorId\", sectorId);   \r",
													"                \r",
													"                var url4 = pm.variables.get(\"baseURI\");\r",
													"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
													"                pm.sendRequest({\r",
													"                url: url4,\r",
													"                method: 'GET',\r",
													"                header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"                }, function (err, res) {\r",
													"                    var jsonData = res.json();\r",
													"                    var industryId = jsonData[0].id;\r",
													"                    console.log(\"industry Id : \"+industryId);\r",
													"                    console.log(\"industry name: \"+jsonData[0].name);\r",
													"                    pm.variables.set(\"industryId\", industryId);   \r",
													"\r",
													"                }); \r",
													"            }); \r",
													"        });\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code for newly created company is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"var jsonData = pm.response.json();\r",
													"var suffix = pm.variables.get(\"entityName\");\r",
													"var expCmpId = jsonData.id;\r",
													"pm.variables.set(\"InblockCustomerCompany\",expCmpId)\r",
													"pm.variables.set(\"InblockCustomerCompanyName\",jsonData.legalEntityName)\r",
													"\r",
													"pm.test(\"To check new created InblockCustomerCompany: \" + expCmpId, function () {\r",
													"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegInblockCustomer_' + suffix);\r",
													"});\r",
													"\r",
													"// var url = pm.variables.get(\"baseURI\") + \"/api/companies/\" + expCmpId + \"?command=activate\";\r",
													"// pm.sendRequest({\r",
													"//     url: url,\r",
													"//     method: 'PUT',\r",
													"//     header: {\r",
													"//         'Content-Type': 'application/json',\r",
													"//         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//     },\r",
													"//     body: {\r",
													"//         mode: 'raw',\r",
													"//         raw: {\r",
													"           \r",
													"//             \"id\": expCmpId,                                       \r",
													"//         }\r",
													"//     }\r",
													"// }, function (err, res) {\r",
													"//     if (err) { console.log(url + err); }\r",
													"    \r",
													"//     pm.test(\"To check activate company has response 200\", function () {\r",
													"//         pm.expect(res.code).to.eql(200);      \r",
													"//     });\r",
													"\r",
													"//     var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"//     pm.sendRequest({\r",
													"//     url: url1,\r",
													"//     method: 'POST',\r",
													"//     header: {\r",
													"//         'Content-Type': 'application/json',\r",
													"//         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//     },\r",
													"//     body: {\r",
													"//         mode: 'raw',\r",
													"//         raw: {\r",
													"                                                  \r",
													"//             }\r",
													"//         }\r",
													"//     }, function (err, res) {\r",
													"//         if (err) { console.log(url + err); }\r",
													"//     });\r",
													"\r",
													"//     var url2 = pm.variables.get(\"baseURI\") + \"/api/companies?format=company-only&count=5000\";\r",
													"//     pm.sendRequest({\r",
													"//     url: url2,\r",
													"//     method: 'GET',\r",
													"//     header: {\r",
													"//                 'Accept': 'application/json',\r",
													"//                 'Content-Type': 'application/json',\r",
													"//                 'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"//             }\r",
													"//     }, function (err, res) {\r",
													"//         if (err) { console.log(url + err); }\r",
													"\r",
													"//         var jsonData1 = res.json();\r",
													"//             for (i = 0; i < jsonData1.length; i++) {\r",
													"//                 if (jsonData1[i].id == expCmpId) {\r",
													"                    \r",
													"//                     pm.test(\"To check newly created company after activate and published: \"+expCmpId, function () {\r",
													"//                         pm.expect(jsonData1[i].recordTypeId).to.eql(1);\r",
													"//                         pm.expect(jsonData1[i].isActive).to.eql(true);\r",
													"\r",
													"//                     });\r",
													"//                 }\r",
													"//             }\r",
													"//     });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"legalEntityName\": \"EntlRegInblockCustomer_{{entityName}}\",\r\n    \"name\": \"EntlRegInblockCustomer_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/companies",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProductRoles-Activate-Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"var companyId = pm.variables.get(\"InblockCustomerCompany\");",
													"",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\" + companyId + \"/roles\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"    function (err, res) {",
													"    if (err) { console.log(\"error :\" + err); };",
													"",
													"    var responseJSONdata = res.json();",
													"    for (var i = 0; i < responseJSONdata.length; i++) {",
													"        if(responseJSONdata[i].roldeId == pm.variables.get(\"roldeId\"))",
													"        {",
													"        pm.test(\"To check /companies/{id} returns company details\", function () {",
													"            // for (var i = 0; i < responseJSONdata.length; i++) {",
													"            pm.expect(responseJSONdata[i].companyId).to.eql(parseInt(companyId));",
													"            // }",
													"        }); ",
													"        pm.test(\"To check Company Roles_activate\", function () {",
													"            // for (var i = 0; i < responseJSONdata.length; i++) {",
													"            pm.expect(responseJSONdata[i].isActive).to.eql(true);",
													"            // }",
													"        }); ",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var companyId = pm.variables.get(\"InblockCustomerCompany\");",
													"pm.variables.set('companyL', companyId);",
													"",
													"var url = pm.variables.get(\"baseURI\");",
													"  url = url.concat(\"/api/Companies/\" + companyId + \"/roles?productCode=INBLOCK\" );",
													"pm.sendRequest({",
													"  url: url,",
													"  method: 'GET',",
													"  header: {",
													"    'Accept': 'application/json',",
													"    'Content-Type': 'application/json',",
													"    'x-platform-code': pm.environment.get(\"platformCode\"),",
													"    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"  }",
													"},",
													"  function (err, res) {",
													"    if (err) { console.log(\"error :\" + err); };",
													"    var jsonData = res.json();",
													"    for(i=0;i<jsonData.length;i++)",
													"    {",
													"        console.log(\"--------update permission -- for loop\");",
													"        if(jsonData[i].roleName.includes(\"Customer\"))",
													"        {",
													"            var roleIdNew = jsonData[i].roleId;",
													"            var roleNameNew = jsonData[i].roleName;",
													"            var participantIdNew = jsonData[i].participantId;",
													"",
													"            console.log(\"roleId--->\" + roleIdNew);",
													"            console.log(\"roleName--->\" + roleNameNew);",
													"            console.log(\"participantId--->\" + participantIdNew);",
													"        ",
													"            pm.variables.set(\"roldeId\", roleIdNew);",
													"            pm.variables.set(\"roleName\", roleNameNew);",
													"            pm.variables.set(\"participantId\", participantIdNew);",
													"            pm.variables.set(\"isActive\", true);",
													"",
													"            break;",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t{\n\t\t\"participantId\":{{participantId}},\n\t\t\"isActive\": true,\n\t\t\"companyId\":{{companyL}},\n\t\t\"productCode\":\"INBLOCK\",\n\t\t\"roleId\":{{roldeId}},\n\t\t\"roleName\":\"{{roleName}}\"\n\t}\n]"
										},
										"url": {
											"raw": "{{baseURI}}/api/companies/{{companyL}}/roles",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{companyL}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate_Companies Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"To check company is active \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isActive).to.eql(true);",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var companyL = pm.variables.get(\"InblockCustomerCompany\");",
													"pm.variables.set('companyL', companyL);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \r\n\t\"id\": {{companyL}}\r\n}"
										},
										"url": {
											"raw": "{{baseURI}}/api/companies/{{companyL}}/update-status?command=activate",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{companyL}}",
												"update-status"
											],
											"query": [
												{
													"key": "command",
													"value": "activate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Company by ID (roles) - Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expCompany = pm.variables.get(\"InblockCustomerCompany\");\r",
													"console.log(expCompany);\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
													"    pm.expect(responseJSONdata.id).to.eql(parseInt(expCompany));\r",
													"}); \r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"InblockCustomerCompany\",pm.variables.get(\"InblockCustomerCompany\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{InblockCustomerCompany}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{InblockCustomerCompany}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Company - Inblock - Supplier",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"entityName\", pm.variables.get(\"entityName\"));\r",
													"pm.variables.set(\"recordTypeId\", 1);\r",
													"\r",
													"var moment = require('moment'); \r",
													"var timeT = moment.utc().format();  \r",
													"console.log(\"Current time: \"+timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/countries\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"    for(i=0; i< jsonData.length; i++)\r",
													"    { \r",
													"        if(jsonData[i].countryCode.includes(\"US\"))\r",
													"        {\r",
													"            var countryName =  jsonData[i].name;\r",
													"            var countryCode = jsonData[i].countryCode;\r",
													"            console.log(\"country Name: \"+countryName);\r",
													"            pm.variables.set(\"country\", countryName);\r",
													"            pm.variables.set(\"code1\", countryCode);\r",
													"            console.log(\"country code: \"+countryCode);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
													"    pm.sendRequest({\r",
													"        url: url,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        var jsonData = res.json();\r",
													"        var stateName = jsonData[0].name;\r",
													"        console.log(\"state Name: \"+stateName);\r",
													"        pm.variables.set(\"stateRegion\", stateName);     \r",
													"        var stateId = jsonData[0].id;\r",
													"        console.log(\"state Id: \"+stateId);\r",
													"        pm.variables.set(\"stateRegionId\", stateId);  \r",
													"               \r",
													"        var url2 = pm.variables.get(\"baseURI\");\r",
													"        url2 = url2.concat(\"/api/institution-types\");\r",
													"        pm.sendRequest({\r",
													"        url: url2,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"        }\r",
													"        }, function (err, res) {\r",
													"            var jsonData = res.json();\r",
													"            var institutionType = jsonData[0].id;\r",
													"            console.log(\"institutionType id: \"+institutionType);\r",
													"            console.log(\"institutionType name: \"+jsonData[0].name);\r",
													"            pm.variables.set(\"institutionTypeId\", institutionType);   \r",
													"\r",
													"            var url3 = pm.variables.get(\"baseURI\");\r",
													"            url3 = url3.concat(\"/api/sectors\");\r",
													"            pm.sendRequest({\r",
													"            url: url3,\r",
													"            method: 'GET',\r",
													"            header: {\r",
													"                'Accept': 'application/json',\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"            }\r",
													"            }, function (err, res) {\r",
													"                var jsonData = res.json();\r",
													"                var sectorId = jsonData[5].id;\r",
													"                console.log(\"sector id: \"+sectorId);\r",
													"                console.log(\"sector name: \"+jsonData[5].name);\r",
													"                pm.variables.set(\"sectorId\", sectorId);   \r",
													"                \r",
													"                var url4 = pm.variables.get(\"baseURI\");\r",
													"                url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
													"                pm.sendRequest({\r",
													"                url: url4,\r",
													"                method: 'GET',\r",
													"                header: {\r",
													"                    'Accept': 'application/json',\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"                }\r",
													"                }, function (err, res) {\r",
													"                    var jsonData = res.json();\r",
													"                    var industryId = jsonData[0].id;\r",
													"                    console.log(\"industry Id : \"+industryId);\r",
													"                    console.log(\"industry name: \"+jsonData[0].name);\r",
													"                    pm.variables.set(\"industryId\", industryId);   \r",
													"\r",
													"                }); \r",
													"            }); \r",
													"        });\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var suffix = pm.variables.get(\"entityName\");\r",
													"var expCmpId = jsonData.id;\r",
													"pm.variables.set(\"InblockSupplierCompany\",expCmpId)\r",
													"pm.environment.set(\"InblockSupplierCompany\",expCmpId)\r",
													"\r",
													"pm.variables.set(\"InblockSupplierCompanyName\",jsonData.legalEntityName)\r",
													"\r",
													"pm.test(\"To check new created InblockSupplierCompany: \" + expCmpId, function () {\r",
													"    pm.expect(jsonData.legalEntityName).to.eql('EntlRegInblockSupplier_' + suffix);\r",
													"});\r",
													"pm.test(\"Status code for newly created company is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"legalEntityName\": \"EntlRegInblockSupplier_{{entityName}}\",\r\n    \"name\": \"EntlRegInblockSupplier_{{entityName}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"countryCode\": \"{{code1}}\",\r\n    \"formationCountryCode\": \"{{code1}}\",\r\n    \"formationStateRegionId\": {{stateRegionId}},\r\n    \"industryId\": null,\r\n    \"institutionTypeId\": {{institutionTypeId}},\r\n    \"isActive\": true,\r\n    \"sectorId\": {{sectorId}},\r\n    \"stateOfFormation\": \"{{stateRegion}}\",\r\n    \"stateRegion\": \"{{stateRegion}}\",\r\n    \"stateRegionId\": {{stateRegionId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/companies",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProductRoles-Activate- Supplier",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"var companyId = pm.variables.get(\"InblockSupplierCompany\");",
													"",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\" + companyId + \"/roles\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"        }",
													"    },",
													"    function (err, res) {",
													"    if (err) { console.log(\"error :\" + err); };",
													"",
													"    var responseJSONdata = res.json();",
													"    for (var i = 0; i < responseJSONdata.length; i++) {",
													"        if(responseJSONdata[i].roldeId == pm.variables.get(\"roldeId\"))",
													"        {",
													"        pm.test(\"To check /companies/{id} returns company details\", function () {",
													"            // for (var i = 0; i < responseJSONdata.length; i++) {",
													"            pm.expect(responseJSONdata[i].companyId).to.eql(parseInt(companyId));",
													"            // }",
													"        }); ",
													"        pm.test(\"To check Company Roles_activate\", function () {",
													"            // for (var i = 0; i < responseJSONdata.length; i++) {",
													"            pm.expect(responseJSONdata[i].isActive).to.eql(true);",
													"            // }",
													"        }); ",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var companyId = pm.variables.get(\"InblockSupplierCompany\");",
													"pm.variables.set('companyL', companyId);",
													"",
													"var url = pm.variables.get(\"baseURI\");",
													"  url = url.concat(\"/api/Companies/\" + companyId + \"/roles?productCode=INBLOCK\" );",
													"pm.sendRequest({",
													"  url: url,",
													"  method: 'GET',",
													"  header: {",
													"    'Accept': 'application/json',",
													"    'Content-Type': 'application/json',",
													"    'x-platform-code': pm.environment.get(\"platformCode\"),",
													"    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
													"  }",
													"},",
													"  function (err, res) {",
													"    if (err) { console.log(\"error :\" + err); };",
													"    var jsonData = res.json();",
													"    for(i=0;i<jsonData.length;i++)",
													"    {",
													"        console.log(\"--------update permission -- for loop\");",
													"        if(jsonData[i].roleName.includes(\"Supplier\"))",
													"        {",
													"            var roleIdNew = jsonData[i].roleId;",
													"            var roleNameNew = jsonData[i].roleName;",
													"            var participantIdNew = jsonData[i].participantId;",
													"",
													"            console.log(\"roleId--->\" + roleIdNew);",
													"            console.log(\"roleName--->\" + roleNameNew);",
													"            console.log(\"participantId--->\" + participantIdNew);",
													"        ",
													"            pm.variables.set(\"roldeId\", roleIdNew);",
													"            pm.variables.set(\"roleName\", roleNameNew);",
													"            pm.variables.set(\"participantId\", participantIdNew);",
													"            pm.variables.set(\"isActive\", true);",
													"",
													"            break;",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t{\n\t\t\"participantId\":{{participantId}},\n\t\t\"isActive\": true,\n\t\t\"companyId\":{{companyL}},\n\t\t\"productCode\":\"INBLOCK\",\n\t\t\"roleId\":{{roldeId}},\n\t\t\"roleName\":\"{{roleName}}\"\n\t}\n]"
										},
										"url": {
											"raw": "{{baseURI}}/api/companies/{{companyL}}/roles",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{companyL}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate_Companies - Supplier",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"To check company is active \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isActive).to.eql(true);",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var companyL = pm.variables.get(\"InblockSupplierCompany\");",
													"pm.variables.set('companyL', companyL);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \r\n\t\"id\": {{companyL}}\r\n}"
										},
										"url": {
											"raw": "{{baseURI}}/api/companies/{{companyL}}/update-status?command=activate",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{companyL}}",
												"update-status"
											],
											"query": [
												{
													"key": "command",
													"value": "activate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Company by ID (roles)- Supplier",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expCompany = pm.variables.get(\"InblockSupplierCompany\");\r",
													"console.log(expCompany);\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
													"    pm.expect(responseJSONdata.id).to.eql(parseInt(expCompany));\r",
													"}); "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"InblockSupplierCompany\",pm.variables.get(\"InblockSupplierCompany\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{InblockSupplierCompany}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{InblockSupplierCompany}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_INBLOCK_USD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"productCode1 = \"INBLOCK\";\r",
													"pm.variables.set(\"productCode1\", \"INBLOCK\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\");\r",
													"pm.variables.set(\"governingLawId\", 314); //United States of America\r",
													"\r",
													"pm.variables.set(\"relationshipTypeId\", 3); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"var moment = require('moment');\r",
													"var timeT = moment.utc().format();\r",
													"console.log(\"Current time: \" + timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.environment.get(\"baseURI\") + \"/api/participants?count=10000&skip=0&productCode=\" + productCode1 + \"&role=Supplier&recordTypeId=1\";\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    var jsonData = res.json();\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].name === pm.variables.get(\"InblockSupplierCompanyName\") && jsonData[i].participantRole === \"Supplier\") {\r",
													"            pm.variables.set(\"SupplierId\", jsonData[i].id);\r",
													"            pm.variables.set(\"SupplierName\", jsonData[i].name);\r",
													"            console.log(\"SupplierId\", jsonData[i].id);\r",
													"            console.log(\"SupplierName\", jsonData[i].name);\r",
													"            pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    //This code is to 'Add Participant = Distributor'. This part is optional.\r",
													"\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].name.includes(\"Reg_\")) { //apiInblockSupplier_3\r",
													"            pm.variables.set(\"DistributorId\", jsonData[i].id);\r",
													"            pm.variables.set(\"DistributorName\", jsonData[i].name);\r",
													"            console.log(\"DistributorId\", jsonData[i].id);\r",
													"            console.log(\"DistributorName\", jsonData[i].name);\r",
													"            pm.variables.set(\"countryOfJurisdiction_Distributor\", jsonData[i].countryOfFormation);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    //This code is to 'Add Participant = Supplier Parent'. This part is optional.\r",
													"\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].name.includes(\"Parent\")) { //apiInblockSupplier_2\r",
													"            pm.variables.set(\"SupplierParentId\", jsonData[i].id);\r",
													"            pm.variables.set(\"SupplierParentName\", jsonData[i].name);\r",
													"            console.log(\"SupplierParentId\", jsonData[i].id);\r",
													"            console.log(\"SupplierParentName\", jsonData[i].name);\r",
													"            pm.variables.set(\"countryOfJurisdiction_SupplierParent\", jsonData[i].countryOfFormation);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"var url = pm.environment.get(\"baseURI\") + \"/api/participants?count=10000&skip=0&productCode=\" + productCode1 + \"&role=Customer&recordTypeId=1\";\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    var jsonData = res.json();\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].name === pm.variables.get(\"InblockCustomerCompanyName\") && jsonData[i].participantRole === \"Customer\") {\r",
													"            pm.variables.set(\"CustomerId\", jsonData[i].id);\r",
													"            pm.variables.set(\"CustomerName\", jsonData[i].name);\r",
													"            console.log(\"CustomerId\", jsonData[i].id);\r",
													"            console.log(\"CustomerName\", jsonData[i].name);\r",
													"            pm.variables.set(\"countryOfJurisdiction_Customer\", jsonData[i].countryOfFormation);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    //This code is to 'Add Participant = Customer Parent'. This part is optional.\r",
													"\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].name.includes(\"RegInblockCustomer\")) { //apiInblockCustomer_B\r",
													"            pm.variables.set(\"CustomerParentId\", jsonData[i].id);\r",
													"            pm.variables.set(\"CustomerParentName\", jsonData[i].name);\r",
													"            console.log(\"CustomerParentId\", jsonData[i].id);\r",
													"            console.log(\"CustomerParentName\", jsonData[i].name);\r",
													"            pm.variables.set(\"countryOfJurisdiction_CustomerParent\", jsonData[i].countryOfFormation);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"pm.environment.set(\"relationshipIdINBLOCK\",relationshipId);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Customer\",\r\n            \"participantId\": {{CustomerId}},\r\n            \"countryOfFormation\": \"{{countryOfJurisdiction_Customer}}\",\r\n            \"externalId\": \"111\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\": {{SupplierId}},\r\n            \"countryOfFormation\": \"{{countryOfJurisdiction_Supplier}}\",\r\n            \"externalId\": \"222\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Distributor\",\r\n            \"participantId\": {{DistributorId}},\r\n            \"externalId\": \"555\",\r\n            \"countryOfFormation\": \"{{countryOfJurisdiction_Distributor}}\",\r\n            \"companyName\": \"{{DistributorName}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Customer Parent\",\r\n            \"participantId\": {{CustomerParentId}},\r\n            \"externalId\": \"666\",\r\n            \"countryOfFormation\": \"{{countryOfJurisdiction_CustomerParent}}\",\r\n            \"companyName\": \"{{CustomerParentName}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier Parent\",\r\n            \"participantId\": {{SupplierParentId}},\r\n            \"externalId\": \"777\",\r\n            \"countryOfFormation\": \"{{countryOfJurisdiction_SupplierParent}}\",\r\n            \"companyName\": \"{{SupplierParentName}}\"\r\n        }\r\n    ],\r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}},\r\n        \"name\": \"InBlock\",\r\n        \"productCode\": \"INBLOCK\"\r\n    },   \r\n    \"productCode\": \"{{productCode1}}\",\r\n    \"calendarIds\": [    ],\r\n    \"geographicRegion\": \"NY\",\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"paymentTerms\": \"90\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": {{governingLawId}},\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"startDate\": \"{{currentTime}}\"\r\n\r\n    // \"creditLimit\": 1,\r\n    // \"customerAutoAcceptThreshold\": 1,\r\n    // \"earlyPayDiscountPercentage\": 1,\r\n    // \"billToCompanyName\": \"{{CustomerName}}\",\r\n    //\"incoTermsTypeId\": 1,\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"relationships"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Inblock Relationship by Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Validating inblockrelationships by id details \", function () {\r",
													"    for(var i=0; i<responseJSONdata.length; i++)\r",
													"    {\r",
													"        pm.expect(responseJSONdata[i]).to.have.any.keys('status', 'supplierName', 'supplierCountryOfJurisdiction', 'customerName', 'customerCountryOfJurisdiction', 'distributorName', 'distributorCountryOfJurisdiction', 'currencyCode', 'governingLaw', 'recordType');\r",
													"\r",
													"        pm.expect(responseJSONdata[i].status).to.eql(\"Active\");\r",
													"\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"relationshipIdINBLOCK\",pm.variables.get(\"relationshipIdINBLOCK\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/relationships/{{relationshipIdINBLOCK}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"relationships",
												"{{relationshipIdINBLOCK}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Realtionships_INBLOCK_USD_WithDifferentCustomerID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"productCode1 = \"INBLOCK\";\r",
													"pm.variables.set(\"productCode1\", \"INBLOCK\");\r",
													"pm.variables.set(\"currencyCode\", \"USD\");\r",
													"pm.variables.set(\"regionCode\", \"NY\"); \r",
													"pm.variables.set(\"governingLawId\", 314); //United States of America\r",
													"\r",
													"pm.variables.set(\"relationshipTypeId\",3); //SCF=1, AR=2, INBLOCK=3\r",
													"\r",
													"var moment = require('moment'); \r",
													"var timeT = moment.utc().format();  \r",
													"console.log(\"Current time: \"+timeT)\r",
													"pm.variables.set(\"currentTime\", timeT);\r",
													"\r",
													"var url = pm.environment.get(\"baseURI\") + \"/api/participants?count=10000&skip=0&productCode=\" + productCode1 + \"&role=Supplier&recordTypeId=1\";\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    var jsonData = res.json();\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].name ===  pm.variables.get(\"InblockSupplierCompanyName\") && jsonData[i].participantRole === \"Supplier\") {\r",
													"            pm.variables.set(\"SupplierId\", jsonData[i].id);\r",
													"            pm.variables.set(\"SupplierName\", jsonData[i].name);\r",
													"            console.log(\"SupplierId\", jsonData[i].id);\r",
													"            console.log(\"SupplierName\", jsonData[i].name);\r",
													"            pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    //This code is to 'Add Participant = Distributor'. This part is optional.\r",
													"\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].name.includes(\"Reg_\")) { //apiInblockSupplier_3\r",
													"            pm.variables.set(\"DistributorId\", jsonData[i].id);\r",
													"            pm.variables.set(\"DistributorName\", jsonData[i].name);\r",
													"            console.log(\"DistributorId\", jsonData[i].id);\r",
													"            console.log(\"DistributorName\", jsonData[i].name);\r",
													"            pm.variables.set(\"countryOfJurisdiction_Distributor\", jsonData[i].countryOfFormation);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"\r",
													"     //This code is to 'Add Participant = Supplier Parent'. This part is optional.\r",
													"\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].name.includes(\"Parent\")) { //apiInblockSupplier_2\r",
													"            pm.variables.set(\"SupplierParentId\", jsonData[i].id);\r",
													"            pm.variables.set(\"SupplierParentName\", jsonData[i].name);\r",
													"            console.log(\"SupplierParentId\", jsonData[i].id);\r",
													"            console.log(\"SupplierParentName\", jsonData[i].name);\r",
													"            pm.variables.set(\"countryOfJurisdiction_SupplierParent\", jsonData[i].countryOfFormation);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"var url = pm.environment.get(\"baseURI\") + \"/api/participants?count=10000&skip=0&productCode=\" + productCode1 + \"&role=Customer&recordTypeId=1\";\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"    var jsonData = res.json();\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].name ===  pm.variables.get(\"InblockCustomerCompanyName\") && jsonData[i].participantRole === \"Customer\") {\r",
													"            pm.variables.set(\"CustomerId\", jsonData[i].id);\r",
													"            pm.variables.set(\"CustomerName\", jsonData[i].name);\r",
													"            console.log(\"CustomerId\", jsonData[i].id);\r",
													"            console.log(\"CustomerName\", jsonData[i].name);\r",
													"            pm.variables.set(\"countryOfJurisdiction_Customer\", jsonData[i].countryOfFormation);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    //This code is to 'Add Participant = Customer Parent'. This part is optional.\r",
													"\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"        if (jsonData[i].name.includes(\"RegInblockCustomer\")) { // apiInblockCustomer_B\r",
													"            pm.variables.set(\"CustomerParentId\", jsonData[i].id);\r",
													"            pm.variables.set(\"CustomerParentName\", jsonData[i].name);\r",
													"            console.log(\"CustomerParentId\", jsonData[i].id);\r",
													"            console.log(\"CustomerParentName\", jsonData[i].name);\r",
													"            pm.variables.set(\"countryOfJurisdiction_CustomerParent\", jsonData[i].countryOfFormation);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var relationshipId = jsonData.id;\r",
													"pm.variables.set(\"relationshipIdINBLOCK\",relationshipId);\r",
													"\r",
													"var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
													"pm.sendRequest({\r",
													"url: url1,\r",
													"method: 'POST',\r",
													"header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
													"},\r",
													"body: {\r",
													"    mode: 'raw',\r",
													"    raw: {\r",
													"                                                \r",
													"        }\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) { console.log(url + err); }\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Customer\",\r\n            \"participantId\": {{CustomerId}},\r\n            \"countryOfFormation\": \"{{countryOfJurisdiction_Customer}}\",\r\n            \"externalId\": \"C101\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\": {{SupplierId}},\r\n            \"countryOfFormation\": \"{{countryOfJurisdiction_Supplier}}\",\r\n            \"externalId\": \"222\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Distributor\",\r\n            \"participantId\": {{DistributorId}},\r\n            \"externalId\": \"555\",\r\n            \"countryOfFormation\": \"{{countryOfJurisdiction_Distributor}}\",\r\n            \"companyName\": \"{{DistributorName}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Customer Parent\",\r\n            \"participantId\": {{CustomerParentId}},\r\n            \"externalId\": \"666\",\r\n            \"countryOfFormation\": \"{{countryOfJurisdiction_CustomerParent}}\",\r\n            \"companyName\": \"{{CustomerParentName}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier Parent\",\r\n            \"participantId\": {{SupplierParentId}},\r\n            \"externalId\": \"777\",\r\n            \"countryOfFormation\": \"{{countryOfJurisdiction_SupplierParent}}\",\r\n            \"companyName\": \"{{SupplierParentName}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [    ],\r\n    \"geographicRegion\": \"NY\",\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCode1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": {{governingLawId}},\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"paymentTerms\": \"90\",\r\n    \"startDate\": \"{{currentTime}}\"\r\n    // \"earlyPayThreshold\": 543,\r\n /*   \"regionCode\": \"{{regionCode}}\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",*/\r\n   // \"invoiceDueDateAdjustmentId\": 1,\r\n    //\"additionalDetails\": \"any\",\r\n   // \"incoTerms\": \"1\",\r\n    // \"creditLimit\": 1,\r\n    // \"customerAutoAcceptThreshold\": 1,\r\n    // \"earlyPayDiscountPercentage\": 1,\r\n    // \"billToCompanyName\": \"{{CustomerName}}\",\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/relationships",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"relationships"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Update-Relationship-User-Permission",
							"item": [
								{
									"name": "Get Inblock Relationship by Id User Permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Validating inblockrelationships by id details \", function () {\r",
													"    for(var i=0; i<responseJSONdata.length; i++)\r",
													"    {\r",
													"        pm.expect(responseJSONdata[i]).to.have.any.keys('status', 'supplierName', 'supplierCountryOfJurisdiction', 'customerName', 'customerCountryOfJurisdiction', 'distributorName', 'distributorCountryOfJurisdiction', 'currencyCode', 'governingLaw', 'recordType');\r",
													"\r",
													"        pm.expect(responseJSONdata[i].status).to.eql(\"Active\");\r",
													"\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"relationshipIdINBLOCK\",pm.variables.get(\"relationshipIdINBLOCK\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/relationships/{{relationshipIdINBLOCK}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"relationships",
												"{{relationshipIdINBLOCK}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Company by ID (roles)- User Permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expCompany = pm.variables.get(\"InblockSupplierCompany\");\r",
													"console.log(expCompany);\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
													"    pm.expect(responseJSONdata.id).to.eql(parseInt(expCompany));\r",
													"}); "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"InblockSupplierCompany\",pm.variables.get(\"InblockSupplierCompany\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-platform-code",
												"value": "{{platformCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/companies/{{InblockSupplierCompany}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"companies",
												"{{InblockSupplierCompany}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create_User Local User Permission",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var user = getRandomAlphaNumeric(4,\"ABCDE12345FGHIJKLMNOPQ90876RSTUVWXYZ\");",
													"pm.variables.set(\"U_ID\", user);",
													"",
													"function getRandomAlphaNumeric(len, chars) {",
													"    var result = '';",
													"    for (var i = len; i > 0; i--)",
													"    { ",
													"     result += chars[Math.floor(Math.random() * chars.length)];",
													"    }",
													"     return result;",
													"}",
													"",
													"var companyId = pm.variables.get(\"InblockSupplierCompany\"); ",
													"pm.variables.set(\"companyId\", companyId);",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\"+ companyId );",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
													"      }",
													"}, ",
													"function (err, res) {",
													"    if (err) {console.log(\"error :\" + err); }",
													"    var jsonData = res.json();",
													"    console.log(jsonData);",
													"",
													"    pm.variables.set(\"cid\", jsonData.id);",
													"    pm.variables.set(\"salesforceId\", jsonData.salesforceId);",
													"    pm.variables.set(\"name\", jsonData.name);",
													"    pm.variables.set(\"country\", jsonData.country);",
													"    pm.variables.set(\"stateOfIncorporation\", jsonData.stateOfIncorporation);",
													"    pm.variables.set(\"countryOfJurisdiction\", jsonData.countryOfJurisdiction);",
													"    pm.variables.set(\"isActive\", jsonData.isActive);",
													"    pm.variables.set(\"updatedOn\", jsonData.updatedOn);",
													"    pm.variables.set(\"users\", jsonData.users);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var Id = pm.variables.get(\"U_ID\");",
													"",
													"pm.test(\"To check user is created: \" + jsonData.id, function () {",
													"    pm.expect(jsonData.userName).to.eql('lqxnga+EntlRegInblockSupplier_' + Id+'@gmail.com');",
													"});",
													"",
													"console.log(\"NEW USER--->\" + jsonData.id);",
													"pm.variables.set(\"UserID_Local_INB\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isPortalUser\": false,\r\n    \"isPlatformUser\": false,\r\n    \"firstName\": \"apiFN\",\r\n    \"middleInitial\": \"U\",\r\n    \"lastName\": \"apiLN {{U_ID}}\",\r\n    \"title\": \"QA\",\r\n    \"workPhone\": \"7654323467\",\r\n    \"employeeId\": \"111\",\r\n    \"email\": \"lqxnga+EntlRegInblockSupplier_{{U_ID}}@gmail.com\",\r\n    \"userName\": \"lqxnga+EntlRegInblockSupplier_{{U_ID}}@gmail.com\",\r\n    \"companyId\": {{companyId}}\r\n}"
										},
										"url": {
											"raw": "{{baseURI}}/api/users",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate_User Local User Permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"To check user is  Active \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isActive).to.eql(true);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// var uId = pm.environment.get(\"UserID_new\");\r",
													"pm.variables.set(\"userId\", pm.variables.get(\"UserID_Local_INB\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"id\": \"{{userId}}\"\r\n}"
										},
										"url": {
											"raw": "{{baseURI}}/api/users/{{userId}}?command=activate",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"users",
												"{{userId}}"
											],
											"query": [
												{
													"key": "command",
													"value": "activate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Relationship User Permission",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//This code is used to get current company and code.",
													"var companyL = pm.variables.get(\"InblockSupplierCompany\"); ",
													"var currentCode = \"INBLOCK\";  ",
													"",
													"console.log(\"***********\" + currentCode);",
													"",
													"//This array conatains the read, write permissions.",
													"var permissionArray = [\"Order Management Supplier Write\", \"Invoice Management  Supplier Write\"];",
													"",
													"//This request is used for getting company roles for the current products from which we get role id and role name.",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Companies/\" + companyL + \"/roles?productCode=\" + currentCode + \"&isActive=true\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")",
													"    }",
													"},",
													"    function (err, res) {",
													"        if (err) { console.log(\"error :\" + err); };",
													"        var jsonData = res.json();",
													"        for(i=0;i<jsonData.length;i++)",
													"        {",
													"            if(jsonData[i].isActive == true)",
													"            {          ",
													"                if(jsonData[i].roleName.includes(\"Supplier\"))",
													"                {",
													"                    var roleIdNew = jsonData[i].roleId;",
													"                    var roleNameNew = jsonData[i].roleName;",
													"                }",
													"            }",
													"        }",
													"",
													"        console.log(\"roleId--->\" + roleIdNew);",
													"        console.log(\"roleName--->\" + roleNameNew);",
													"",
													"        pm.variables.set(\"roldeId\", roleIdNew);",
													"        pm.variables.set(\"roleName\", roleNameNew);",
													"",
													"        roleNameNew = String(roleNameNew);",
													"        var currentRole = roleNameNew.split('- ');",
													"        pm.variables.set('currentRole', currentRole[1]);",
													"        console.log(\"Current Company Role: \" + currentRole[1]);",
													"",
													"        //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
													"        // var permissioncount = pm.variables.get(\"permissioncounter\");",
													"        var permissioncount1 = pm.collectionVariables.get('permissioncount');",
													"        pm.collectionVariables.set('pa_count', permissionArray.length - 1);",
													"",
													"        pm.variables.set('permission', permissionArray[permissioncount1]);",
													"        console.log(\"permissioncounter:\" + permissioncount1);",
													"",
													"        //This 'combined' string is generated to so that we can get user permissions details",
													"        if (currentCode == 'INBLOCK' ) {",
													"         ",
													"            combinedStr = permissionArray[permissioncount1];",
													"            pm.variables.set(\"combinedStr\",combinedStr);",
													"            console.log(\"combinedStr------>\" + combinedStr);",
													"        }",
													"        var uId = pm.variables.get(\"UserID_Local_INB\");",
													"        var url = pm.variables.get(\"baseURI\");",
													"        url = url.concat(\"/api/userpermissions/\" + uId + \"/roles/\" + pm.variables.get(\"roldeId\") + \"/relationships/\"+pm.environment.get(\"relationshipIdINBLOCK\") +\"?platformCode=LQX\");",
													"        pm.sendRequest({",
													"            url: url,",
													"            method: 'GET',",
													"            header: {",
													"            'Accept': 'application/json',",
													"            'Content-Type': 'application/json',",
													"            'x-platform-code': pm.environment.get(\"platformCode\"),              ",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")",
													"            }",
													"        },",
													"            function (err, res) {",
													"                if (err) { console.log(\"error :\" + err); }",
													"                var jsonData = res.json();",
													"                // var permissionName;",
													"                for (i = 0; i < jsonData.length; i++) {",
													"                    if (jsonData[i].permissionBundleName.includes(combinedStr)) {",
													"",
													"                        pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
													"                        pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
													"                        pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
													"                        pm.variables.set(\"isEntitled\", true);",
													"                        break;",
													"                    ",
													"                    }",
													"",
													"                }",
													"                pm.variables.set(\"userId\",pm.variables.get(\"UserID_Local_INB\"));",
													"            });",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"Status code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
													" });\r",
													"\r",
													"//This code will execute till we complete the permission array counter\r",
													"    var permissioncounter = pm.collectionVariables.get('permissioncount');\r",
													"    let permissionLimit = pm.collectionVariables.get(\"pa_count\");\r",
													"    let found = false;\r",
													"    console.log(\"limit:\"+permissionLimit);\r",
													"    console.log(\"permissioncounter:\"+permissioncounter);\r",
													"    console.log(\"found:\"+found);\r",
													"    if(permissioncounter < permissionLimit && !found)\r",
													"    {\r",
													"        console.log(\"setting next request\");\r",
													"        postman.setNextRequest(\"Update Relationship User Permission\");\r",
													"        pm.collectionVariables.unset(\"permissioncount\");\r",
													"        // pm.variables.set(\"permissioncounter\", permissioncounter+1);\r",
													"        pm.collectionVariables.set(\"permissioncount\", parseInt(permissioncounter)+1) ;\r",
													"        console.log(\"--------->\"+permissioncounter);\r",
													"    }else if(permissioncounter === permissionLimit)\r",
													"    {\r",
													"        console.log(\"Condition match! Execution loop completed\");\r",
													"        pm.collectionVariables.set(\"permissioncount\", 0) ;\r",
													"        pm.collectionVariables.set(\"pa_count\",0);\r",
													"        console.log(\"Counter reset to 0\");\r",
													"    }\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"permissions\":\n        [\n            {\n                \"userParticipantId\": {{userParticipantId}},\n                \"permissionBundleId\": {{permissionBundleId}},\n                \"permissionBundleName\": \"{{permissionBundleName}}\",\n                \"isEntitled\": {{isEntitled}}\n            }\n        ],    \n    \"platformCode\":\"{{platformCode}}\",\n    \"relationshipId\":{{relationshipIdINBLOCK}},\n    \"roleId\":{{roldeId}},\n    \"userId\":{{userId}}\n}"
										},
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}/relationships/{{relationshipIdINBLOCK}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userId}}",
												"roles",
												"{{roldeId}}",
												"relationships",
												"{{relationshipIdINBLOCK}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserPermission for Relationship",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/userpermissions/{{userId}}?entityType=Relationship&productCode=INBLOCK",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"userpermissions",
												"{{userId}}"
											],
											"query": [
												{
													"key": "entityType",
													"value": "Relationship"
												},
												{
													"key": "productCode",
													"value": "INBLOCK"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relationship User Permission",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"uId\", pm.variables.get(\"UserID_Local_INB\") );   "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expUserId = pm.variables.get(\"UserID_Local_INB\");",
													"",
													"pm.test(\"Status code is 200\", function()",
													"{",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"To check user Successfully deleted: \"+ expUserId, function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.result).to.eql(\"User \"+expUserId+ \" deleted\");",
													"    // pm.environment.unset(\"UserID_Local_INB\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-platform-code",
												"type": "text",
												"value": "{{platformCode}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURI}}/api/Users/{{uId}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Users",
												"{{uId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "BulkImport",
			"item": [
				{
					"name": "Bulk-Import-Companies-OEN-1579-ENT-1898",
					"item": [
						{
							"name": "Post Bulk Import Companies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData =  pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200 for validate-csv for company\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"for (i = 0; i < jsonData.length; i++) \r",
											"{\r",
											"    pm.test(\"Validating validate-csv for company format from response body \", function () {\r",
											"        pm.expect(jsonData[i]).to.have.any.keys('errorMessages', 'operationType', 'name', 'companyStatus', 'institutionType', 'sector', 'countryOfFormation','stateRegionOfFormation','city','country','stateRegion','addressLine1','addressLine2','postalCode');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validating validate-csv for status company from response body \", function () {\r",
											"        pm.expect(jsonData[i].operationType).to.be.oneOf([\"New\",\"Existing\"]);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Checking errorMessages while validating file\", function () {\r",
											"        pm.expect(jsonData[i].errorMessages).to.be.eql([]);\r",
											"    });\r",
											"}\r",
											"\r",
											" var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/Companies/import?platformCode=\"+pm.environment.get(\"platformCode\"));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: jsonData\r",
											"            \r",
											"        }\r",
											"\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(err); }\r",
											"    var jsonData = res.json();\r",
											"\r",
											"    pm.test(\"Status code is 200 for importing new companies\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    for(var i =0; i<jsonData.length; i++)\r",
											"    {\r",
											"        pm.test(\"Validate new imported companies detail\", function () {\r",
											"\r",
											"            pm.expect(jsonData[i].importStatus).to.be.oneOf([\"Imported\",\"Updated\"]);\r",
											"        });  \r",
											"        pm.test(\"Checking errorMessages while importing file\", function () {\r",
											"            pm.expect(jsonData[i].errorMessages).to.be.eql([]);\r",
											"        });\r",
											"        pm.test(\"Validating import-csv for company format from response body \", function () {\r",
											"            pm.expect(jsonData[i]).to.have.any.keys('errorMessages', 'operationType', 'name', 'companyStatus', 'institutionType', 'sector', 'countryOfFormation','stateRegionOfFormation','city','country','stateRegion','addressLine1','addressLine2','postalCode');\r",
											"        });\r",
											"        pm.test(\"To check countryOfFormation, country, stateRegion, addressLine1 and addressLine2 are NOT NULL\", function () {\r",
											"            for(i=0; i<jsonData.length; i++)\r",
											"            {    \r",
											"                pm.expect(jsonData[i].countryOfFormation).not.eql(null);\r",
											"                pm.expect(jsonData[i].country).not.eql(null);\r",
											"\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "ion/json;text/csv;text/json;text",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ContentType",
											"value": "application/octet-stream",
											"type": "text",
											"disabled": true
										},
										{
											"key": "Name",
											"value": "companies",
											"type": "text",
											"disabled": true
										},
										{
											"key": "companies",
											"type": "file",
											"src": "/C:/Liquidx/LiquidX/Entitlements/Manual/ALL Sprint/2022/22Q2  - Sprint 1/Companies-Test-001.csv"
										},
										{
											"key": "ContentDisposition",
											"value": "form-data",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/validate-csv",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"validate-csv"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Bulk-Import-Participant-OEN-1649",
					"item": [
						{
							"name": "Post Bulk Import Participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData =  pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200 for validate-csv for company\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"for (i = 0; i < jsonData.length; i++) \r",
											"{\r",
											"    pm.test(\"Validating validate-csv for participants format from response body \", function () {\r",
											"        pm.expect(jsonData[i]).to.have.all.keys('companyId', 'roleId', 'errorMessages', 'operationType', 'participantStatus', 'companyName', 'productCode','roleName');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validating validate-csv for status participants from response body \", function () {\r",
											"        pm.expect(jsonData[i].operationType).to.be.eql(\"New\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validating errorMessages \", function () {\r",
											"        pm.expect(jsonData[i].errorMessages).to.be.eql([]);\r",
											"    });\r",
											"}\r",
											"\r",
											" var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/participants/import?platformCode=\"+pm.environment.get(\"platformCode\"));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: jsonData\r",
											"            \r",
											"        }\r",
											"\r",
											"    // }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(err); }\r",
											"    var jsonData = res.json();\r",
											"     \r",
											"    pm.test(\"Validating import status for participants from response body \", function () {\r",
											"        // pm.expect(jsonData[i].importStatus).to.be.eql(\"Imported\");\r",
											"        pm.expect(jsonData[i].operationType).to.be.eql(\"New\");\r",
											"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "ion/json;text/csv;text/json;text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ContentType",
											"value": "application/octet-stream",
											"type": "text",
											"disabled": true
										},
										{
											"key": "Name",
											"value": "participants",
											"type": "text",
											"disabled": true
										},
										{
											"key": "participants",
											"type": "file",
											"src": "/C:/Liquidx/LiquidX/Entitlements/API Automation/Bulk Import/Participants/Participants-Template-AR Funder-16062021.csv"
										},
										{
											"key": "ContentDisposition",
											"value": "form-data",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/api/participants/validate-csv?platformCode={{platformCode}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"participants",
										"validate-csv"
									],
									"query": [
										{
											"key": "platformCode",
											"value": "{{platformCode}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Bulk-Import-Users-OEN-1300",
					"item": [
						{
							"name": "Post Bulk Import Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 for validate-csv for users\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData =  pm.response.json();\r",
											"for (i = 0; i < jsonData.length; i++) \r",
											"{\r",
											"\r",
											"    if(jsonData[i].operationType == \"New\")\r",
											"    {\r",
											"        pm.test(\"Validating validate-csv for NEW users\", function () {\r",
											"            pm.expect(jsonData[i].operationType).to.be.eql(\"New\");\r",
											"        });\r",
											"    }\r",
											"    else if(jsonData[i].operationType == \"Existing\")\r",
											"    {\r",
											"          pm.test(\"Validating validate-csv for Existing users\", function () {\r",
											"            pm.expect(jsonData[i].operationType).to.be.eql(\"Existing\");\r",
											"        });\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"          pm.test(\"Validating validate-csv for Invalid users\", function () {\r",
											"            pm.expect(jsonData[i].operationType).to.be.eql(\"Invalid\");\r",
											"        });\r",
											"    }\r",
											"\r",
											"    if(jsonData[i].errorMessages.length ==0)\r",
											"    {\r",
											"        pm.test(\"Validating PASS without any errorMessages \", function () {\r",
											"            pm.expect(jsonData[i].errorMessages).to.be.eql([]);\r",
											"        });\r",
											"        pm.test(\"Validating validate-csv for users format from response body \", function () {\r",
											"            pm.expect(jsonData[i]).to.have.all.keys('companyId', 'companyName', 'errorMessages', 'firstName', 'isActive', 'jobTitle', 'lastName','middleInitial','operationType','username');\r",
											"        });\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        pm.test(\"Validation FAIL with errorMessage: \"+ jsonData[i].errorMessages, function () {\r",
											"            pm.expect(jsonData[i].errorMessages).to.be.not.eql([]);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/users/import?platformCode=\"+pm.environment.get(\"platformCode\"));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: jsonData\r",
											"            \r",
											"        }\r",
											"\r",
											"    // }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(err); }\r",
											"    var jsonData = res.json();\r",
											"    for (i = 0; i < jsonData.length; i++) \r",
											"    { \r",
											"\r",
											"        pm.test(\"Status code is 200\", function () {\r",
											"            pm.response.to.have.status(200);\r",
											"        });\r",
											"\r",
											"        if(jsonData[i].errorMessages.length ==0)\r",
											"        {\r",
											"            pm.test(\"Validating import status for users: \"+jsonData[i].importStatus, function () {\r",
											"                pm.expect(jsonData[i].importStatus).to.be.oneOf([\"Imported\",\"New\",\"Updated\"]);\r",
											"                // pm.expect(jsonData[i].operationType).to.be.eql(\"New\"); \r",
											"            });\r",
											"            pm.test(\"Validating Default the state of bulk imported users as Inactive \", function () {\r",
											"                pm.expect(jsonData[i].isActive).to.be.eql(false); \r",
											"            });\r",
											"            pm.test(\"Validating import users format from response body \", function () {\r",
											"                pm.expect(jsonData[i]).to.have.all.keys('id','importStatus','companyId','isActive', 'errorMessages','operationType','companyName',  'firstName', 'middleInitial',  'lastName','username','jobTitle');   \r",
											"            });\r",
											"        }\r",
											"        else\r",
											"        {\r",
											"            pm.test(\"Import FAIL with errorMessage: \"+ jsonData[i].errorMessages, function () {\r",
											"                pm.expect(jsonData[i].errorMessages).to.be.not.eql([]); //to.be.not.eql([]);\r",
											"            });\r",
											"        }\r",
											"        \r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "ion/json;text/csv;text/json;text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ContentType",
											"value": "application/octet-stream",
											"type": "text",
											"disabled": true
										},
										{
											"key": "Name",
											"value": "participants",
											"type": "text",
											"disabled": true
										},
										{
											"key": "users",
											"type": "file",
											"src": "/C:/Liquidx/LiquidX/Entitlements/Manual/Bulk Import/UpdatedFiles_Regression/2023/03032023/Users-Template-Validations.csv"
										},
										{
											"key": "ContentDisposition",
											"value": "form-data",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/api/users/validate-csv?platformCode={{platformCode}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"validate-csv"
									],
									"query": [
										{
											"key": "platformCode",
											"value": "{{platformCode}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Bulk-Import-InblockRelationship-OEN-1297",
					"item": [
						{
							"name": "Post Bulk Import InblockRelationship",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData =  pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200 for validate-csv for InblockRelationship\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"for (i = 0; i < jsonData.length; i++) \r",
											"{\r",
											"    pm.test(\"Validating validate-csv InblockRelationship format from response body \", function () {\r",
											"        pm.expect(jsonData[i]).to.have.all.keys('annualSales', 'currencyCode', 'customerId', 'customerName', 'customerParentName', 'descOfGoodsOrServices', 'disclosure','disclosureTypeId','distributorId','distributorName','errorMessages','governingLaw','governingLawId','incoTerms','incoTermsTypeId','operationType','paymentTerms','productCode','regionCode','relationshipCreationDate','relationshipId','relationshipStatus','relationshipStatusId','retainedDays','supplierId','supplierName','supplierParentName');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validating validate-csv for status InblockRelationship\", function () {\r",
											"        pm.expect(jsonData[i].operationType).to.be.eql(\"New\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validating errorMessages \", function () {\r",
											"        pm.expect(jsonData[i].errorMessages).to.be.eql([]);\r",
											"    });\r",
											"}\r",
											"\r",
											" var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/relationships/import?platformCode=\"+pm.environment.get(\"platformCode\"));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: jsonData\r",
											"            \r",
											"        }\r",
											"\r",
											"    // }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(err); }\r",
											"    var jsonData = res.json();\r",
											"    for (i = 0; i < jsonData.length; i++) \r",
											"    { \r",
											"        pm.test(\"Validating import status for InblockRelationship \", function () {\r",
											"            pm.expect(jsonData[i].importStatus).to.be.eql(\"Imported\");\r",
											"            pm.expect(jsonData[i].operationType).to.be.eql(\"New\"); \r",
											"        });\r",
											"\r",
											"        // pm.test(\"Validating import InblockRelationship format from response body \", function () {\r",
											"        //     pm.expect(jsonData[i]).to.have.all.keys('importStatus','companyId', 'companyName', 'errorMessages', 'firstName', 'isActive', 'jobTitle', 'lastName','middleInitial','operationType','userStatus','username');\r",
											"        // });\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "ion/json;text/csv;text/json;text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ContentType",
											"value": "application/octet-stream",
											"type": "text",
											"disabled": true
										},
										{
											"key": "Name",
											"value": "participants",
											"type": "text",
											"disabled": true
										},
										{
											"key": "inblockrelationships",
											"type": "file",
											"src": "/C:/Liquidx/LiquidX/Entitlements/API Automation/Bulk Import/InblockRelationships/Bulk import-InblockRelationships-250521.csv"
										},
										{
											"key": "ContentDisposition",
											"value": "form-data",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/api/relationships/validate-csv?platformCode={{platformCode}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"relationships",
										"validate-csv"
									],
									"query": [
										{
											"key": "platformCode",
											"value": "{{platformCode}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Bulk-Import-SCFRelationship-ENT-1548",
					"item": [
						{
							"name": "Post Bulk Import SCFRelationship",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData =  pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200 for validate-csv for SCFRelationship\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"for (i = 0; i < jsonData.length; i++) \r",
											"{\r",
											"    pm.test(\"Validating validate-csv SCFRelationship format from response body \", function () {\r",
											"        pm.expect(jsonData[i]).to.have.any.keys('relationshipId', 'relationshipStatusId', 'buyerId', 'supplierId', 'governingLawId', 'disclosureTypeId', 'errorMessages','operationType','invoiceDueDateAdjustmentId','productCode','relationshipStatus','relationshipCreationDate','buyerName','supplierName','descOfGoodsOrServices','paymentTerms','currencyCode','governingLaw','incoTerms','disclosure','regionCode','annualSales','invoiceDueDateAdjustment');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validating validate-csv for status SCFRelationship\", function () {\r",
											"        pm.expect(jsonData[i].operationType).to.be.oneOf([\"New\",\"Existing\",\"Invalid\"]);\r",
											"    });\r",
											"\r",
											"    if((jsonData[i].errorMessages).length == 0)\r",
											"    {\r",
											"        pm.test(\"No errorMessages - Validation Passed\", function () {\r",
											"            pm.expect(jsonData[i].errorMessages).to.be.eql([]);\r",
											"        });\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        pm.test(\"errorMessages - Validation failed: \"+jsonData[i].errorMessages[0], function () {\r",
											"            pm.expect(jsonData[i].errorMessages[0]).to.be.oneOf([\"\",\"Invalid Product Code\",\"Product Code is required\",\"Relationship Status is required\",\"Relationship Creation Date is required\",\"Invalid Relationship Creation Date\",\"Buyer Name is required\",\"Supplier Name is required\",\"Currency Code is required\",\"Governing Law is required\",\"Invalid Governing Law\",\"Desc Of Goods Or Services is required\",\"Invalid Inco Terms\",\"Desc Of Goods Or Services exceeds maximum length of 250\",\"Payment Terms is required\",\"Payment Terms exceeds maximum length of 255\",\"Disclosure is required\",\"Invalid Disclosure\",\"Region Code is required\",\"Invalid Region Code\",\"Annual Sales is required\",\"Annual Sales exceeds maximum length of 1000\",\"Invoice Due Date Adjustment is required\",\"Invalid Invoice Due Date Adjustment\"]);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											" var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/relationships/scf/import\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: jsonData\r",
											"            \r",
											"        }\r",
											"\r",
											"    // }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(err); }\r",
											"    var jsonData = res.json();\r",
											"  for (i = 0; i < jsonData.length; i++) \r",
											"    {          console.log(\"in for\")\r",
											"\r",
											"        if(jsonData[i].operationType == \"Invalid\")\r",
											"        { console.log(\"in if\")\r",
											"            pm.expect(jsonData[i].relationshipId).to.eql(0);\r",
											"\r",
											"        }\r",
											"        else\r",
											"        {\r",
											"            pm.test(\"Validating import status for INSRelationship - row: \"+i+ \" - Status: \"+jsonData[i].importStatus, function () {\r",
											"                pm.expect(jsonData[i].importStatus).to.be.oneOf([\"Imported\",\"Updated\"]);\r",
											"                pm.expect(jsonData[i].operationType).to.be.oneOf([\"New\",\"Existing\"]); \r",
											"            });\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "ion/json;text/csv;text/json;text",
										"disabled": true
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ContentType",
											"value": "application/octet-stream",
											"type": "text",
											"disabled": true
										},
										{
											"key": "Name",
											"value": "participants",
											"type": "text",
											"disabled": true
										},
										{
											"key": "scfRelationships",
											"type": "file",
											"src": "/C:/Liquidx/LiquidX/Entitlements/Manual/ALL Sprint/2022/22Q2 - Sprint 3/Scf-Relationships-validationAPI.csv"
										},
										{
											"key": "ContentDisposition",
											"value": "form-data",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/api/relationships/scf/validate-csv",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"relationships",
										"scf",
										"validate-csv"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Bulk-Import-INSRelationship-ENT-1993",
					"item": [
						{
							"name": "Post Bulk Import INSRelationship IP-Broker",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData =  pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 for validate-csv for INSRelationship\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"for (i = 0; i < jsonData.length; i++) \r",
											"{\r",
											"    pm.test(\"Validating validate-csv INSRelationship format from response body \", function () {\r",
											"        pm.expect(jsonData[i]).to.have.any.keys('relationshipId', 'relationshipStatusId', 'relationshipStatus', 'brokerId', 'brokerName', 'delegationType', 'delegationTypeId','errorMessages','insuredPartyId','insuredPartyName','operationType','productCode','relationshipCreationDate');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validating validate-csv for status INSRelationship\", function () {\r",
											"        pm.expect(jsonData[i].operationType).to.be.oneOf([\"New\",\"Existing\",\"Invalid\"]);\r",
											"    });\r",
											"\r",
											"    if((jsonData[i].errorMessages).length == 0)\r",
											"    {\r",
											"        pm.test(\"No errorMessages - Validation Passed\", function () {\r",
											"            pm.expect(jsonData[i].errorMessages).to.be.eql([]);\r",
											"        });\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        pm.test(\"errorMessages - Validation failed: \"+jsonData[i].errorMessages[0], function () {\r",
											"            pm.expect(jsonData[i].errorMessages[0]).to.be.oneOf([\"\",\"Product Code is required\",\"Invalid Product Code\",\"Relationship Status is required\",\"Invalid Relationship Creation Date\",\"Relationship Creation Date is required\",\"Insured Party Name is required\",\"Insured Party Participant does not exist\",\"Broker Name is required\",\"Broker Participant does not exist\",\"Delegation Type is required\"]);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											" var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/relationships/ins/ip-broker/import\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: jsonData\r",
											"            \r",
											"        }\r",
											"\r",
											"    // }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(err); }\r",
											"    var jsonData = res.json();\r",
											"    for (i = 0; i < jsonData.length; i++) \r",
											"    {          console.log(\"in for\")\r",
											"\r",
											"        if(jsonData[i].operationType == \"Invalid\")\r",
											"        { console.log(\"in if\")\r",
											"            pm.expect(jsonData[i].relationshipId).to.eql(0);\r",
											"\r",
											"        }\r",
											"        else\r",
											"        {\r",
											"            pm.test(\"Validating import status for INSRelationship:  - row: \"+i+ \" - Status: \"+jsonData[i].importStatus, function () {\r",
											"                pm.expect(jsonData[i].importStatus).to.be.oneOf([\"Imported\",\"Updated\"]);\r",
											"                pm.expect(jsonData[i].operationType).to.be.oneOf([\"New\",\"Existing\"]); \r",
											"            });\r",
											"        }\r",
											"\r",
											"        // pm.test(\"Validating import INSRelationship format from response body \", function () {\r",
											"        //     pm.expect(jsonData[i]).to.have.all.keys('relationshipId','relationshipStatusId', 'insuredPartyId', 'brokerId', 'delegationTypeId', 'errorMessages', 'operationType', 'importStatus','productCode','relationshipStatus','relationshipCreationDate','insuredPartyName','brokerName','delegationType');\r",
											"        // });\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "ion/json;text/csv;text/json;text",
										"disabled": true
									},
									{
										"key": "x-platform-code",
										"type": "text",
										"value": "{{platformCode}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ContentType",
											"value": "application/octet-stream",
											"type": "text",
											"disabled": true
										},
										{
											"key": "Name",
											"value": "participants",
											"type": "text",
											"disabled": true
										},
										{
											"key": "insRelationships",
											"type": "file",
											"src": "/C:/Liquidx/LiquidX/Entitlements/Manual/Bulk Import/INS Relationship/INS-IP-Broker-Relationships-ENT-1993 -Validations.csv"
										},
										{
											"key": "ContentDisposition",
											"value": "form-data",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/api/relationships/ins/validate-csv?relationshipTypeId=4",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"relationships",
										"ins",
										"validate-csv"
									],
									"query": [
										{
											"key": "relationshipTypeId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Bulk Import INSRelationship IP-PlatformBroker",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData =  pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 for validate-csv for INSRelationship\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"for (i = 0; i < jsonData.length; i++) \r",
											"{\r",
											"    pm.test(\"Validating validate-csv INSRelationship format from response body \", function () {\r",
											"        pm.expect(jsonData[i]).to.have.any.keys('relationshipId', 'relationshipStatusId', 'relationshipStatus', 'brokerId', 'brokerName', 'delegationType', 'delegationTypeId','errorMessages','insuredPartyId','insuredPartyName','operationType','productCode','relationshipCreationDate');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validating validate-csv for status INSRelationship\", function () {\r",
											"        pm.expect(jsonData[i].operationType).to.be.oneOf([\"New\",\"Existing\",\"Invalid\"]);\r",
											"    });\r",
											"\r",
											"    if((jsonData[i].errorMessages).length == 0)\r",
											"    {\r",
											"        pm.test(\"No errorMessages - Validation Passed\", function () {\r",
											"            pm.expect(jsonData[i].errorMessages).to.be.eql([]);\r",
											"        });\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        pm.test(\"errorMessages - Validation failed: \"+jsonData[i].errorMessages[0], function () {\r",
											"            pm.expect(jsonData[i].errorMessages[0]).to.be.oneOf([\"\",\"Product Code is required\",\"Invalid Product Code\",\"Relationship Status is required\",\"Invalid Relationship Creation Date\",\"Relationship Creation Date is required\",\"Insured Party Name is required\",\"Insured Party Participant does not exist\",\"Broker Name is required\",\"Broker Participant does not exist\",\"Delegation Type is required\"]);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											" var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/relationships/ins/ip-broker/import\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: jsonData\r",
											"            \r",
											"        }\r",
											"\r",
											"    // }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(err); }\r",
											"    var jsonData = res.json();\r",
											"    for (i = 0; i < jsonData.length; i++) \r",
											"    {          console.log(\"in for\")\r",
											"\r",
											"        if(jsonData[i].operationType == \"Invalid\")\r",
											"        { console.log(\"in if\")\r",
											"            pm.expect(jsonData[i].relationshipId).to.eql(0);\r",
											"\r",
											"        }\r",
											"        else\r",
											"        {\r",
											"            pm.test(\"Validating import status for INSRelationship:  - row: \"+i+ \" - Status: \"+jsonData[i].importStatus, function () {\r",
											"                pm.expect(jsonData[i].importStatus).to.be.oneOf([\"Imported\",\"Updated\"]);\r",
											"                pm.expect(jsonData[i].operationType).to.be.oneOf([\"New\",\"Existing\"]); \r",
											"            });\r",
											"        }\r",
											"\r",
											"        // pm.test(\"Validating import INSRelationship format from response body \", function () {\r",
											"        //     pm.expect(jsonData[i]).to.have.all.keys('relationshipId','relationshipStatusId', 'insuredPartyId', 'brokerId', 'delegationTypeId', 'errorMessages', 'operationType', 'importStatus','productCode','relationshipStatus','relationshipCreationDate','insuredPartyName','brokerName','delegationType');\r",
											"        // });\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "ion/json;text/csv;text/json;text",
										"disabled": true
									},
									{
										"key": "x-platform-code",
										"type": "text",
										"value": "{{platformCode}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ContentType",
											"value": "application/octet-stream",
											"type": "text",
											"disabled": true
										},
										{
											"key": "Name",
											"value": "participants",
											"type": "text",
											"disabled": true
										},
										{
											"key": "insRelationships",
											"type": "file",
											"src": "/C:/Liquidx/LiquidX/Entitlements/Manual/Bulk Import/INS Relationship/INS-IP-Platform Broker-Relationships-ENT-1993 -Validations.csv"
										},
										{
											"key": "ContentDisposition",
											"value": "form-data",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/api/relationships/ins/validate-csv?relationshipTypeId=5",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"relationships",
										"ins",
										"validate-csv"
									],
									"query": [
										{
											"key": "relationshipTypeId",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "UserAgreement-ENT-2206",
					"item": [
						{
							"name": "Get UserAgreement-List-View-ENT_2206",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"To check the EditUserAgreements & ViewUserAgreements in Response\", function(){\r",
											"    for(i=0; i<jsonData.length; i++){\r",
											"        if(jsonData[i].productCode === \"MO\"){\r",
											"            pm.expect(jsonData[i].permissionNames).to.include(\"EditUserAgreements\")\r",
											"            pm.expect(jsonData[i].permissionNames).to.include(\"ViewUserAgreements\");\r",
											"\r",
											"        }\r",
											"    }\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI_userPermission}}/api/UserEntitlements/{{platformCode}}",
									"host": [
										"{{baseURI_userPermission}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add UserAgreement-Activity-ENT_2206",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI_entitlement\");\r",
											"url = url.concat(\"/api/UserAgreements\");\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"    }\r",
											"},\r",
											"    function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var flag = 0;\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"\r",
											"            if (jsonData[i].productCode == \"SCF\" && jsonData[i].roleName == \"Buyer\") {\r",
											"                flag++;\r",
											"                \r",
											"            }\r",
											"        }\r",
											"        if (flag == 0) {\r",
											"            // pm.variables.set(\"ProductCode\",\"SCF\");\r",
											"            // pm.variables.set(\"Roleid\",1);\r",
											"            console.log(\"success\")\r",
											"        }\r",
											"\r",
											"\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "productCode",
											"value": "{{ProductCode}}",
											"type": "text"
										},
										{
											"key": "roleId",
											"value": "{{Roleid}}",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Adding for first Time",
											"type": "text"
										},
										{
											"key": "userAgreementDocumentTypeId",
											"value": "1",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/12813/Downloads/I am a user agreement.pdf"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/api/UserAgreements",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"UserAgreements"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Duplicate UserAgreement-Activity-ENT_2206",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function(){\r",
											"    pm.response.to.have.status(409);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.get(\"ProductCode\");\r",
											"pm.variables.get(\"Roleid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/12813/Downloads/I am a user agreement.pdf"
										},
										{
											"key": "productCode",
											"value": "{{ProductCode}}",
											"type": "text"
										},
										{
											"key": "roleId",
											"value": "{{Roleid}}",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Adding for Second Time (Duplicate)",
											"type": "text"
										},
										{
											"key": "userAgreementDocumentTypeId",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/api/UserAgreements",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"UserAgreements"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Edit-UserAgreement-Activity-ENT-2330-ENT-2333-ENT-2332",
					"item": [
						{
							"name": "Toggle-UserAgreement_Activity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/UserAgreements\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"    }\r",
											"},\r",
											"    function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    var random = Math.floor(Math.random() * jsonData.length);\r",
											"    pm.variables.set(\"userAgreementId\",jsonData[7].userAgreementId);\r",
											"    console.log(jsonData[7].userAgreementId);\r",
											"    console.log(random);\r",
											"\r",
											"    pm.variables.set(\"IsActive\",jsonData[7].isActive);\r",
											"    if(jsonData[7].isActive == false){\r",
											"        pm.variables.set(\"condition\",true)\r",
											"    }else{\r",
											"        pm.variables.set(\"condition\",false)\r",
											"    }\r",
											"\r",
											"    })\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"isActive\": {{condition}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/UserAgreements/{{userAgreementId}}/activity",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"UserAgreements",
										"{{userAgreementId}}",
										"activity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit_MajorVersion-UserAgreement_Activity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function greet(){\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/UserAgreements\");\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"    }\r",
											"},\r",
											"    function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var random = Math.floor(Math.random() * jsonData.length);\r",
											"        pm.variables.set(\"userAgreementID\",jsonData[random].userAgreementId );\r",
											"        console.log(jsonData[random].userAgreementId);\r",
											"        pm.variables.set(\"condition\", true);\r",
											"        var moment = require('moment');\r",
											"        var timeToday = moment.utc().format('DDMMYY');\r",
											"        pm.variables.set(\"Description\", jsonData[random].description + \"_\" + timeToday);\r",
											"        pm.variables.set(\"majorVersion\", jsonData[random].majorVersion);\r",
											"        pm.variables.set(\"minorVersion\", jsonData[random].minorVersion);\r",
											"        pm.variables.set(\"ProductCode\",jsonData[random].productCode);\r",
											"        pm.variables.set(\"RoleName\",jsonData[random].roleName);\r",
											"    })\r",
											"\r",
											"}\r",
											"setTimeout(greet,5000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/UserAgreements\");\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"    }\r",
											"},\r",
											"    function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var userAgreementId = pm.variables.get(\"userAgreementID\")\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"            if (jsonData[i].userAgreementId == userAgreementId) {\r",
											"                var major = pm.variables.get(\"majorVersion\");\r",
											"                var minor = pm.variables.get(\"minorVersion\");\r",
											"                pm.test(\"UserAgreements Before Updating : \" + major + \".\" + minor + \" UserAgreements After Updating : \" + jsonData[i].majorVersion + \".\" + jsonData[i].minorVersion, function () {\r",
											"                    pm.expect(jsonData[i].majorVersion).to.eql(major + 1);\r",
											"                })\r",
											"\r",
											"                var productcode = pm.variables.get(\"ProductCode\");\r",
											"                var rolename = pm.variables.get(\"RoleName\");\r",
											"                var description = pm.variables.get(\"Description\")\r",
											"                pm.test(\"ProductCode/RoleName : \" + productcode + \" / \" + rolename, function () {\r",
											"                    pm.expect(jsonData[i].description).to.eql(description);\r",
											"                })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"            }\r",
											"        }\r",
											"\r",
											"    })\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"description": "This is the pdf file to upload",
											"type": "file",
											"src": "/C:/Users/12813/Downloads/I am a user agreement.pdf"
										},
										{
											"key": "isMajorRevision",
											"value": "{{condition}}",
											"type": "text"
										},
										{
											"key": "description",
											"value": "{{Description}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/api/UserAgreements/{{userAgreementID}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"UserAgreements",
										"{{userAgreementID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DocumentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.variables.set(\"DocumentId\", jsonData[0].documentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://qa.liquidx.com/platform_api_url/api/user-agreements",
									"protocol": "https",
									"host": [
										"qa",
										"liquidx",
										"com"
									],
									"path": [
										"platform_api_url",
										"api",
										"user-agreements"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SignedUserAgreements",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.get(\"DocumentId\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI_plat}}/api/SignedUserAgreements/{{DocumentId}}",
									"host": [
										"{{baseURI_plat}}"
									],
									"path": [
										"api",
										"SignedUserAgreements",
										"{{DocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agree-SignedUserAgreements",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.get(\"DocumentId\");\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/users?count=1000000&skip=0&productCode=MO\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.environment.get(\"accessTokenPlatformUser\")\r",
											"      }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0;i<jsonData.length;i++){\r",
											"        if(jsonData[i].userName == pm.environment.get(\"platformUser\")){\r",
											"            pm.variables.set(\"Signature\", jsonData[i].firstName+\" \"+jsonData[i].lastName)\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var status = pm.variables.get(\"IsActive\");\r",
											"var userAgreementId = pm.variables.get(\"userAgreementId\");\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/UserAgreements/\" + userAgreementId + \"/activity\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'PUT',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: {\r",
											"            \"isActive\": status\r",
											"        }\r",
											"    }\r",
											"},\r",
											"    function (err, res) {\r",
											"        pm.test(\"Status code is 200\", function () {\r",
											"            pm.expect(res.code).to.eql(200);\r",
											"        })\r",
											"\r",
											"\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"signature\": \"{{Signature}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/SignedUserAgreements/{{DocumentId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"SignedUserAgreements",
										"{{DocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "View-UserAgreement_Activity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/UserAgreements\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"    }\r",
											"},\r",
											"    function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var random = Math.floor(Math.random() * jsonData.length);\r",
											"        pm.variables.set(\"userAgreementDocumentId\", jsonData[random].userAgreementDocumentId);\r",
											"        console.log(jsonData[random].userAgreementDocumentId);\r",
											"        console.log(random);\r",
											"    })\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Content-Type header is application/pdf\", function(){\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/pdf');\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Disposition header is present\", function(){\r",
											"  pm.response.to.have.header(\"Content-Disposition\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/UserAgreements/file/{{userAgreementDocumentId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"UserAgreements",
										"file",
										"{{userAgreementDocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get UserAgreementDocument",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.get(\"userAgreementDocumentId\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/UserAgreements/{{userAgreementDocumentId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"UserAgreements",
										"{{userAgreementDocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit_MinorVersion-UserAgreement_Activity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/UserAgreements\");\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"    }\r",
											"},\r",
											"    function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var random = Math.floor(Math.random() * jsonData.length);\r",
											"        pm.variables.set(\"userAgreementiD\", jsonData[random].userAgreementId);\r",
											"        console.log(jsonData[random].userAgreementId);\r",
											"        pm.variables.set(\"condition\", false);\r",
											"        var moment = require('moment');\r",
											"        var timeToday = moment.utc().format('DDMMYY');\r",
											"        pm.variables.set(\"Description1\", jsonData[random].description + \"_\" + timeToday);\r",
											"        pm.variables.set(\"majorVersion1\", jsonData[random].majorVersion);\r",
											"        pm.variables.set(\"minorVersion1\", jsonData[random].minorVersion);\r",
											"        pm.variables.set(\"ProductCode1\", jsonData[random].productCode);\r",
											"        pm.variables.set(\"RoleName1\", jsonData[random].roleName);\r",
											"    })\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/UserAgreements\");\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
											"    }\r",
											"},\r",
											"    function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var userAgreementId = pm.variables.get(\"userAgreementiD\")\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"            if (jsonData[i].userAgreementId === userAgreementId) {\r",
											"                var major = pm.variables.get(\"majorVersion1\");\r",
											"                var minor = pm.variables.get(\"minorVersion1\");\r",
											"                pm.test(\"UserAgreements Before Updating : \" + major + \".\" + minor + \" UserAgreements After Updating : \" + jsonData[i].majorVersion + \".\" + jsonData[i].minorVersion, function () {\r",
											"                    pm.expect(jsonData[i].minorVersion).to.eql(minor + 1);\r",
											"                })\r",
											"\r",
											"                var productcode = pm.variables.get(\"ProductCode1\");\r",
											"                var rolename = pm.variables.get(\"RoleName1\");\r",
											"                var description = pm.variables.get(\"Description1\")\r",
											"                pm.test(\"ProductCode/RoleName : \" + productcode + \" / \" + rolename, function () {\r",
											"                    pm.expect(jsonData[i].description).to.eql(description);\r",
											"                })\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/12813/Desktop/UserAgreement.pdf"
										},
										{
											"key": "isMajorRevision",
											"value": "{{condition}}",
											"type": "text"
										},
										{
											"key": "description",
											"value": "{{Description1}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/api/UserAgreements/{{userAgreementiD}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"UserAgreements",
										"{{userAgreementiD}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Maintenance",
			"item": [
				{
					"name": "Relationships",
					"item": [
						{
							"name": "POST Realtionships_SCF",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"productCode1 = \"SCF\";\r",
											"pm.variables.set(\"productCode1\", \"SCF\");\r",
											"pm.variables.set(\"currencyCode\", \"USD\");\r",
											"pm.variables.set(\"relationshipTypeId\",1); //SCF=1, AR=2, INBLOCK=3\r",
											"\r",
											"var moment = require('moment');\r",
											"var timeT = moment.utc().format();\r",
											"console.log(\"Current time: \" + timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.environment.get(\"baseURI\") + \"/api/Participants?role=Supplier&count=10000&productCode=\" + productCode1;\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    var jsonData = res.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].name === pm.variables.get(\"newSupplierCompanySCFName_Local\") && jsonData[i].roleId === 3) {\r",
											"            pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
											"            console.log(\"supplierId1\", jsonData[i].id);\r",
											"            pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfJurisdiction);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"var url = pm.environment.get(\"baseURI\") + \"/api/Participants?role=debtor&count=10000&productCode=\" + productCode1;\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    var jsonData = res.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].name ===  pm.variables.get(\"newBuyerCompanySCFName_Local\") && jsonData[i].roleId === 1) {\r",
											"            pm.variables.set(\"buyerId\", jsonData[i].id);\r",
											"            console.log(\"buyerId\", jsonData[i].id);\r",
											"            pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfJurisdiction);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var relationshipId = jsonData.id;\r",
											"pm.environment.set(\"relationshipIdSCF\",relationshipId);\r",
											"\r",
											"// pm.test(\"To check update /api/Relationships has response 201\", function () {\r",
											"//     pm.expect(res.code).to.eql(204);      \r",
											"// });\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    \r",
											"    pm.test(\"To check update /api/Relationships/id has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"     var jsonData1 = res.json();\r",
											"                \r",
											"    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
											"        pm.expect(jsonData1.productCode).to.eql(\"SCF\");\r",
											"        pm.expect(jsonData1.status).to.eql(\"Active\");\r",
											"    });\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: {\r",
											"                                                    \r",
											"            }\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        pm.test(\"To check update /api/Publications has response 200\", function () {\r",
											"            pm.expect(res.code).to.eql(200);      \r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCode1}}\",\r\n    \"regionCode\": \"NY\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 314,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Relationships",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Relationships"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Company relationship",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"CompanyId\",pm.variables.get(\"newSupplierCompanySCF_Local\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"for (j = 0; j < jsonData.length; j++) {\r",
											"    pm.test(\"To check company relationship: \"+jsonData[j].id, function () \r",
											"    {\r",
											"        pm.expect(jsonData.body).not.eql(null);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"To check mandetory fields for relationship \"+jsonData[j].id, function () \r",
											"    {\r",
											"        for (i = 0; i < jsonData.length; i++) {\r",
											"            pm.expect(jsonData[i]).to.have.any.keys('id','productCode', 'currencyCode','startDate','governingLawId','statusId','status','recordTypeId','calendars','participants','relationshipType');\r",
											"        }\r",
											"    }); \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{CompanyId}}/relationships",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{CompanyId}}",
										"relationships"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Relationship",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rIdSCF= pm.environment.get(\"relationshipIdSCF\");\r",
											"pm.variables.set(\"rIdSCF\",rIdSCF);\r",
											"pm.variables.set(\"productCode1\", \"SCF\");\r",
											"var moment = require('moment');\r",
											"var timeT = moment.utc().format();\r",
											"console.log(\"Current time: \" + timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.environment.get(\"baseURI\") + \"/api/Relationships/\" + rIdSCF;\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    var jsonData = res.json();\r",
											"    pm.variables.set(\"buyerId\",jsonData.buyerId);\r",
											"    pm.variables.set(\"supplierId\",jsonData.supplierId);\r",
											"    pm.variables.set(\"currencyCode\",jsonData.currencyCode);\r",
											"\r",
											"    pm.variables.set(\"descOfGoodsServices\",jsonData.descOfGoodsServices);\r",
											"    pm.variables.set(\"startDate\",jsonData.startDate);\r",
											"    pm.variables.set(\"retainedDays\",jsonData.retainedDays);\r",
											"    pm.variables.set(\"incoTerms\",jsonData.incoTerms);\r",
											"    pm.variables.set(\"invoiceDueDateAdjustmentId\",jsonData.invoiceDueDateAdjustmentId);\r",
											"    pm.variables.set(\"invoiceDueDateAdjustement\",jsonData.invoiceDueDateAdjustement);\r",
											"    pm.variables.set(\"paymentTerms\",jsonData.paymentTerms);\r",
											"    pm.variables.set(\"governingLawId\",jsonData.governingLawId);\r",
											"    pm.variables.set(\"governingLaw\",jsonData.governingLaw);\r",
											"    pm.variables.set(\"additionalDisclosures\",jsonData.additionalDisclosures);\r",
											"    pm.variables.set(\"regionCode\",jsonData.regionCode);\r",
											"    pm.variables.set(\"statusId\",jsonData.statusId);\r",
											"    pm.variables.set(\"status\",jsonData.status);\r",
											"    pm.variables.set(\"disclosureTypeId\",jsonData.disclosureTypeId);\r",
											"    pm.variables.set(\"isPayablesEligible\",jsonData.isPayablesEligible);\r",
											"    pm.variables.set(\"recordTypeId\",jsonData.recordTypeId);\r",
											"    pm.variables.set(\"recordType\",jsonData.recordType);\r",
											"    pm.variables.set(\"incoTermsTypeId\",jsonData.incoTermsTypeId);\r",
											"    pm.variables.set(\"salesforceId\",jsonData.salesforceId);\r",
											"    pm.variables.set(\"annualSales\",jsonData.annualSales);\r",
											"    pm.variables.set(\"buyerValidationDate\",jsonData.buyerValidationDate);\r",
											"\r",
											"    pm.variables.set(\"participantId0\",jsonData.participants[0].participantId);\r",
											"    pm.variables.set(\"companyName0\",jsonData.participants[0].companyName);\r",
											"    pm.variables.set(\"relationshipRoleName0\",jsonData.participants[0].relationshipRoleName);\r",
											"    pm.variables.set(\"countryOfJurisdiction0\",jsonData.participants[0].countryOfJurisdiction);\r",
											"\r",
											"    pm.variables.set(\"participantId1\",jsonData.participants[1].participantId);\r",
											"    pm.variables.set(\"companyName1\",jsonData.participants[1].companyName);\r",
											"    pm.variables.set(\"relationshipRoleName1\",jsonData.participants[1].relationshipRoleName);\r",
											"    pm.variables.set(\"countryOfJurisdiction1\",jsonData.participants[1].countryOfJurisdiction);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"To check update /api/Relationships/id has response 204\", function () {\r",
											"     pm.response.to.have.status(204);      \r",
											"});\r",
											"\r",
											"\r",
											"var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"pm.sendRequest({\r",
											"url: url1,\r",
											"method: 'POST',\r",
											"header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"},\r",
											"body: {\r",
											"    mode: 'raw',\r",
											"    raw: {\r",
											"                                                \r",
											"        }\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"\r",
											"    pm.test(\"To check /api/Publications has response 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);      \r",
											"    });\r",
											"\r",
											"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships?count=15000\";\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"        pm.test(\"To check /api/Relationships has response 200\", function () {\r",
											"            pm.expect(res.code).to.eql(200);      \r",
											"        });\r",
											"        var jsonData1 = res.json();\r",
											"        for (i = 0; i < jsonData1.length; i++) {\r",
											"            if (jsonData1[i].id == pm.variables.get(\"rIdSCF\")) {\r",
											"                \r",
											"                pm.test(\"To check newly created Relationship after activate and published: \"+ pm.variables.get(\"rIdSCF\"), function () {\r",
											"                    pm.expect(jsonData1[i].productCode).to.eql(\"SCF\");\r",
											"                    pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
											"\r",
											"                });\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{rIdSCF}},\r\n    \"productCode\": \"{{productCode1}}\",\r\n    \"buyerId\": {{buyerId}},\r\n    \"supplierId\": {{supplierId}},\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"descOfGoodsServices\": \"{{descOfGoodsServices}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"retainedDays\": {{retainedDays}},\r\n    \"incoTerms\": \"{{incoTerms}}\",\r\n    \"invoiceDueDateAdjustmentId\": {{invoiceDueDateAdjustmentId}},\r\n    \"invoiceDueDateAdjustement\": \"{{invoiceDueDateAdjustement}}\",\r\n    \"paymentTerms\": \"{{paymentTerms}}\",\r\n    \"governingLawId\": {{governingLawId}},\r\n    \"governingLaw\": \"{{governingLaw}}\",\r\n    \"additionalDisclosures\": \"{{additionalDisclosures}}\",\r\n    \"regionCode\": \"{{regionCode}}\",\r\n    \"statusId\": 1,\r\n    \"status\": \"Active\",\r\n    \"disclosureTypeId\": {{disclosureTypeId}},\r\n    \"isPayablesEligible\": {{isPayablesEligible}},\r\n    \"recordTypeId\": {{recordTypeId}},\r\n    \"recordType\": \"{{recordType}}\",\r\n    \"incoTermsTypeId\": {{incoTermsTypeId}},\r\n    \"salesforceId\": \"{{salesforceId}}\",\r\n    \"annualSales\": \"{{annualSales}}\",\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"participants\": [\r\n        {\r\n            \"participantId\": {{participantId0}},\r\n            \"companyName\": \"{{companyName0}}\",\r\n            \"relationshipRoleName\": \"{{relationshipRoleName0}}\",\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction0}}\"\r\n        },\r\n        {\r\n            \"participantId\": {{participantId1}},\r\n            \"companyName\": \"{{companyName1}}\",\r\n            \"relationshipRoleName\": \"{{relationshipRoleName1}}\",\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction1}}\"\r\n        }\r\n    ],\r\n        \"relationshipType\": {\r\n        \"id\": 1,\r\n        \"name\": \"Supply Chain (Supplier-Buyer)\",\r\n        \"productCode\": \"SCF\"\r\n    },\r\n    \"calendarIds\": [1]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Relationships/{{rIdSCF}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Relationships",
										"{{rIdSCF}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Realtionships_SCF_WithoutInvoiceDueDate_OEN-1528",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"productCode1 = \"SCF\";\r",
											"pm.variables.set(\"productCode1\", \"SCF\");\r",
											"pm.variables.set(\"currencyCode\", \"GBP\");\r",
											"pm.variables.set(\"relationshipTypeId\",1); //SCF=1, AR=2, INBLOCK=3\r",
											"\r",
											"var moment = require('moment');\r",
											"var timeT = moment.utc().format();\r",
											"console.log(\"Current time: \" + timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.environment.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + productCode1;\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    var jsonData = res.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].name === pm.variables.get(\"newSupplierCompanySCFName_Local\") && jsonData[i].roleId === 3) {\r",
											"            pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
											"            console.log(\"supplierId1\", jsonData[i].id);\r",
											"            pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfJurisdiction);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"var url = pm.environment.get(\"baseURI\") + \"/api/Participants?role=debtor&productCode=\" + productCode1;\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    var jsonData = res.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].name ===  pm.variables.get(\"newBuyerCompanySCFName_Local\") && jsonData[i].roleId === 1) {\r",
											"            pm.variables.set(\"buyerId\", jsonData[i].id);\r",
											"            console.log(\"buyerId\", jsonData[i].id);\r",
											"            pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfJurisdiction);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var relationshipId = jsonData.id;\r",
											"pm.environment.set(\"relationshipIdSCF\",relationshipId);\r",
											"\r",
											"var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"pm.sendRequest({\r",
											"url: url1,\r",
											"method: 'POST',\r",
											"header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"},\r",
											"body: {\r",
											"    mode: 'raw',\r",
											"    raw: {\r",
											"                                                \r",
											"        }\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    // });\r",
											"\r",
											"\r",
											"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        var jsonData1 = res.json();\r",
											"            for (i = 0; i < jsonData1.length; i++) {\r",
											"                if (jsonData1[i].id == relationshipId) {\r",
											"                    \r",
											"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
											"                        pm.expect(jsonData1[i].productCode).to.eql(\"SCF\");\r",
											"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
											"\r",
											"                    });\r",
											"                }\r",
											"            }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [   ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCode1}}\",\r\n    \"regionCode\": \"NY\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 314,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Relationships",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Relationships"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Realtionships_AR",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"productCode1 = \"AR\"\r",
											"pm.variables.set(\"productCode1\", \"AR\");\r",
											"pm.variables.set(\"currencyCode\", \"USD\");\r",
											"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
											"\r",
											"var moment = require('moment');\r",
											"var timeT = moment.utc().format();\r",
											"console.log(\"Current time: \" + timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.environment.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + productCode1;\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    var jsonData = res.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) {\r",
											"            pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
											"            console.log(\"supplierId1\", jsonData[i].id);\r",
											"            pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfJurisdiction);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"var url = pm.environment.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + productCode1;\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    var jsonData = res.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].name ===  pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) {\r",
											"            pm.variables.set(\"buyerId\", jsonData[i].id);\r",
											"            console.log(\"buyerId\", jsonData[i].id);\r",
											"            pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfJurisdiction);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var relationshipId = jsonData.id;\r",
											"\r",
											"var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"pm.sendRequest({\r",
											"url: url1,\r",
											"method: 'POST',\r",
											"header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"},\r",
											"body: {\r",
											"    mode: 'raw',\r",
											"    raw: {\r",
											"                                                \r",
											"        }\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"});\r",
											"\r",
											"\r",
											"// var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
											"// pm.sendRequest({\r",
											"// url: url2,\r",
											"// method: 'GET',\r",
											"// header: {\r",
											"//             'Accept': 'application/json',\r",
											"//             'Content-Type': 'application/json',\r",
											"//             'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"//         }\r",
											"// }, function (err, res) {\r",
											"//     if (err) { console.log(url + err); }\r",
											"\r",
											"//     var jsonData1 = res.json();\r",
											"//     for (i = 0; i < jsonData1.length; i++) {\r",
											"//         if (jsonData1[i].id == relationshipId) {\r",
											"            \r",
											"//             pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
											"//                 pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
											"//                 pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
											"\r",
											"//             });\r",
											"//         }\r",
											"//     }\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCode1}}\",\r\n    \"regionCode\": \"NY\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 314,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Relationships",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Relationships"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Realtionships_AR_WithoutInvoiceDueDate_OEN-1528-Currency-MXN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"productCode1 = \"AR\"\r",
											"pm.variables.set(\"productCode1\", \"AR\");\r",
											"pm.variables.set(\"currencyCode\", \"MXN\");\r",
											"pm.variables.set(\"relationshipTypeId\",2); //SCF=1, AR=2, INBLOCK=3\r",
											"\r",
											"var moment = require('moment');\r",
											"var timeT = moment.utc().format();\r",
											"console.log(\"Current time: \" + timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.environment.get(\"baseURI\") + \"/api/Participants?role=Supplier&productCode=\" + productCode1;\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    var jsonData = res.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].name === pm.variables.get(\"newSupplierCompanyName_Local\") && jsonData[i].roleId === 8) {\r",
											"            pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
											"            console.log(\"supplierId1\", jsonData[i].id);\r",
											"            pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfJurisdiction);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"var url = pm.environment.get(\"baseURI\") + \"/api/Participants?role=buyer&productCode=\" + productCode1;\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) { console.log(url + err); }\r",
											"    var jsonData = res.json();\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].name ===  pm.variables.get(\"newBuyerCompanyName_Local\") && jsonData[i].roleId === 10) {\r",
											"            pm.variables.set(\"buyerId\", jsonData[i].id);\r",
											"            console.log(\"buyerId\", jsonData[i].id);\r",
											"            pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfJurisdiction);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var relationshipId = jsonData.id;\r",
											"\r",
											"    var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
											"    pm.sendRequest({\r",
											"    url: url1,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: {\r",
											"                                                  \r",
											"            }\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"    // });\r",
											"\r",
											"    var url2 = pm.variables.get(\"baseURI\") + \"/api/Relationships\";\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        var jsonData1 = res.json();\r",
											"            for (i = 0; i < jsonData1.length; i++) {\r",
											"                if (jsonData1[i].id == relationshipId) {\r",
											"                    \r",
											"                    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
											"                        pm.expect(jsonData1[i].productCode).to.eql(\"AR\");\r",
											"                        pm.expect(jsonData1[i].status).to.eql(\"Active\");\r",
											"\r",
											"                    });\r",
											"                }\r",
											"            }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}}\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"calendarIds\": [\r\n        \r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"productCode\": \"{{productCode1}}\",\r\n    \"regionCode\": \"NY\",\r\n    \"disclosureTypeId\": 2,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"annualSales\": \"1000k\",\r\n    \"paymentTerms\": \"Now\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 314,\r\n    \"additionalDetails\": \"any\",\r\n    \"incoTerms\": \"1\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"buyerValidationDate\": \"{{currentTime}}\",\r\n    \"incoTermsTypeId\": 1,\r\n    \"startDate\": \"{{currentTime}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Relationships",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Relationships"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "E2E-Update-UserpermissionLocal",
					"item": [
						{
							"name": "Post Company Local",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var  cRandom = getRandomAlphaNumeric(4,\"AB98765CD01234EFGHIJKLMNO01234PQRSTUVWXYZ56789\");\r",
											"\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--)\r",
											"    { \r",
											"     result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"     return result;\r",
											"}\r",
											"// pm.variables.set(\"entityName\", \"SCF Supplier1\");\r",
											"\r",
											"pm.variables.set(\"entityName\", cRandom);\r",
											"pm.variables.set(\"recordTypeId\", 1);\r",
											"\r",
											"var moment = require('moment'); \r",
											"var timeT = moment.utc().format();  \r",
											"console.log(\"Current time: \"+timeT)\r",
											"pm.variables.set(\"currentTime\", timeT);\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/countries\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].countryCode.includes(\"US\"))\r",
											"        {\r",
											"            var countryName =  jsonData[i].name;\r",
											"            var countryCode = jsonData[i].countryCode;\r",
											"            console.log(\"country Name: \"+countryName);\r",
											"            pm.variables.set(\"country\", countryName);\r",
											"            pm.variables.set(\"code1\", countryCode);\r",
											"            console.log(\"country code: \"+countryCode);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    url = url.concat(\"/\"+pm.variables.get(\"code1\")+\"/state-provinces\");\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        var jsonData = res.json();\r",
											"        var stateName = jsonData[0].name;\r",
											"        console.log(\"state Name: \"+stateName);\r",
											"        pm.variables.set(\"stateRegion\", stateName);     \r",
											"\r",
											"        var url1 = pm.variables.get(\"baseURI\");\r",
											"        url1 = url1.concat(\"/api/country-jurisdictions\");\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: url1,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"        }, function (err, res) {\r",
											"            var jsonData = res.json();\r",
											"            for(i=0; i< jsonData.length; i++)\r",
											"            { \r",
											"                if(jsonData[i].countryCode.includes(\"US\"))\r",
											"                {\r",
											"                    var jurisdiction =  jsonData[i].name;\r",
											"                    console.log(\"countryOfJurisdiction: \"+jurisdiction);\r",
											"                    pm.variables.set(\"countryOfJurisdiction\", jurisdiction);\r",
											"                    \r",
											"                    break;\r",
											"                }\r",
											"            }  \r",
											"            var url2 = pm.variables.get(\"baseURI\");\r",
											"            url2 = url2.concat(\"/api/institution-types\");\r",
											"            pm.sendRequest({\r",
											"            url: url2,\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'Accept': 'application/json',\r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"            }\r",
											"            }, function (err, res) {\r",
											"                var jsonData = res.json();\r",
											"                var institutionType = jsonData[0].id;\r",
											"                console.log(\"institutionType id: \"+institutionType);\r",
											"                console.log(\"institutionType name: \"+jsonData[0].name);\r",
											"                pm.variables.set(\"institutionTypeId\", institutionType);   \r",
											"\r",
											"                var url3 = pm.variables.get(\"baseURI\");\r",
											"                url3 = url3.concat(\"/api/sectors\");\r",
											"                pm.sendRequest({\r",
											"                url: url3,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                }\r",
											"                }, function (err, res) {\r",
											"                    var jsonData = res.json();\r",
											"                    var sectorId = jsonData[5].id;\r",
											"                    console.log(\"sector id: \"+sectorId);\r",
											"                    console.log(\"sector name: \"+jsonData[5].name);\r",
											"                    pm.variables.set(\"sectorId\", sectorId);   \r",
											"                    \r",
											"                    var url4 = pm.variables.get(\"baseURI\");\r",
											"                    url4 = url4.concat(\"/api/sectors/\"+pm.variables.get(\"sectorId\")+\"/industries\");\r",
											"                    pm.sendRequest({\r",
											"                    url: url4,\r",
											"                    method: 'GET',\r",
											"                    header: {\r",
											"                        'Accept': 'application/json',\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"                    }\r",
											"                    }, function (err, res) {\r",
											"                        var jsonData = res.json();\r",
											"                        var industryId = jsonData[0].id;\r",
											"                        console.log(\"industry Id : \"+industryId);\r",
											"                        console.log(\"industry name: \"+jsonData[0].name);\r",
											"                        pm.variables.set(\"industryId\", industryId);   \r",
											"\r",
											"                    }); \r",
											"                }); \r",
											"            });\r",
											"        });\r",
											"\r",
											"    });\r",
											"        \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var Id = pm.variables.get(\"entityName\");\r",
											"\r",
											"pm.test(\"To check new company is created: \" + jsonData.id, function () {\r",
											"    pm.expect(jsonData.name).to.eql('API_Entl_' + Id);\r",
											"});\r",
											"\r",
											"console.log(\"NEW company--->\" + jsonData.companyId);\r",
											"pm.variables.set(\"companyL\", jsonData.companyId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"salesforceId\": \"\",\r\n  \"name\": \"API_Entl_{{entityName}}\",\r\n  \"dba\": \"\",\r\n  \"phone\": \"\",\r\n  \"addressLine1\": \"\",\r\n  \"addressLine2\": \"\",\r\n  \"city\": \"\",\r\n  \"stateRegion\": \"{{stateRegion}}\",\r\n  \"country\": \"{{country}}\",\r\n  \"entityType\": \"\",\r\n  \"duns\": \"\",\r\n  \"taxId\": \"\",\r\n  \"stateOfIncorporation\":  \"{{stateRegion}}\",\r\n  \"countryOfJurisdiction\": \"{{countryOfJurisdiction}}\",\r\n  \"isActive\": true,\r\n  \"lastSalesforceUpdateUtc\": \"{{currentTime}}\",\r\n  \"isLqXcompany\": true,\r\n  \"legacyId\": \"\",\r\n  \"isLegacyAccount\": true,\r\n  \"recordTypeId\": {{recordTypeId}},\r\n  \"legalEntityName\": \"\",\r\n  \"institutionTypeId\": {{institutionTypeId}},\r\n  \"sectorId\": {{sectorId}},\r\n  \"industryId\": {{industryId}},\r\n  \"postalCode\": \"\",\r\n  \"updatedOn\": \"{{currentTime}}\",\r\n  \"users\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate_Companies Local",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"To check company is active \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var companyL = pm.variables.get(\"companyL\");",
											"pm.variables.set('companyL', companyL);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n\t\"id\": {{companyL}}\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/{{companyL}}/update-status?command=activate",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{companyL}}",
										"update-status"
									],
									"query": [
										{
											"key": "command",
											"value": "activate"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Participant Local",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var companyL = pm.variables.get(\"companyL\");\r",
											"pm.variables.set('companyL', companyL);\r",
											"\r",
											"var codes = pm.environment.get(\"productCode\").toString().split(',');\r",
											"\r",
											"console.log(\"Product codes: \" + codes);\r",
											"console.log(\"Total Product Count: \" + codes.length);\r",
											"pm.collectionVariables.set(\"productCount\", codes.length - 1);\r",
											"\r",
											"var counter = parseInt(pm.collectionVariables.get('count'));\r",
											"pm.collectionVariables.set('code', codes[counter]);\r",
											"var currentCode = pm.collectionVariables.get('code');\r",
											"console.log(\"current product code---->\" + currentCode);\r",
											"console.log(\"Counter:\" + counter);\r",
											"pm.variables.set(\"code\", currentCode);\r",
											"\r",
											"// var currentCode = pm.variables.get('code');  // For daily regression\r",
											"\r",
											"if(currentCode == \"SCF\")\r",
											"{\r",
											"    pm.variables.set(\"roldeIdP\", 3);\r",
											"\r",
											"}\r",
											"else if (currentCode == \"AR\")\r",
											"{\r",
											"    pm.variables.set(\"roldeIdP\", 8);\r",
											"\r",
											"}\r",
											"// else (currentCode == \"INS\")\r",
											"// {\r",
											"//     postman.setNextRequest(\"Get badge\");\r",
											"\r",
											"// }"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var participantId = jsonData.id;\r",
											"\r",
											"var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants/\"+participantId;\r",
											"    pm.sendRequest({\r",
											"    url: url2,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        if (err) { console.log(url + err); }\r",
											"\r",
											"        var jsonData1 = res.json();\r",
											"         pm.test(\"To check mandetory fields for relationship \"+jsonData1.id, function () {\r",
											"        for (i = 0; i < jsonData1.length; i++) {\r",
											"            pm.expect(jsonData1[i]).to.have.any.keys('id','name','productCode', 'roleId','participantRole','isActive','countryOfJurisdiction');\r",
											"        }\r",
											"    }); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"companyId\": {{companyL}},\r\n\t\"roleId\": {{roldeIdP}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/Participants",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "ProductRoles_activate Local",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"var companyId = pm.variables.get(\"companyL\");",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\" + companyId + \"/roles\");",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")",
											"        }",
											"    },",
											"    function (err, res) {",
											"    if (err) { console.log(\"error :\" + err); };",
											"",
											"    var responseJSONdata = res.json();",
											"    for (var i = 0; i < responseJSONdata.length; i++) {",
											"        if(responseJSONdata[i].roldeId == pm.variables.get(\"roldeId\"))",
											"        {",
											"        pm.test(\"To check /companies/{id} returns company details\", function () {",
											"            // for (var i = 0; i < responseJSONdata.length; i++) {",
											"            pm.expect(responseJSONdata[i].companyId).to.eql(parseInt(companyId));",
											"            // }",
											"        }); ",
											"        pm.test(\"To check Company Roles_activate\", function () {",
											"            // for (var i = 0; i < responseJSONdata.length; i++) {",
											"            pm.expect(responseJSONdata[i].isActive).to.eql(true);",
											"            // }",
											"        }); ",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var companyL = pm.variables.get(\"companyL\");",
											"pm.variables.set('companyL', companyL);",
											"",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\"+companyL+\"/roles?productCode=\" + pm.variables.get(\"code\") );",
											"pm.sendRequest({",
											"  url: url,",
											"  method: 'GET',",
											"  header: {",
											"    'Accept': 'application/json',",
											"    'Content-Type': 'application/json',",
											"    'x-platform-code': pm.environment.get(\"platformCode\"),",
											"    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")",
											"  }",
											"},",
											"  function (err, res) {",
											"    if (err) { console.log(\"error :\" + err); };",
											"    var jsonData = res.json();",
											"    for(i=0;i<jsonData.length;i++)",
											"    {",
											"      if(jsonData[i].productCode.includes( pm.variables.get(\"code\") ) && jsonData[i].roleName.includes(\"Supplier\"))",
											"      {",
											"        var roleIdNew = jsonData[i].roleId;",
											"        var roleNameNew = jsonData[i].roleName;",
											"        var participantIdNew = jsonData[i].participantId;",
											"",
											"        console.log(\"roleId--->\" + roleIdNew);",
											"        console.log(\"roleName--->\" + roleNameNew);",
											"        console.log(\"participantId--->\" + participantIdNew);",
											"        pm.variables.set(\"participantId\", participantIdNew);",
											"        pm.variables.set(\"roleName\", roleNameNew);",
											"        pm.variables.set(\"roldeId\", roleIdNew);",
											"      }",
											"    }",
											"    ",
											"  });",
											"    pm.variables.set(\"isActive\", true);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"participantId\":{{participantId}},\n\t\t\"isActive\": {{isActive}},\n\t\t\"companyId\":{{companyL}},\n\t\t\"productCode\":\"{{code}}\",\n\t\t\"roleId\":{{roldeId}},\n\t\t\"roleName\":\"{{roleName}}\"\n\t}\n]"
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/{{companyL}}/roles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{companyL}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Company by ID Local",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expCompany = pm.variables.get(\"companyL\");\r",
											"console.log(expCompany);\r",
											"var responseJSONdata = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"To check /companies/{id} returns company details\", function () {\r",
											"    pm.expect(responseJSONdata.companyId).to.eql(parseInt(expCompany));\r",
											"}); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var companyL = pm.variables.get(\"companyL\");",
											"pm.variables.set('companyL', companyL);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/companies/{{companyL}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{companyL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_User Local",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//This code is used to generate random unique alphanumeric string for new user generation.",
											"var user = getRandomAlphaNumeric(4, \"ABCDEFG01234HIJ0123456789KLMNOPQRSTU01234VWXYZ\");",
											"pm.variables.set(\"U_ID\", user);",
											"",
											"function getRandomAlphaNumeric(len, chars) {",
											"    var result = '';",
											"    for (var i = len; i > 0; i--) {",
											"        result += chars[Math.floor(Math.random() * chars.length)];",
											"    }",
											"    return result;",
											"}",
											"",
											"//New user is created in the company selected in the previous script 'Get Company by ID (roles)'",
											"var companyL = pm.variables.get(\"companyL\");",
											"pm.variables.set(\"companyL\", companyL);",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\" + companyL);",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")",
											"    }",
											"},",
											"    function (err, res) {",
											"        if (err) { console.log(\"error :\" + err); }",
											"        var jsonData = res.json();",
											"        console.log(jsonData);",
											"",
											"        pm.variables.set(\"cid\", jsonData.id);",
											"        pm.variables.set(\"salesforceId\", jsonData.salesforceId);",
											"        pm.variables.set(\"name\", jsonData.name);",
											"        pm.variables.set(\"country\", jsonData.country);",
											"        pm.variables.set(\"stateOfIncorporation\", jsonData.stateOfIncorporation);",
											"        pm.variables.set(\"countryOfJurisdiction\", jsonData.countryOfJurisdiction);",
											"        pm.variables.set(\"isActive\", jsonData.isActive);",
											"        pm.variables.set(\"updatedOn\", jsonData.updatedOn);",
											"        pm.variables.set(\"users\", jsonData.users);",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var Id = pm.variables.get(\"U_ID\");",
											"",
											"pm.test(\"To check user is created: \" + jsonData.id, function () {",
											"    pm.expect(jsonData.userName).to.eql('lqxscf+TestUserAPI_' + Id+'@gmail.com');",
											"});",
											"",
											"console.log(\"NEW USER--->\" + jsonData.id);",
											"pm.environment.set(\"UserID_Local_new\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 280,\r\n    \"salesforceId\": \"a090j000001Tq8XAAS\",\r\n    \"firstName\": \"apiFN\",\r\n    \"middleInitial\": \"U\",\r\n    \"lastName\": \"apiLN\",\r\n    \"email\": \"lqxscf+TestUserAPI_{{U_ID}}@gmail.com\",\r\n    \"companyId\": {{companyL}},\r\n    \"isActive\": false,\r\n    \"userName\": \"lqxscf+TestUserAPI_{{U_ID}}@gmail.com\",\r\n    \"title\": \"QA\",\r\n    \"workPhone\": \"45657668\",\r\n    \"isLqxUser\": false,\r\n    \"updatedOn\": \"2019-11-12T11:34:00.0066667\",\r\n    \"isDeleted\": false,\r\n    \"isPortalUser\": true,\r\n    \"isAuthorizedSignatory\": false,\r\n    \"isAuthorizedAdmin\": true,\r\n    \"isPlatformUser\": true,\r\n    \"company\": {\r\n        \"id\": {{cid}},\r\n        \"salesforceId\": \"{{salesforceId}}\",\r\n        \"name\": \"{{name}}\",\r\n        \"country\": \"{{country}}\",\r\n        \"stateOfIncorporation\": \"{{stateOfIncorporation}}\",\r\n        \"countryOfJurisdiction\": \"{{countryOfJurisdiction}}\",\r\n        \"isActive\": {{isActive}},\r\n        \"updatedOn\": \"{{updatedOn}}\",\r\n        \"users\": []\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate_User Local",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"To check user is  Active \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var uId = pm.environment.get(\"UserID_new\");\r",
											"pm.variables.set(\"userId\", pm.environment.get(\"UserID_Local_new\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"{{userId}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/users/{{userId}}?command=activate",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"users",
										"{{userId}}"
									],
									"query": [
										{
											"key": "command",
											"value": "activate"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User Permissions Local",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//This code is used to get current company and code.",
											"var companyL = pm.variables.get(\"companyL\"); ",
											"var currentCode = pm.variables.get('code');  ",
											"",
											"console.log(\"***********\" + currentCode);",
											"",
											"//This array conatains the read, write permissions.",
											"var permissionArray = [\"Read\", \"Write\"];",
											"",
											"//This request is used for getting company roles for the current products from which we get role id and role name.",
											"var url = pm.variables.get(\"baseURI\");",
											"url = url.concat(\"/api/Companies/\" + companyL + \"/roles?productCode=\" + currentCode + \"&isActive=true\");",
											"",
											"pm.sendRequest({",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"        'Accept': 'application/json',",
											"        'Content-Type': 'application/json',",
											"        'x-platform-code': pm.environment.get(\"platformCode\"),",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")",
											"    }",
											"},",
											"    function (err, res) {",
											"        if (err) { console.log(\"error :\" + err); };",
											"        var jsonData = res.json();",
											"        for(i=0;i<jsonData.length;i++)",
											"        {",
											"            if(jsonData[i].isActive == true)",
											"            {          ",
											"                if(jsonData[i].roleName.includes(\"Supplier\"))",
											"                {",
											"                    var roleIdNew = jsonData[i].roleId;",
											"                    var roleNameNew = jsonData[i].roleName;",
											"                }",
											"            }",
											"        }",
											"",
											"        console.log(\"roleId--->\" + roleIdNew);",
											"        console.log(\"roleName--->\" + roleNameNew);",
											"",
											"        pm.variables.set(\"roldeId\", roleIdNew);",
											"        pm.variables.set(\"roleName\", roleNameNew);",
											"",
											"        roleNameNew = String(roleNameNew);",
											"        var currentRole = roleNameNew.split('- ');",
											"        pm.variables.set('currentRole', currentRole[1]);",
											"        console.log(\"Current Company Role: \" + currentRole[1]);",
											"",
											"        //This counter is used to traverse permissionArray and setting the current value in the variable 'permission'",
											"        // var permissioncount = pm.variables.get(\"permissioncounter\");",
											"        var permissioncount1 = pm.collectionVariables.get('permissioncount');",
											"        pm.collectionVariables.set('pa_count', permissionArray.length - 1);",
											"",
											"        pm.variables.set('permission', permissionArray[permissioncount1]);",
											"        console.log(\"permissioncounter:\" + permissioncount1);",
											"",
											"        //This 'combined' string is generated to so that we can get user permissions details",
											"        if (currentCode == 'INS' && currentRole[1] == 'Insurance Carrier') {",
											"            combinedStr = currentCode + \" IC \" + permissionArray[permissioncount1];",
											"            pm.variables.set(\"combinedStr\",combinedStr);",
											"            console.log(\"combinedStr------>\" + combinedStr);",
											"        }",
											"        else if (currentCode == 'INS' && currentRole[1] == 'Insured Party') {",
											"            combinedStr = currentCode + \" IP \" + permissionArray[permissioncount1];",
											"            pm.variables.set(\"combinedStr\",combinedStr);",
											"            console.log(\"combinedStr------>\" + combinedStr);",
											"        }",
											"        else {",
											"            combinedStr = currentCode + \" \" + currentRole[1] + \" \" + permissionArray[permissioncount1];",
											"            pm.variables.set(\"combinedStr\",combinedStr);",
											"            console.log(\"combinedStr------>\" + combinedStr);",
											"        }",
											"        var uId = pm.variables.get(\"UserID_Local_new\");",
											"        var url = pm.variables.get(\"baseURI\");",
											"        url = url.concat(\"/api/userpermissions/\" + uId + \"/roles/\" + pm.variables.get(\"roldeId\") + \"?entityType=Company\");",
											"        pm.sendRequest({",
											"            url: url,",
											"            method: 'GET',",
											"            header: {",
											"                'Accept': 'application/json',",
											"                'Content-Type': 'application/json',",
											"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")",
											"            }",
											"        },",
											"            function (err, res) {",
											"                if (err) { console.log(\"error :\" + err); }",
											"                var jsonData = res.json();",
											"                // var permissionName;",
											"                for (i = 0; i < jsonData.length; i++) {",
											"                    if (jsonData[i].permissionBundleName.includes(combinedStr)) {",
											"                        if (jsonData[i].permissionBundleName.includes(\"Read\")) {",
											"                            pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
											"                            pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
											"                            pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
											"                            pm.variables.set(\"isEntitled\", true);",
											"                            break;",
											"                        }",
											"                        else {",
											"                            pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);",
											"                            pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);",
											"                            pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);",
											"                            pm.variables.set(\"isEntitled\", true);",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                }",
											"                pm.variables.set(\"userId\", pm.environment.get(\"UserID_Local_new\"));",
											"            });",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
											" });\r",
											"\r",
											"//This code used for getting user permissions and verifying with updated permissions.\r",
											"var userId = pm.environment.get(\"UserID_Local_new\");\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Company\";\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenPlatformUser\")\r",
											"      }\r",
											"      \r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"   \r",
											"    pm.test(\"Validate the userpermissions updated for user \" + userId + \" returned for Company: \", function(){\r",
											"        var permissionFlag = false;\r",
											"        for( var i=0; i< jsonData.length; i++)\r",
											"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
											"            if (jsonData[i].permissionBundleName == pm.variables.get(\"combinedStr\"))\r",
											"            {\r",
											"                permissionFlag = true;\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"        pm.expect(permissionFlag).to.be.eql(true);\r",
											"   });\r",
											"   \r",
											"////////////////////////////////////////////////////////////////////////////////////////////\r",
											"\r",
											"//This code will execute till we complete the permission array counter\r",
											"    var permissioncounter = pm.collectionVariables.get('permissioncount');\r",
											"    let permissionLimit = pm.collectionVariables.get(\"pa_count\");\r",
											"    let found = false;\r",
											"    console.log(\"limit:\"+permissionLimit);\r",
											"    console.log(\"permissioncounter:\"+permissioncounter);\r",
											"    console.log(\"found:\"+found);\r",
											"    if(permissioncounter < permissionLimit && !found)\r",
											"    {\r",
											"        console.log(\"setting next request\");\r",
											"        postman.setNextRequest(\"Update User Permissions Local\");\r",
											"        pm.collectionVariables.unset(\"permissioncount\");\r",
											"        // pm.variables.set(\"permissioncounter\", permissioncounter+1);\r",
											"        pm.collectionVariables.set(\"permissioncount\", parseInt(permissioncounter)+1) ;\r",
											"        console.log(\"--------->\"+permissioncounter);\r",
											"    }else if(permissioncounter === permissionLimit)\r",
											"    {\r",
											"        console.log(\"Condition match! Execution loop completed\");\r",
											"        pm.collectionVariables.set(\"permissioncount\", 0) ;\r",
											"        pm.collectionVariables.set(\"pa_count\",0);\r",
											"        console.log(\"Counter reset to 0\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"userParticipantId\": {{userParticipantId}},\n        \"permissionBundleId\": {{permissionBundleId}},\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\n        \"isEntitled\": {{isEntitled}}\n    }\n] "
								},
								"url": {
									"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"userpermissions",
										"{{userId}}",
										"roles",
										"{{roldeId}}"
									],
									"query": [
										{
											"key": "entityType",
											"value": "Company"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Publish UserEntitlements/{id} Local",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"userId\", pm.environment.get(\"UserID_Local_new\"));\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/users/\"+  pm.environment.get(\"UserID_Local_new\") );\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"function (err, res) {\r",
											"        if (err) {console.log(\"error :\" + err); };\r",
											"        pm.test(\"To check /api/users/id response is 200\", function () {\r",
											"            pm.expect(res.code).to.eql(200);      \r",
											"        });\r",
											"        var jsonData = res.json();\r",
											"        if(jsonData.isActive == true && jsonData.isPublished == false)\r",
											"        {\r",
											"            console.log(\"User met all condtions and it can be published!\")\r",
											"        }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/UserEntitlements/{{userId}}/Publish/PlatformCode/{{platformCode}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"UserEntitlements",
										"{{userId}}",
										"Publish",
										"PlatformCode",
										"{{platformCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User Local",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"userId\", pm.environment.get(\"UserID_Local_new\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expUserId = pm.environment.get(\"UserID_Local_new\");",
											"",
											"pm.test(\"Status code is 200\", function()",
											"{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"To check user Successfully deleted: \"+ expUserId, function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result).to.eql(\"User \"+expUserId+ \" deleted\");",
											"});",
											"",
											"var counter = parseInt(pm.collectionVariables.get('count'));",
											"let limit = parseInt(pm.collectionVariables.get('productCount'));",
											"let found = false;",
											"console.log(\"limit:\" + limit);",
											"console.log(\"counter:\" + counter);",
											"",
											"if (counter < limit && !found) {",
											"    console.log(\"setting next request\");",
											"    postman.setNextRequest(\"Post Participant Local\");",
											"    pm.collectionVariables.unset(\"count\");",
											"    pm.collectionVariables.set(\"count\", parseInt(counter) + 1);",
											"} else if (counter === limit) {",
											"    console.log(\"Condition match! Execution loop completed\");",
											"    pm.collectionVariables.set(\"count\", 0);",
											"    pm.collectionVariables.set('productCount',0);",
											"    pm.collectionVariables.set(\"code\", pm.environment.get(\"productCode\"));",
											"    console.log(\"Counter reset to \" + pm.collectionVariables.get(\"count\"));",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseURI}}/api/Users/{{userId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deactivate_Companies Local",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var companyL = pm.variables.get(\"companyL\");",
											"pm.variables.set('companyL', companyL);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"To check company is inActive \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isActive).to.eql(false);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-platform-code",
										"value": "{{platformCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n\t\"id\": {{companyL}}\r\n}"
								},
								"url": {
									"raw": "{{baseURI}}/api/Companies/{{companyL}}/update-status?command=deactivate",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"Companies",
										"{{companyL}}",
										"update-status"
									],
									"query": [
										{
											"key": "command",
											"value": "deactivate"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Note: (Date of comment - 23/04/2020)\n\nRemoving AR buyer company (company id - 528 - API_AR_Buyer) from array set in the environment variable.\n\nWe can not add AR buyer read/write permission because checkbox is not there. I think this is yet to implement. (Not a high priority at this time --> Comment in OEN-409) \n\nThis implementation is not in the current release. ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Support Logically ordering permission_ENT-2203",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"    var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/permissions/roles/\"+pm.variables.get(\"roleId\")+\"/bundles?productCode=\"+pm.variables.get(\"productCode\"));\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"            if (err) {console.log(\"error :\" + err); }\r",
											"            var jsonData =   resp.json();\r",
											"            var PermissionBundleResponce = [];\r",
											"            var keys = Object.keys(jsonData);\r",
											"            keys.forEach(function(key){\r",
											"                PermissionBundleResponce.push(jsonData[key]);\r",
											"            });\r",
											"           pm.variables.set('PermissionBundleResponce',PermissionBundleResponce)\r",
											"    })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenMOUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{PermissionBundleResponce}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/permissions/updateBundlesToRole",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"permissions",
										"updateBundlesToRole"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"var url = pm.environment.get(\"baseURI\");",
									"url = url.concat(\"/api/companies/platform-companies/search?companyName=Temporary_test\")",
									"",
									"pm.sendRequest({",
									"    url: url,",
									"    method: 'GET',",
									"    header: {",
									"        'Accept': 'application/json',",
									"        'Content-Type': 'application/json',",
									"        'x-platform-code':pm.environment.get(\"platformCode\"),",
									"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
									"      }",
									"}, ",
									"    function (err, resp) {",
									"            console.log(\"access Token\",pm.variables.get(\"accessToken\"))",
									"            if (err) {console.log(\"error :\" + err); }",
									"            var jsonData = resp.json(); ",
									"            for (var i = 0;i<jsonData.length ;i++) ",
									"                {        ",
									"                    pm.variables.set(\"companyIDPermission\",jsonData[i].id)",
									"                    pm.variables.set(\"companyNamePermission\",jsonData[i].name)",
									"                }",
									"            console.log('get companies==>',jsonData)",
									"",
									"var url = pm.environment.get(\"baseURI\");",
									"url = url.concat(\"/api/Companies/\"+pm.variables.get(\"companyIDPermission\")+\"/roles?productCode=MO&isActive=true\");",
									"",
									"    pm.sendRequest({",
									"    url: url,",
									"    method: 'GET',",
									"    header: {",
									"        'Accept': 'application/json',",
									"        'Content-Type': 'application/json',",
									"        'x-platform-code':pm.environment.get(\"platformCode\"),",
									"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
									"      }",
									"}, ",
									"    function (err, resp) {",
									"            if (err) {console.log(\"error :\" + err); }",
									"            var jsonData = resp.json();",
									"            for (var i = 0;i<jsonData.length ;i++) ",
									"                {",
									"                    pm.variables.set(\"roleId\",jsonData[i].roleId)",
									"                    pm.variables.set(\"productCode\",jsonData[i].productCode)",
									"                }",
									"                console.log('get product ===>',jsonData)",
									"    })",
									"})",
									"  "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Permission Enforcement for Participants_ENT-2137",
					"item": [
						{
							"name": "Get- Company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var randomNumber = Math.floor(Math.random() * (20 - 2 + 1) + 2)\r",
											"\r",
											"for (i = 0; i < jsonData.length; i++) {\r",
											"    if (jsonData[i].company.recordTypeId == 1) {\r",
											"        // pm.variables.set(\"companyId\", jsonData[randomNumber].companyId)\r",
											"        // pm.variables.set(\"localCom\", jsonData[randomNumber])\r",
											"        // console.log('Com data ==>',jsonData[i])\r",
											"        \r",
											"        break;\r",
											"    }\r",
											"}\r",
											"    var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/Companies/\" +  pm.variables.get(\"companyId\") + \"/entitlements\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        pm.test(\"Status code is 200\", function () {\r",
											"            pm.response.to.have.status(200);\r",
											"        });\r",
											"        var jsonData = resp.json();\r",
											"        var participantsData =  jsonData[0]\r",
											"        pm.variables.set(\"beforParticipantId\", participantsData.isActive)\r",
											"        if(participantsData.isActive == true){\r",
											"            isActive = false\r",
											"        }else{\r",
											"            isActive =  true\r",
											"        }\r",
											"        pm.variables.set(\"participantId\", participantsData.participantId)\r",
											"        pm.variables.set(\"isActive\", isActive)\r",
											"        pm.variables.set(\"companyId\", participantsData.companyId)\r",
											"        pm.variables.set(\"productCode\", participantsData.productCode)\r",
											"        pm.variables.set(\"roleId\", participantsData.roleId)\r",
											"        pm.variables.set(\"roleName\", participantsData.roleName)\r",
											"        pm.variables.set(\"productName\", participantsData.productName)\r",
											"\r",
											"        console.log('participantsData data==>',participantsData)\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var codes = pm.environment.get(\"product_codes\").toString().split(',');\r",
											"\r",
											"// console.log(\"Product codes: \" + codes);\r",
											"// console.log(\"Total Product Count: \" + codes.length);\r",
											"// pm.collectionVariables.set(\"productCount\", codes.length - 1);\r",
											"\r",
											"// var counter = parseInt(pm.collectionVariables.get('count'));\r",
											"// pm.collectionVariables.set('code', codes[counter]);\r",
											"// var currentCode = pm.collectionVariables.get('code');\r",
											"// console.log(\"current product code---->\" + currentCode);\r",
											"// console.log(\"Counter:\" + counter);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies?count=100&skip=0&includeInactive=true",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "count",
											"value": "100"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "includeInactive",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable Disable a participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"            pm.response.to.have.status(204);\r",
											"        });\r",
											"\r",
											"  var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/Companies/\" +  pm.variables.get(\"companyId\") + \"/entitlements\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"        var participantsData =  jsonData[0]\r",
											"        console.log('after participantsData==>',participantsData)\r",
											"        console.log('befor',pm.variables.get(\"beforParticipantId\"))\r",
											"        console.log('after',participantsData.isActive)\r",
											"    pm.test(\"Validate The User enable/disable a participant\", function(){ \r",
											"        pm.expect(participantsData.isActive).to.be.not.eql(pm.variables.get(\"beforParticipantId\"))\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"companyId\": {{companyId}},\r\n        \"isActive\": {{isActive}},\r\n        \"participantId\": {{participantId}},\r\n        \"productCode\": \"{{productCode}}\",\r\n        \"roleId\": {{roleId}},\r\n        \"roleName\": \"{{roleName}}\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/{{companyId}}/roles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{companyId}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke Enable Disable a participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"            pm.response.to.have.status(204);\r",
											"        });\r",
											"\r",
											"  var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/Companies/\" +  pm.variables.get(\"companyId\") + \"/entitlements\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        var jsonData = resp.json();\r",
											"        var participantsData =  jsonData[0]\r",
											"    pm.test(\"Validate The User enable/disable a participant\", function(){ \r",
											"        pm.expect(participantsData.isActive).to.be.eql(pm.variables.get(\"beforParticipantId\"))\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"companyId\": {{companyId}},\r\n        \"isActive\": {{beforParticipantId}},\r\n        \"participantId\": {{participantId}},\r\n        \"productCode\": \"{{productCode}}\",\r\n        \"roleId\": {{roleId}},\r\n        \"roleName\": \"{{roleName}}\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies/{{companyId}}/roles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies",
										"{{companyId}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get- Company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var randomNumber = Math.floor(Math.random() * (20 - 2 + 1) + 2)\r",
											"\r",
											"for (i = 0; i < jsonData.length; i++) {\r",
											"    if (jsonData[i].company.recordTypeId == 2 && jsonData[i].name.includes('SF')) {\r",
											"        pm.variables.set(\"companyId\", jsonData[randomNumber].companyId)\r",
											"        pm.variables.set(\"localCom\", jsonData[randomNumber])\r",
											"        console.log('Com data ==>',jsonData[i])\r",
											"        break;\r",
											"    }\r",
											"}\r",
											"    var url = pm.environment.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/Companies/\" +  pm.variables.get(\"companyId\") + \"/entitlements\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
											"      }\r",
											"}, \r",
											"    function (err, resp) {\r",
											"        if (err) {console.log(\"error :\" + err); }\r",
											"        pm.test(\"Status code is 200\", function () {\r",
											"            pm.response.to.have.status(200);\r",
											"        });\r",
											"        var jsonData = resp.json();\r",
											"        var participantsData =  jsonData[0]\r",
											"        pm.variables.set(\"beforParticipantId\", participantsData.isActive)\r",
											"        if(participantsData.isActive == true){\r",
											"            isActive = false\r",
											"        }else{\r",
											"            isActive =  true\r",
											"        }\r",
											"        pm.variables.set(\"participantId\", participantsData.participantId)\r",
											"        pm.variables.set(\"isActive\", isActive)\r",
											"        pm.variables.set(\"companyId\", participantsData.companyId)\r",
											"        pm.variables.set(\"productCode\", participantsData.productCode)\r",
											"        pm.variables.set(\"roleId\", participantsData.roleId)\r",
											"        pm.variables.set(\"roleName\", participantsData.roleName)\r",
											"        pm.variables.set(\"productName\", participantsData.productName)\r",
											"\r",
											"        console.log('participantsData data==>',participantsData)\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codes = pm.environment.get(\"product_codes\").toString().split(',');\r",
											"\r",
											"console.log(\"Product codes: \" + codes);\r",
											"console.log(\"Total Product Count: \" + codes.length);\r",
											"pm.collectionVariables.set(\"productCount\", codes.length - 1);\r",
											"\r",
											"var counter = parseInt(pm.collectionVariables.get('count'));\r",
											"pm.collectionVariables.set('code', codes[counter]);\r",
											"var currentCode = pm.collectionVariables.get('code');\r",
											"console.log(\"current product code---->\" + currentCode);\r",
											"console.log(\"Counter:\" + counter);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies?count=1000&skip=0&includeInactive=true",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "count",
											"value": "1000"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "includeInactive",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Allow Salesforce Companies to be added to Local Groups-2145",
					"item": [
						{
							"name": "Get- Company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"for(i=0; i< jsonData.length; i++)\r",
											"    { \r",
											"        if(jsonData[i].company.recordTypeId == 2 && jsonData[i].name.includes('SF'))\r",
											"        {\r",
											"            var salesforceIdCompany = jsonData[i]\r",
											"            var companyId = jsonData[i].companyId\r",
											"            console.log('data==>',salesforceIdCompany)\r",
											"            break;\r",
											"        }\r",
											"    }"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codes = pm.environment.get(\"product_codes\").toString().split(',');\r",
											"\r",
											"console.log(\"Product codes: \" + codes);\r",
											"console.log(\"Total Product Count: \" + codes.length);\r",
											"pm.collectionVariables.set(\"productCount\", codes.length - 1);\r",
											"\r",
											"var counter = parseInt(pm.collectionVariables.get('count'));\r",
											"pm.collectionVariables.set('code', codes[counter]);\r",
											"var currentCode = pm.collectionVariables.get('code');\r",
											"console.log(\"current product code---->\" + currentCode);\r",
											"console.log(\"Counter:\" + counter);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenPlatformUser}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/companies?count=1000&skip=0&includeInactive=true",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "count",
											"value": "1000"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "includeInactive",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Permission Bundle Mgmt ENT-886",
					"item": [
						{
							"name": "Add Permission Bundle",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var timeToday = moment.utc().format('DDMMYY');\r",
											"\r",
											"var cRandom = getRandomAlphaNumeric(2, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
											"function getRandomAlphaNumeric(len, chars) {\r",
											"    var result = '';\r",
											"    for (var i = len; i > 0; i--) {\r",
											"        result += chars[Math.floor(Math.random() * chars.length)];\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"var randomS = timeToday + \"_\" + cRandom;\r",
											"pm.variables.set(\"permissionBundleNameQA\", randomS);\r",
											"\r",
											"pm.variables.set(\"bundleTypeId\", 1); //1=company,2=Group,3=resource\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/permissions/catalog-values/\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    var permissionsArr = [];\r",
											"    for (i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].name.includes(\"ViewCompany\")) {\r",
											"            var body = {}\r",
											"            body[\"id\"] = jsonData[i].id;\r",
											"            body[\"name\"] = jsonData[i].name;\r",
											"            body[\"description\"] = jsonData[i].description;\r",
											"            body[\"permissionBundleAssociationCount\"] = jsonData[i].permissionBundleAssociationCount;\r",
											"            permissionsArr.push(body)\r",
											"        }      \r",
											"    }\r",
											"    console.log(permissionsArr);\r",
											"    console.log(permissionsArr.length);\r",
											"    pm.variables.set(\"permissionsArrCount\",permissionsArr.length)\r",
											"    pm.variables.set(\"permissionsArr\",JSON.stringify(permissionsArr))\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.variables.set(\"newPerBundleID\",jsonData.id)\r",
											"pm.variables.set(\"newPerBundleName\",jsonData.name)\r",
											"pm.variables.set(\"newPerBundleDescription\",jsonData.description)\r",
											"\r",
											"pm.test(\"To created permission bundle: \" + jsonData.id, function () \r",
											"{\r",
											"    pm.expect(jsonData.name).to.eql('EntlReg_'+pm.variables.get('permissionBundleNameQA'));\r",
											"    pm.expect(jsonData.permissions.length).to.eql(pm.variables.get(\"permissionsArrCount\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"EntlReg_{{permissionBundleNameQA}}\",\r\n    \"description\": \"EntlReg_{{permissionBundleNameQA}}\",\r\n    \"roles\": [],\r\n    \"productCode\": \"MO\",\r\n    \"bundleTypeId\": {{bundleTypeId}},\r\n    \"permissions\": {{permissionsArr}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/permissions/bundles",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"permissions",
										"bundles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Permission Bundle",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"newPerBundleID\",pm.variables.get(\"newPerBundleID\"))\r",
											"pm.variables.set(\"newPerBundleName\",pm.variables.get(\"newPerBundleName\"))\r",
											"pm.variables.set(\"newPerBundleDescription\",pm.variables.get(\"newPerBundleDescription\"))\r",
											"\r",
											"pm.variables.set(\"bundleTypeId\", 1); //1=company,2=Group,3=resource\r",
											"\r",
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/permissions/catalog-values/\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    var jsonData = res.json();\r",
											"    var permissionsArrUpdate = [];\r",
											"    var permissionsArrAdd = [];    \r",
											"    for (i = 0; i < jsonData.length; i++) {\r",
											"        if (jsonData[i].name.includes(\"ViewUser\")) {\r",
											"            var body = {}\r",
											"            body[\"id\"] = jsonData[i].id;\r",
											"            body[\"name\"] = jsonData[i].name;\r",
											"            body[\"description\"] = jsonData[i].description;\r",
											"            body[\"permissionBundleAssociationCount\"] = jsonData[i].permissionBundleAssociationCount;\r",
											"            permissionsArrAdd.push(body)\r",
											"        }\r",
											"    }\r",
											"\r",
											"    console.log(\"permissionsArrAdd--- \"+  JSON.stringify(permissionsArrAdd));\r",
											"    console.log(\"permissionsArrAdd Count ---\",+permissionsArrAdd.length);\r",
											"    console.log(\"permissionsArr--- \",+ JSON.parse(pm.variables.get(\"permissionsArr\")));\r",
											"    console.log(\"permissionsArr Count ---\",+ pm.variables.get(\"permissionsArrCount\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//------------------------------\r",
											"\r",
											"    permissionsArrUpdate = pm.variables.get(\"permissionsArr\").concat(JSON.stringify(permissionsArrAdd)) \r",
											"    // permissionsArrUpdate.push(pm.variables.get(\"permissionsArr\"))\r",
											"    // permissionsArrUpdate.push(JSON.stringify(permissionsArrAdd))\r",
											"    // permissionsArrUpdate.concat(JSON.parse(pm.variables.get(\"permissionsArr\")))\r",
											"    console.log(\"permissionsArrUpdate--- \"+(permissionsArrUpdate));\r",
											"\r",
											"\r",
											"    // pm.variables.get(\"permissionsArr\").push(permissionsArrAdd);\r",
											"    // console.log(\"permissionsArr FINAL--- \"+permissionsArr);\r",
											"    // console.log(\"permissionsArr FINAL count ----\"+permissionsArr.length);\r",
											"    // pm.variables.set(\"permissionsArrUpdateCount\", permissionsArr.length)\r",
											"    pm.variables.set(\"permissionsArrUpdate\", permissionsArrUpdate)\r",
											"\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"To created permission bundle: \" + jsonData.id, function () \r",
											"{\r",
											"    pm.expect(jsonData.name).to.eql(pm.variables.get('newPerBundleName'));\r",
											"    pm.expect(jsonData.permissions.length).to.eql(pm.variables.get(\"permissionsArrUpdateCount\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{newPerBundleName}}\",\r\n    \"description\": \"{{newPerBundleDescription}}\",\r\n    \"roles\": [],\r\n    \"productCode\": \"MO\",\r\n    \"bundleTypeId\": {{newPerBundleID}},\r\n    \"permissions\": {{permissionsArrUpdate}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/permissions/bundles/{{newPerBundleID}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"permissions",
										"bundles",
										"{{newPerBundleID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Permission Bundle",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"newPerBundleID\",pm.variables.get(\"newPerBundleID\"))\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenGlobalAdminUser}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{newPerBundleName}}\",\r\n    \"description\": \"{{newPerBundleDescription}}\",\r\n    \"roles\": [],\r\n    \"productCode\": \"MO\",\r\n    \"bundleTypeId\": {{newPerBundleID}},\r\n    \"permissions\": {{permissionsArrUpdate}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/permissions/bundles/{{newPerBundleID}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"permissions",
										"bundles",
										"{{newPerBundleID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User-Agreements",
					"item": [
						{
							"name": "Create-User-Agreements-ENT-2206",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/UserAgreements\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"    }\r",
											"},\r",
											"    function (err, res) {\r",
											"    var jsonDataUA = res.json();\r",
											"\r",
											"    console.log(jsonDataUA);\r",
											"    var productCodeUserAgree = ['AR','PUT','BI','DIGI','INBLOCK','INS','PARM','MO','ONB','PTS','SCF']\r",
											"    var codesUA = productCodeUserAgree.toString().split(',');\r",
											"    console.log(\"Product codes: \" + codesUA);\r",
											"    console.log(\"Total Product Count: \" + codesUA.length);\r",
											"    pm.variables.set(\"productCount1\", codesUA.length - 1);\r",
											"\r",
											"    var counter = 0;//parseInt(pm.collectionVariables.get('count1'));\r",
											"    pm.variables.set('codeA', codesUA[counter]);\r",
											"    console.log(\"current product code---->\" + pm.variables.get('codeA'));\r",
											"    console.log(\"Counter:\" + counter);\r",
											"\r",
											"    var url = pm.variables.get(\"baseURI\");\r",
											"    url = url.concat(\"/api/Products/\" + pm.variables.get('codeA') + \"/roles\");\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: url,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
											"            'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"        }\r",
											"    },\r",
											"        function (err, res) {\r",
											"            var jsonDataR = res.json();\r",
											"\r",
											"            console.log(jsonDataR);\r",
											"            var flag = 0;\r",
											"            for(i=0; i< jsonDataR.length; i++ )\r",
											"            {\r",
											"                for(j=i; j< jsonDataUA.length; j++)\r",
											"                {\r",
											"                    if(jsonDataR[i].roleName == jsonDataUA[j].roleName && jsonDataR[i].productCode == jsonDataUA[j].productCode)\r",
											"                    console.log(\"*** UserAgreement present ***\")\r",
											"                    flag++;\r",
											"                }\r",
											"            }\r",
											"\r",
											"            \r",
											"            var limit = parseInt(pm.variables.get('productCount1'));\r",
											"            var found = false;\r",
											"            console.log(\"limit:\" + limit);\r",
											"            console.log(\"counter:\" + counter);\r",
											"            if (counter < limit && !found) \r",
											"            {\r",
											"                console.log(\"setting next request\");\r",
											"                postman.setNextRequest(\"Get Products/{productCode}/roles-ALL products\");\r",
											"                pm.collectionVariables.unset(\"count1\");\r",
											"                pm.collectionVariables.set(\"count1\", parseInt(counter) + 1);\r",
											"            } \r",
											"            else if (counter === limit)\r",
											"            {\r",
											"                console.log(\"Condition match! Execution loop completed\");\r",
											"                pm.collectionVariables.set(\"count1\", 0);\r",
											"                pm.collectionVariables.set(\"code\", pm.environment.get(\"productCode\"));\r",
											"                console.log(\"Counter reset to \" + pm.collectionVariables.get(\"count1\"));\r",
											"            }\r",
											"\r",
											"        });\r",
											"    });\r",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "productCode",
											"value": "{{productCodeUserAgree}}",
											"type": "text"
										},
										{
											"key": "roleId",
											"value": "{{roleIdUserAgree}}",
											"type": "text"
										},
										{
											"key": "description",
											"value": "API Regression Test",
											"type": "text"
										},
										{
											"key": "userAgreementDocumentTypeId",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/api/UserAgreements",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"UserAgreements"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create-User-Agreements-ENT-2206 Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"baseURI\");\r",
											"url = url.concat(\"/api/UserAgreements\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Accept': 'application/json',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
											"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"    }\r",
											"},\r",
											"    function (err, res) {\r",
											"    var jsonDataUA = res.json();\r",
											"\r",
											"    console.log(jsonDataUA);\r",
											"    var productCodeUserAgree = ['AR','PUT','BI','DIGI','INBLOCK','INS','PARM','MO','ONB','PTS','SCF']\r",
											"    var codesUA = productCodeUserAgree.toString().split(',');\r",
											"    console.log(\"Product codes: \" + codesUA);\r",
											"    console.log(\"Total Product Count: \" + codesUA.length);\r",
											"    pm.variables.set(\"productCount1\", codesUA.length - 1);\r",
											"\r",
											"    var counter = 0;//parseInt(pm.collectionVariables.get('count1'));\r",
											"    pm.variables.set('codeA', codesUA[counter]);\r",
											"    console.log(\"current product code---->\" + pm.variables.get('codeA'));\r",
											"    console.log(\"Counter:\" + counter);\r",
											"\r",
											"    // for(x=0; x< codesUA.length; x++)\r",
											"    // {\r",
											"        while(counter < codesUA.length)\r",
											"        {\r",
											"            var url = pm.variables.get(\"baseURI\");\r",
											"            url = url.concat(\"/api/Products/\" + pm.variables.get('codeA') + \"/roles\");\r",
											"\r",
											"            pm.sendRequest({\r",
											"                url: url,\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'Accept': 'application/json',\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
											"                    'x-platform-code':pm.environment.get(\"platformCode\"),\r",
											"                }\r",
											"            },\r",
											"                function (err, res) {\r",
											"                    var jsonDataR = res.json();\r",
											"\r",
											"                    console.log(jsonDataR);\r",
											"                    var flag = 0;\r",
											"                    for(i=0; i< jsonDataR.length; i++ )\r",
											"                    {\r",
											"                        for(j=i; j< jsonDataUA.length; j++)\r",
											"                        {\r",
											"                            if(jsonDataR[i].roleName == jsonDataUA[j].roleName && jsonDataR[i].productCode == jsonDataUA[j].productCode)\r",
											"                            {\r",
											"                                console.log(\"*** UserAgreement present ***\")\r",
											"                                flag++;\r",
											"                            }\r",
											"                            else\r",
											"                            {\r",
											"                                flag = 0;\r",
											"                                finalprodCode = jsonDataR[i].roleName ;\r",
											"                                finalrolename =  jsonDataR[i].productCode ;\r",
											"                            }\r",
											"                        }\r",
											"                    }\r",
											"                    });\r",
											"                    counter++;\r",
											"                }\r",
											"        \r",
											"           \r",
											"\r",
											"        \r",
											"    });\r",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "productCode",
											"value": "{{productCodeUserAgree}}",
											"type": "text"
										},
										{
											"key": "roleId",
											"value": "{{roleIdUserAgree}}",
											"type": "text"
										},
										{
											"key": "description",
											"value": "API Regression Test",
											"type": "text"
										},
										{
											"key": "userAgreementDocumentTypeId",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/api/UserAgreements",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"UserAgreements"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Solai",
					"item": [
						{
							"name": "Sample",
							"item": [
								{
									"name": "Verifying the Created Platform",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"To check MFA checkbox is Enabled or not : \"+jsonData.mfaenabled, function () {\r",
													"    if(jsonData.mfaenabled===true){\r",
													"    console.log(\"MFA is Enabled\");\r",
													"    }else{\r",
													"        console.log(\"MFA is Disabled\")\r",
													"    }});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/platforms/{{NewUserCode}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"platforms",
												"{{NewUserCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verifying the Updated Platform",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var discountMarginPrecision1 = jsonData.discountMarginPrecision\r",
													"pm.test(\"To check existing platform got updated: \"+jsonData.name, function () {\r",
													"    pm.expect(jsonData.importsEnabled).to.eql(false);\r",
													"    pm.expect(jsonData.discountMarginPrecision).to.eql(discountMarginPrecision1);\r",
													"\r",
													"});\r",
													"pm.test(\"To check new platform decimalPrecision is not null: \" + jsonData.decimalPrecision, function () {\r",
													"    pm.expect(jsonData.decimalPrecision).to.be.not.eql(null);\r",
													"    pm.expect(jsonData.helpText).to.be.not.eql(null);\r",
													"    pm.expect(jsonData.replyToEmailAddress).to.be.not.eql(null);\r",
													"\r",
													"});\r",
													"pm.test(\"To check MFA checkbox is Enabled or not : \"+jsonData.mfaenabled, function () {\r",
													"    if (jsonData.mfaenabled === true) {\r",
													"        console.log(\"MFA is Enabled\");\r",
													"    } else {\r",
													"        console.log(\"MFA is Disabled\")\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/platforms/{{NewUserCode}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"platforms",
												"{{NewUserCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/users\");\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
													"      }\r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"    pm.variables.set(\"UseriD\",jsonData[Math.floor(Math.random()*jsonData.length)].id);\r",
													"    console.log(pm.variables.get(\"UseriD\"));\r",
													"      \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/users/{{UseriD}}?command=clear-mfa-claims",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"users",
												"{{UseriD}}"
											],
											"query": [
												{
													"key": "command",
													"value": "clear-mfa-claims"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "UserAgreement",
							"item": [
								{
									"name": "Add UserAgreement-Activity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var productCodes = [\"AR\", \"PUT\", \"MO\", \"DIGI\", \"INBLOCK\", \"INMATCH\", \"INS\", \"ONB\", \"SCF\"]\r",
													"for (i = 0; i < productCodes.length; i++) {\r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/Products/\" + productCodes[i] + \"/roles\");\r",
													"\r",
													"    pm.sendRequest({\r",
													"        url: url,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\")\r",
													"        }\r",
													"    },\r",
													"        function (err, res) {\r",
													"            var jsonData = res.json();\r",
													"            // console.log(\"json data =====\",jsonData);\r",
													"            for (j = 0; j < jsonData.length; j++) {\r",
													"                pm.variables.set(\"prodCode\", jsonData[j].productCode);\r",
													"                pm.variables.set(\"prodid\", jsonData[j].id);\r",
													"                pm.variables.set(\"prodrN\", jsonData[j].roleName);\r",
													"                console.log(jsonData[j].id);\r",
													"                console.log(jsonData[j].productCode);\r",
													"                console.log(jsonData[j].roleName);\r",
													"\r",
													"\r",
													"                var url1 = pm.variables.get(\"baseURI_entitlement\");\r",
													"                url1 = url1.concat(\"/api/UserAgreements\");\r",
													"\r",
													"                pm.sendRequest({\r",
													"                    url: url1,\r",
													"                    method: 'GET',\r",
													"                    header: {\r",
													"                        'Accept': 'application/json',\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"                        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"                    }\r",
													"                },\r",
													"                    function (err, res) {\r",
													"                        var jsonData1 = res.json();\r",
													"                        var flag = 0;\r",
													"\r",
													"                        for (k = 0; k < jsonData1.length; k++) {\r",
													"                            var prCode = pm.variables.get(\"prodCode\");\r",
													"                            var rN = pm.variables.get(\"prodrN\");\r",
													"                            var prId = pm.variables.get(\"prodid\");\r",
													"\r",
													"                            if (jsonData1[k].productCode == prCode && jsonData1[k].roleName == rN) {\r",
													"                                flag++;\r",
													"\r",
													"                            }\r",
													"                        }\r",
													"                        if (flag == 0) {\r",
													"                            pm.variables.set(\"ProductCode\",\"AR\");\r",
													"                            pm.variables.set(\"Roleid\",10);\r",
													"                            console.log(\"success\")\r",
													"                        }\r",
													"                    });\r",
													"            }\r",
													"        });\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// pm.test(\"Status code is 201\", function(){\r",
													"//     pm.response.to.have.status(201);\r",
													"// })"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "productCode",
													"value": "{{ProductCode}}",
													"type": "text"
												},
												{
													"key": "roleId",
													"value": "{{Roleid}}",
													"type": "text"
												},
												{
													"key": "description",
													"value": "Adding for first Time",
													"type": "text"
												},
												{
													"key": "userAgreementDocumentTypeId",
													"value": "1",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Liquidx/LiquidX/Entitlements/Manual/ALL Sprint/User Argeement docs/I am a user agreement - AR Admin.pdf"
												}
											]
										},
										"url": {
											"raw": "{{baseURI_entitlement}}/api/UserAgreements",
											"host": [
												"{{baseURI_entitlement}}"
											],
											"path": [
												"api",
												"UserAgreements"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Duplicate UserAgreement-Activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function(){\r",
													"    pm.response.to.have.status(409);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.get(\"ProductCode\");\r",
													"pm.variables.get(\"Roleid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/12813/Downloads/I am a user agreement.pdf"
												},
												{
													"key": "productCode",
													"value": "{{ProductCode}}",
													"type": "text"
												},
												{
													"key": "roleId",
													"value": "{{Roleid}}",
													"type": "text"
												},
												{
													"key": "description",
													"value": "Adding for Second Time (Duplicate)",
													"type": "text"
												},
												{
													"key": "userAgreementDocumentTypeId",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseURI}}/api/UserAgreements",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"UserAgreements"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var productCodes = [\"AR\", \"PUT\", \"MO\", \"DIGI\", \"INBLOCK\", \"INMATCH\", \"INS\", \"ONB\", \"SCF\"];\r",
													"for (i = 0; i < productCodes.length; i++) {\r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/Products/\" + productCodes[i] + \"/roles\");\r",
													"    pm.sendRequest({\r",
													"        url: url,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\")\r",
													"        }\r",
													"    },\r",
													"        function (err, res) {\r",
													"            console.log(\"1st function  Roles\")\r",
													"            var jsonData = res.json();\r",
													"            console.log(\"json data =====\", jsonData);\r",
													"\r",
													"            for (var j = 0; j < jsonData.length; j++) {\r",
													"                console.log(\"start j\")\r",
													"                pm.variables.set(\"prodCode\", jsonData[j].productCode);\r",
													"                pm.variables.set(\"prodid\", jsonData[j].id);\r",
													"                pm.variables.set(\"prodrN\", jsonData[j].roleName);\r",
													"                console.log(jsonData[j].id);\r",
													"                console.log(jsonData[j].productCode);\r",
													"                console.log(jsonData[j].roleName);\r",
													"                console.log(\"End J\");\r",
													"            \r",
													"                // var url1 = pm.environment.get(\"baseURI\");\r",
													"                // url1 = url1.concat(\"/api/UserAgreements\");\r",
													"                pm.sendRequest({\r",
													"                    url: pm.environment.get(\"baseURI\").concat(\"/api/UserAgreements\"),\r",
													"                    method: 'GET',\r",
													"                    header: {\r",
													"                        'Accept': 'application/json',\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"                        'x-platform-code': pm.environment.get(\"platformCode\")\r",
													"                    }\r",
													"                },\r",
													"                    function (err, res) {\r",
													"                        console.log(\"2nd function  UserAgreements\")\r",
													"                        var jsonData1 = res.json();\r",
													"                        // var flag = 0;\r",
													"                        for (k = 0; k < jsonData1.length; k++) {\r",
													"                            var prCode = pm.variables.get(\"prodCode\");\r",
													"                            var rN = pm.variables.get(\"prodrN\");\r",
													"                            // var prId = pm.variables.get(\"prodid\");\r",
													"                            if (jsonData1[k].productCode == prCode && jsonData1[k].roleName == rN) {\r",
													"                                // flag++;\r",
													"                                console.log(\"Already Created\")\r",
													"                            }\r",
													"\r",
													"                            }\r",
													"                               \r",
													"                         if (flag == 0) {\r",
													"                        //     // pm.variables.set(\"ProductCode\", prCode);\r",
													"                        //     // pm.variables.set(\"Roleid\", prId);\r",
													"                            console.log(\"Create\")\r",
													"                        }\r",
													"\r",
													"                    });\r",
													"            }\r",
													"\r",
													"\r",
													"        });\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/UserAgreements",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"UserAgreements"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var url = pm.environment.get(\"baseURI\");\r",
													"url = url.concat(\"/api/UserAgreements\");\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\")\r",
													"    }\r",
													"},\r",
													"    function (err, res) {\r",
													"        console.log(\"1st function  UserAgreements\")\r",
													"        var jsonData = res.json();\r",
													"        for (i = 0; i < jsonData.length; i++) {\r",
													"            var prodCodes = pm.variables.set(\"prodCode\", jsonData[i].productCode);\r",
													"            var rN = pm.variables.set(\"prodrN\", jsonData[i].roleName);\r",
													"            console.log(jsonData[i].productCode)\r",
													"            console.log(jsonData[i].roleName)\r",
													"\r",
													"            var productCodes = [\"AR\", \"PUT\", \"MO\", \"DIGI\", \"INBLOCK\", \"INMATCH\", \"INS\", \"ONB\", \"SCF\"];\r",
													"            for (i = 0; i < productCodes.length; i++) {\r",
													"                var url1 = pm.variables.get(\"baseURI\");\r",
													"                url1 = url1.concat(\"/api/Products/\" + productCodes[i] + \"/roles\");\r",
													"                pm.sendRequest({\r",
													"                    url: url1,\r",
													"                    method: 'GET',\r",
													"                    header: {\r",
													"                        'Accept': 'application/json',\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"                        'x-platform-code': pm.environment.get(\"platformCode\")\r",
													"                    }\r",
													"                },\r",
													"                    function (err, res) {\r",
													"                        console.log(\"2nd function  Roles\")\r",
													"                        var jsonData1 = res.json();\r",
													"                        console.log(\"json data =====\", jsonData1);\r",
													"                       \r",
													"\r",
													"\r",
													"\r",
													"                    });\r",
													"            }\r",
													"            }\r",
													"\r",
													"    });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/UserAgreements",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"UserAgreements"
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var productCodes = [\"AR\", \"PUT\", \"MO\", \"DIGI\", \"INBLOCK\", \"INMATCH\", \"INS\", \"ONB\", \"SCF\"];\r",
													"for (i = 0; i < productCodes.length; i++) {\r",
													"    console.log(productCodes[i]);\r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/Products/\" + productCodes[i] + \"/roles\");\r",
													"    console.log(url);\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"        url: url,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"            'x-platform-code': pm.environment.get(\"platformCode\")\r",
													"        }\r",
													"    },\r",
													"        function (err, res) {\r",
													"\r",
													"//   postman.setNextRequest(pm.environment.get(\"baseURI\").concat(\"/api/UserAgreements\"))\r",
													"   \r",
													"        console.log(\"1st function  Roles\")\r",
													"        // var responseJSONdata = JSON.parse(responseBody);\r",
													"        // console.log(jsonData)\r",
													"\r",
													"\r",
													"        })\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													" \r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"//             for (var j = 0; j < jsonData.length; j++) {\r",
													"//                 console.log(\"start j\")\r",
													"\r",
													"//                 pm.variables.set(\"prodCode\", jsonData[j].productCode);\r",
													"//                 pm.variables.set(\"prodid\", jsonData[j].id);\r",
													"//                 pm.variables.set(\"prodrN\", jsonData[j].roleName);\r",
													"//                 console.log(jsonData[j].id);\r",
													"//                 console.log(jsonData[j].productCode);\r",
													"//                 console.log(jsonData[j].roleName);\r",
													"//                 console.log(\"End J\");\r",
													"//             postman.setNextRequest(pm.variables.get(\"baseURI\")+\"/api/UserAgreements\");\r",
													"\r",
													"//             console.log(\"Start next request\")\r",
													"//                 // var url1 = pm.environment.get(\"baseURI\");\r",
													"//                 // url1 = url1.concat(\"/api/UserAgreements\");\r",
													"//                 // pm.sendRequest({\r",
													"//                 //     url: pm.environment.get(\"baseURI\").concat(\"/api/UserAgreements\"),\r",
													"//                 //     method: 'GET',\r",
													"//                 //     header: {\r",
													"//                 //         'Accept': 'application/json',\r",
													"//                 //         'Content-Type': 'application/json',\r",
													"//                 //         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"//                 //         'x-platform-code': pm.environment.get(\"platformCode\")\r",
													"//                 //     }\r",
													"//                 // },\r",
													"//                 //     function (err, res) {\r",
													"//                         console.log(\"2nd function  UserAgreements\")\r",
													"//                         var jsonData1 = res.json();\r",
													"//                         // var flag = 0;\r",
													"//                         for (k = 0; k < jsonData1.length; k++) {\r",
													"//                             var prCode = pm.variables.get(\"prodCode\");\r",
													"//                             var rN = pm.variables.get(\"prodrN\");\r",
													"//                             // var prId = pm.variables.get(\"prodid\");\r",
													"//                             if (jsonData1[k].productCode == prCode && jsonData1[k].roleName == rN) {\r",
													"//                                 // flag++;\r",
													"//                                 console.log(\"Already Created\")\r",
													"//                             }\r",
													"\r",
													"//                             }\r",
													"\r",
													"//                          if (flag == 0) {\r",
													"//                         //     // pm.variables.set(\"ProductCode\", prCode);\r",
													"//                         //     // pm.variables.set(\"Roleid\", prId);\r",
													"//                             console.log(\"Create\")\r",
													"//                         }\r",
													"\r",
													"//                     // });\r",
													"//             }\r",
													"\r",
													"\r",
													"//         });\r",
													"\r",
													"// }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/UserAgreements",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"UserAgreements"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add UserAgreement-Activity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var url = pm.variables.get(\"baseURI_entitlement\");\r",
													"url = url.concat(\"/api/UserAgreements\");\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"    }\r",
													"},\r",
													"    function (err, res) {\r",
													"        var jsonData = res.json();\r",
													"        var flag = 0;\r",
													"        for (i = 0; i < jsonData.length; i++) {\r",
													"\r",
													"            if (jsonData[i].productCode == \"SCF\" && jsonData[i].roleName == \"Buyer\") {\r",
													"                flag++;\r",
													"                \r",
													"            }\r",
													"        }\r",
													"        if (flag == 0) {\r",
													"            // pm.variables.set(\"ProductCode\",\"SCF\");\r",
													"            // pm.variables.set(\"Roleid\",1);\r",
													"            console.log(\"success\")\r",
													"        }\r",
													"\r",
													"\r",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "productCode",
													"value": "{{ProductCode}}",
													"type": "text"
												},
												{
													"key": "roleId",
													"value": "{{Roleid}}",
													"type": "text"
												},
												{
													"key": "description",
													"value": "Adding for first Time",
													"type": "text"
												},
												{
													"key": "userAgreementDocumentTypeId",
													"value": "1",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/12813/Downloads/I am a user agreement.pdf"
												}
											]
										},
										"url": {
											"raw": "{{baseURI}}/api/UserAgreements",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"UserAgreements"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit UserAgreement Activity",
							"item": [
								{
									"name": "Toggle-UserAgreement_Activity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/UserAgreements\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"        'x-platform-code':pm.environment.get(\"platformCode\"),\r",
													"    }\r",
													"},\r",
													"    function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"    var random = Math.floor(Math.random() * jsonData.length);\r",
													"    pm.variables.set(\"userAgreementId\",jsonData[7].userAgreementId);\r",
													"    console.log(jsonData[7].userAgreementId);\r",
													"    console.log(random);\r",
													"\r",
													"    pm.variables.set(\"IsActive\",jsonData[7].isActive);\r",
													"    if(jsonData[7].isActive == false){\r",
													"        pm.variables.set(\"condition\",true)\r",
													"    }else{\r",
													"        pm.variables.set(\"condition\",false)\r",
													"    }\r",
													"\r",
													"    })\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isActive\": {{condition}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/UserAgreements/{{userAgreementId}}/activity",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"UserAgreements",
												"{{userAgreementId}}",
												"activity"
											]
										}
									},
									"response": []
								},
								{
									"name": "View-UserAgreement_Activity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/UserAgreements\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"    }\r",
													"},\r",
													"    function (err, res) {\r",
													"        var jsonData = res.json();\r",
													"        var random = Math.floor(Math.random() * jsonData.length);\r",
													"        pm.variables.set(\"userAgreementDocumentId\", jsonData[random].userAgreementDocumentId);\r",
													"        console.log(jsonData[random].userAgreementDocumentId);\r",
													"        console.log(random);\r",
													"    })\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function(){\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													"pm.test(\"Content-Type header is application/pdf\", function(){\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/pdf');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Disposition header is present\", function(){\r",
													"  pm.response.to.have.header(\"Content-Disposition\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/UserAgreements/file/{{userAgreementDocumentId}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"UserAgreements",
												"file",
												"{{userAgreementDocumentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit_MajorVersion-UserAgreement_Activity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function greet(){\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/UserAgreements\");\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"    }\r",
													"},\r",
													"    function (err, res) {\r",
													"        var jsonData = res.json();\r",
													"        var random = Math.floor(Math.random() * jsonData.length);\r",
													"        pm.variables.set(\"userAgreementID\",jsonData[random].userAgreementId );\r",
													"        console.log(jsonData[random].userAgreementId);\r",
													"        pm.variables.set(\"condition\", true);\r",
													"        var moment = require('moment');\r",
													"        var timeToday = moment.utc().format('DDMMYY');\r",
													"        pm.variables.set(\"Description\", jsonData[random].description + \"_\" + timeToday);\r",
													"        pm.variables.set(\"majorVersion\", jsonData[random].majorVersion);\r",
													"        pm.variables.set(\"minorVersion\", jsonData[random].minorVersion);\r",
													"        pm.variables.set(\"ProductCode\",jsonData[random].productCode);\r",
													"        pm.variables.set(\"RoleName\",jsonData[random].roleName);\r",
													"    })\r",
													"\r",
													"}\r",
													"setTimeout(greet,5000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/UserAgreements\");\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"    }\r",
													"},\r",
													"    function (err, res) {\r",
													"        var jsonData = res.json();\r",
													"        var userAgreementId = pm.variables.get(\"userAgreementID\")\r",
													"        for (i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].userAgreementId == userAgreementId) {\r",
													"                var major = pm.variables.get(\"majorVersion\");\r",
													"                var minor = pm.variables.get(\"minorVersion\");\r",
													"                pm.test(\"UserAgreements Before Updating : \" + major + \".\" + minor + \" UserAgreements After Updating : \" + jsonData[i].majorVersion + \".\" + jsonData[i].minorVersion, function () {\r",
													"                    pm.expect(jsonData[i].majorVersion).to.eql(major + 1);\r",
													"                })\r",
													"\r",
													"                var productcode = pm.variables.get(\"ProductCode\");\r",
													"                var rolename = pm.variables.get(\"RoleName\");\r",
													"                var description = pm.variables.get(\"Description\")\r",
													"                pm.test(\"ProductCode/RoleName : \" + productcode + \" / \" + rolename, function () {\r",
													"                    pm.expect(jsonData[i].description).to.eql(description);\r",
													"                })\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"    })\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "This is the pdf file to upload",
													"type": "file",
													"src": "/C:/Users/12813/Downloads/I am a user agreement.pdf"
												},
												{
													"key": "isMajorRevision",
													"value": "{{condition}}",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{Description}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseURI}}/api/UserAgreements/{{userAgreementID}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"UserAgreements",
												"{{userAgreementID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit_MajorVersion-UserAgreement_Activity Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// var url = pm.variables.get(\"baseURI\");\r",
													"// url = url.concat(\"/api/UserAgreements\");\r",
													"// pm.sendRequest({\r",
													"//     url: url,\r",
													"//     method: 'GET',\r",
													"//     header: {\r",
													"//         'Accept': 'application/json',\r",
													"//         'Content-Type': 'application/json',\r",
													"//         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"//         'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"//     }\r",
													"// },\r",
													"//     function (err, res) {\r",
													"//         var jsonData = res.json();\r",
													"//         var random = Math.floor(Math.random() * jsonData.length);\r",
													"//         pm.variables.set(\"userAgreementDocumentId\", jsonData[random].userAgreementDocumentId);\r",
													"//         console.log(jsonData[random].userAgreementDocumentId);\r",
													"//         console.log(random);\r",
													"//         pm.variables.set(\"condition\", true);\r",
													"//         pm.variables.set(\"Description\", jsonData[random].description + \"_updated\");\r",
													"//         pm.variables.set(\"majorVersion\", jsonData[random].majorVersion);\r",
													"//     })\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													"// var url = pm.variables.get(\"baseURI\");\r",
													"// url = url.concat(\"/api/UserAgreements\");\r",
													"// pm.sendRequest({\r",
													"//     url: url,\r",
													"//     method: 'GET',\r",
													"//     header: {\r",
													"//         'Accept': 'application/json',\r",
													"//         'Content-Type': 'application/json',\r",
													"//         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"//         'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"//     }\r",
													"// },\r",
													"//     function (err, res) {\r",
													"//         var jsonData = res.json();\r",
													"//         var userDocumentId = pm.variables.get(\"userAgreementId\")\r",
													"//         for (i = 0; i < jsonData.length; i++) {\r",
													"//             if (jsonData[i].userAgreementDocumentId === userDocumentId) {\r",
													"//                 var major = pm.variables.get(\"majorVersion\");\r",
													"//                 pm.test(\"To check Version got updated\", function () {\r",
													"//                     pm.expect(jsonData[i].majorVersion).to.eql(major + 1)\r",
													"//                 })\r",
													"//             }\r",
													"//         }\r",
													"\r",
													"//     })\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "This is the pdf file to upload",
													"type": "file",
													"src": "/C:/Users/12813/Downloads/I am a user agreement.pdf"
												},
												{
													"key": "isMajorRevision",
													"value": "true",
													"type": "text"
												},
												{
													"key": "description",
													"value": "test updated",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseURI}}/api/UserAgreements/2f0d94aa-e92a-45eb-b07b-a3e6c4ffcfe7",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"UserAgreements",
												"2f0d94aa-e92a-45eb-b07b-a3e6c4ffcfe7"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit_MinorVersion-UserAgreement_Activity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/UserAgreements\");\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"    }\r",
													"},\r",
													"    function (err, res) {\r",
													"        var jsonData = res.json();\r",
													"        var random = Math.floor(Math.random() * jsonData.length);\r",
													"        pm.variables.set(\"userAgreementiD\", jsonData[random].userAgreementId);\r",
													"        console.log(jsonData[random].userAgreementId);\r",
													"        pm.variables.set(\"condition\", false);\r",
													"        var moment = require('moment');\r",
													"        var timeToday = moment.utc().format('DDMMYY');\r",
													"        pm.variables.set(\"Description1\", jsonData[random].description + \"_\" + timeToday);\r",
													"        pm.variables.set(\"majorVersion1\", jsonData[random].majorVersion);\r",
													"        pm.variables.set(\"minorVersion1\", jsonData[random].minorVersion);\r",
													"        pm.variables.set(\"ProductCode1\", jsonData[random].productCode);\r",
													"        pm.variables.set(\"RoleName1\", jsonData[random].roleName);\r",
													"    })\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/UserAgreements\");\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"    }\r",
													"},\r",
													"    function (err, res) {\r",
													"        var jsonData = res.json();\r",
													"        var userAgreementId = pm.variables.get(\"userAgreementiD\")\r",
													"        for (i = 0; i < jsonData.length; i++) {\r",
													"            if (jsonData[i].userAgreementId === userAgreementId) {\r",
													"                var major = pm.variables.get(\"majorVersion1\");\r",
													"                var minor = pm.variables.get(\"minorVersion1\");\r",
													"                pm.test(\"UserAgreements Before Updating : \" + major + \".\" + minor + \" UserAgreements After Updating : \" + jsonData[i].majorVersion + \".\" + jsonData[i].minorVersion, function () {\r",
													"                    pm.expect(jsonData[i].minorVersion).to.eql(minor + 1);\r",
													"                })\r",
													"\r",
													"                var productcode = pm.variables.get(\"ProductCode1\");\r",
													"                var rolename = pm.variables.get(\"RoleName1\");\r",
													"                var description = pm.variables.get(\"Description1\")\r",
													"                pm.test(\"ProductCode/RoleName : \" + productcode + \" / \" + rolename, function () {\r",
													"                    pm.expect(jsonData[i].description).to.eql(description);\r",
													"                })\r",
													"            }\r",
													"\r",
													"        }\r",
													"\r",
													"    })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/12813/Desktop/UserAgreement.pdf"
												},
												{
													"key": "isMajorRevision",
													"value": "{{condition}}",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{Description1}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseURI}}/api/UserAgreements/{{userAgreementiD}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"UserAgreements",
												"{{userAgreementiD}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DocumentId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code is 200\", function(){\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.variables.set(\"DocumentId\", jsonData[0].documentId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://qa.liquidx.com/platform_api_url/api/user-agreements",
											"protocol": "https",
											"host": [
												"qa",
												"liquidx",
												"com"
											],
											"path": [
												"platform_api_url",
												"api",
												"user-agreements"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserAgreementDocument",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.get(\"userAgreementDocumentId\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code is 200\", function(){\r",
													"    pm.response.to.have.status(200);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/UserAgreements/{{userAgreementDocumentId}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"UserAgreements",
												"{{userAgreementDocumentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get SignedUserAgreements",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.get(\"DocumentId\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code is 200\", function(){\r",
													"    pm.response.to.have.status(200);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI_plat}}/api/SignedUserAgreements/{{DocumentId}}",
											"host": [
												"{{baseURI_plat}}"
											],
											"path": [
												"api",
												"SignedUserAgreements",
												"{{DocumentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Agree-SignedUserAgreements",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.get(\"DocumentId\");\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/users?count=1000000&skip=0&productCode=MO\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer '+ pm.environment.get(\"accessTokenPlatformUser\")\r",
													"      }\r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"    for(i=0;i<jsonData.length;i++){\r",
													"        if(jsonData[i].userName == pm.environment.get(\"platformUser\")){\r",
													"            pm.variables.set(\"Signature\", jsonData[i].firstName+\" \"+jsonData[i].lastName)\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var status = pm.variables.get(\"IsActive\");\r",
													"var userAgreementId = pm.variables.get(\"userAgreementId\");\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/UserAgreements/\" + userAgreementId + \"/activity\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"            \"isActive\": status\r",
													"        }\r",
													"    }\r",
													"},\r",
													"    function (err, res) {\r",
													"        pm.test(\"Status code is 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);\r",
													"        })\r",
													"\r",
													"\r",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"signature\": \"{{Signature}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/SignedUserAgreements/{{DocumentId}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"SignedUserAgreements",
												"{{DocumentId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Duplicate Edit UserAgreement Activity Copy",
							"item": [
								{
									"name": "Edit_MajorVersion-UserAgreement_Activity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/UserAgreements\");\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"    }\r",
													"},\r",
													"    function (err, res) {\r",
													"        var jsonData = res.json();\r",
													"        var random = Math.floor(Math.random() * jsonData.length);\r",
													"        var uaid = \"1d3b1846-3090-40c9-855c-06a01b04b4a7\";\r",
													"        pm.variables.set(\"userAgreementId\", uaid);\r",
													"        pm.variables.set(\"condition\", true);\r",
													"\r",
													"    })\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "This is the pdf file to upload",
													"type": "file",
													"src": "/C:/Users/12813/Downloads/I am a user agreement.pdf"
												},
												{
													"key": "isMajorRevision",
													"value": "{{condition}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseURI}}/api/UserAgreements/{{userAgreementId}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"UserAgreements",
												"{{userAgreementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Toggle-UserAgreement_Activity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uaid = \"1d3b1846-3090-40c9-855c-06a01b04b4a7\";\r",
													"pm.variables.set(\"userAgreementId\", uaid);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isActive\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/UserAgreements/{{userAgreementId}}/activity",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"UserAgreements",
												"{{userAgreementId}}",
												"activity"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DocumentId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code is 200\", function(){\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.variables.set(\"DocumentId\", jsonData[0].documentId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://qa.liquidx.com/platform_api_url/api/user-agreements",
											"protocol": "https",
											"host": [
												"qa",
												"liquidx",
												"com"
											],
											"path": [
												"platform_api_url",
												"api",
												"user-agreements"
											]
										}
									},
									"response": []
								},
								{
									"name": "Agree-SignedUserAgreements",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.get(\"DocumentId\");\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/users?count=1000000&skip=0&productCode=MO\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
													"        'Authorization': 'bearer '+ pm.environment.get(\"accessTokenPlatformUser\")\r",
													"      }\r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"    for(i=0;i<jsonData.length;i++){\r",
													"        if(jsonData[i].userName == pm.environment.get(\"platformUser\")){\r",
													"            pm.variables.set(\"Signature\", jsonData[i].firstName+\" \"+jsonData[i].lastName)\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var userAgreementId = \"1d3b1846-3090-40c9-855c-06a01b04b4a7\";\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/UserAgreements/\" + userAgreementId + \"/activity\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\"),\r",
													"        'x-platform-code': pm.environment.get(\"platformCode\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: {\r",
													"            \"isActive\": false\r",
													"        }\r",
													"    }\r",
													"},\r",
													"    function (err, res) {\r",
													"        pm.test(\"Status code is 200\", function () {\r",
													"            pm.expect(res.code).to.eql(200);\r",
													"        })\r",
													"\r",
													"\r",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenPlatformUser}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"signature\": \"{{Signature}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/SignedUserAgreements/{{DocumentId}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"SignedUserAgreements",
												"{{DocumentId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Post Permissions/bundles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									" \r",
									"pm.test(\"Validating CalculationTypes format and name from response body \"+jsonData.length, function () {\r",
									"  for (i = 0; i < jsonData.length; i++) {\r",
									"    pm.expect(jsonData[i]).to.have.all.keys('id', 'name','description','type','productName','bundleTypeId','productCode','permissions','roles');\r",
									"  }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenGlobalAdminUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"apiTest\",\r\n    \"description\": \"test\",\r\n    \"roles\": [\r\n        {\r\n            \"id\": 44,\r\n            \"productCode\": \"AR\",\r\n            \"name\": \"reg2202P role\",\r\n            \"description\": \"reg2202P role test\",\r\n            \"roleName\": \"reg2202P role\"\r\n        }\r\n    ],\r\n    \"permissions\": [\r\n        {\r\n            \"id\": 195,\r\n            \"name\": \"150322reg\",\r\n            \"description\": \"150322reg\"\r\n        },\r\n        {\r\n            \"id\": 156,\r\n            \"name\": \"010222Reg\",\r\n            \"description\": \"010222Reg1\"\r\n        }\r\n    ],\r\n    \"productCode\": \"AR\",\r\n    \"bundleTypeId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/api/Permissions/bundles",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"api",
								"Permissions",
								"bundles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update AR Group permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code is 200\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
									" });\r",
									"\r",
									"var userId = pm.variables.get(\"userId\");\r",
									"var url = pm.variables.get(\"baseURI\");\r",
									"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Company\";\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Accept': 'application/json',\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
									"      }\r",
									"      \r",
									"}, function (err, res) {\r",
									"    var jsonData = res.json();\r",
									"   \r",
									"    pm.test(\"Validate the Group permissions updated for user \" + userId , function(){\r",
									"        var permissionFlag = false;\r",
									"        for( var i=0; i< jsonData.length; i++)\r",
									"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
									"            if (jsonData[i].permissionBundleName == \"Base Rate Administrator\")\r",
									"            {\r",
									"                pm.expect(jsonData[i].entityType).to.be.eql(\"Company\");\r",
									"                // pm.expect(jsonData[i].productCode).to.be.eql(\"MO\");\r",
									"                pm.expect(jsonData[i].roleName).to.be.eql(\"Administrator\");\r",
									"                permissionFlag = true;\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"        pm.expect(permissionFlag).to.be.eql(true);\r",
									"   });\r",
									"\r",
									"   var url1 = pm.variables.get(\"baseURI\") + \"/api/UserEntitlements/\"+ userId + \"/Publish/PlatformCode/\"+pm.environment.get(\"platformCode\");\r",
									"    pm.sendRequest({\r",
									"    url: url1,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: {\r",
									"                                                  \r",
									"            }\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) { console.log(url + err); }\r",
									"        pm.test(\"To check api/UserEntitlements/userId/Publish has response 200\", function () {\r",
									"            pm.expect(res.code).to.eql(200);      \r",
									"        });\r",
									"\r",
									"        var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
									"        pm.sendRequest({\r",
									"        url: url1,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: {\r",
									"                                                    \r",
									"                }\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) { console.log(url + err); }\r",
									"            pm.test(\"To check /api/Publications has response 200\", function () {\r",
									"                pm.expect(res.code).to.eql(200);      \r",
									"            });\r",
									"\r",
									"            // if(pm.environment.get(\"baseURI\").includes(\"test2\"))\r",
									"            // {\r",
									"            //     var acsToken = pm.variables.get(\"accessToken_ArAdminTest2\");\r",
									"            // }\r",
									"            // else if(pm.environment.get(\"baseURI\").includes(\"qa\"))\r",
									"            // {\r",
									"            //     var acsToken = pm.variables.get(\"accessToken_ArAdminQa\");\r",
									"\r",
									"            // }\r",
									"            // else if(pm.environment.get(\"baseURI\").includes(\"uatdemo\"))\r",
									"            // {\r",
									"            //     var acsToken = pm.variables.get(\"accessToken_ArAdminUat\");\r",
									"\r",
									"            // }\r",
									"            // var url0 = pm.variables.get(\"baseURI\");\r",
									"            // url0 = url0.concat(\"/api/UserEntitlements\");\r",
									"\r",
									"            // pm.sendRequest({\r",
									"            //     url: url0,\r",
									"            //     method: 'GET',\r",
									"            //     header: {\r",
									"            //         'Accept': 'application/json',\r",
									"            //         'Content-Type': 'application/json',\r",
									"            //         'Authorization': 'bearer '+ acsToken\r",
									"            //     }\r",
									"                \r",
									"            // }, function (err, res) {\r",
									"            //     var jsonData = res.json();\r",
									"            //     pm.test(\"To check /api/UserEntitlements has response 200\", function () {\r",
									"            //         pm.expect(res.code).to.eql(200);      \r",
									"            //     });\r",
									"            //     pm.test(\"To check UserEntitlements NOT NULL\", function () {\r",
									"            //         pm.expect(jsonData.body).not.eql(null);\r",
									"            //     }); \r",
									"\r",
									"            //     pm.test(\"To check AR Admin_Read_PermissionBundle\" , function () \r",
									"            //     {\r",
									"            //         pm.expect(jsonData[0].permissionNames).to.include(\"ViewInvoiceTabs\");\r",
									"            //         pm.expect(jsonData[0].permissionNames).to.include(\"ViewTransactionTabs\");  \r",
									"            //         pm.expect(jsonData[0].permissionNames).to.include(\"ViewTransaction\");\r",
									"            //         pm.expect(jsonData[0].permissionNames).to.include(\"ViewSupplierProfiles\"); \r",
									"            //         pm.expect(jsonData[0].permissionNames).to.include(\"ViewRelationshipProfiles\");\r",
									"            //         pm.expect(jsonData[0].permissionNames).to.include(\"ViewNotificationsInterface\");  \r",
									"            //         pm.expect(jsonData[0].permissionNames).to.include(\"EditNotificationsInterface\"); \r",
									"            //     });\r",
									"            // });\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var url = pm.variables.get(\"baseURI\");\r",
									"url = url.concat(\"/api/users?count=1000&productCode=MO\");\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Accept': 'application/json',\r",
									"        'Content-Type': 'application/json',\r",
									"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
									"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    var jsonData = res.json();\r",
									"    for(i=0; i< jsonData.length; i++)\r",
									"    { \r",
									"        if(jsonData[i].userName === pm.environment.get(\"platformUser\"))\r",
									"        {\r",
									"            var guid =  jsonData[i].id;\r",
									"            console.log(\"userId: \"+jsonData[i].id);\r",
									"            console.log(\"companyName: \"+jsonData[i].companyName);\r",
									"            pm.variables.set(\"userId\", guid);\r",
									"            pm.variables.set(\"platCmpName\", jsonData[i].companyName);\r",
									"        }\r",
									"    }\r",
									"\r",
									"    var url1 = pm.variables.get(\"baseURI\");\r",
									"    url1 = url1.concat(\"/api/companies?format=company-only&count=2500&productCode=MO\");\r",
									"    pm.sendRequest({\r",
									"        url: url1,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Accept': 'application/json',\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        var jsonData1 = res.json();\r",
									"        for(i=0; i< jsonData1.length; i++)\r",
									"        { \r",
									"            if(jsonData1[i].name == pm.variables.get(\"platCmpName\"))\r",
									"            {\r",
									"                var gcmpId =  jsonData1[i].companyId;\r",
									"                console.log(\"companyId: \"+gcmpId);\r",
									"                pm.variables.set(\"gcmpId\", gcmpId);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"        var url0 = pm.variables.get(\"baseURI\");\r",
									"        url0 = url0.concat(\"/api/companies/\"+pm.variables.get(\"gcmpId\")+\"/roles\");\r",
									"        pm.sendRequest({\r",
									"            url: url0,\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Accept': 'application/json',\r",
									"                'Content-Type': 'application/json',\r",
									"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
									"                'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            var jsonData1 = res.json();\r",
									"            for(i=0; i< jsonData1.length; i++)\r",
									"            { \r",
									"                if(jsonData1[i].productCode == \"MO\" && jsonData1[i].isActive==true)\r",
									"                {\r",
									"                    var brRoleId =  jsonData1[i].roleId;\r",
									"                    console.log(\"brRoleId: \"+brRoleId);\r",
									"                    pm.variables.set(\"roldeId\", brRoleId);\r",
									"\r",
									"                }\r",
									"            }\r",
									"            // pm.variables.set(\"roldeId\", 14);\r",
									"\r",
									"            var url = pm.variables.get(\"baseURI\");\r",
									"            url = url.concat(\"/api/userpermissions/\" + pm.variables.get(\"userId\") + \"/roles/\" + pm.variables.get(\"roldeId\") + \"?entityType=Company\");\r",
									"            pm.sendRequest({\r",
									"                url: url,\r",
									"                method: 'GET',\r",
									"                header: {\r",
									"                    'Accept': 'application/json',\r",
									"                    'Content-Type': 'application/json',\r",
									"                    \r",
									"                    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
									"                }\r",
									"            },\r",
									"            function (err, res) {\r",
									"                if (err) { console.log(\"error :\" + err); }\r",
									"                var jsonData = res.json();\r",
									"                for (i = 0; i < jsonData.length; i++) {\r",
									"                    if (jsonData[i].permissionBundleName.includes(\"Base Rate Administrator\")) {\r",
									"                            pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);\r",
									"                            pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);\r",
									"                            pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);\r",
									"                            pm.variables.set(\"isEntitled\", true);\r",
									"                            break;                \r",
									"                    }\r",
									"                }\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenPlatformUser}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"userParticipantId\": {{userParticipantId}},\r\n        \"permissionBundleId\": {{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"isEntitled\": {{isEntitled}}\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Group",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"api",
								"userpermissions",
								"{{userId}}",
								"roles",
								"{{roldeId}}"
							],
							"query": [
								{
									"key": "entityType",
									"value": "Group"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update SCF Group permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code is 200\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([204,200,202]);\r",
									" });\r",
									"\r",
									"var userId = pm.variables.get(\"userId\");\r",
									"var url = pm.variables.get(\"baseURI\");\r",
									"url = url.concat(\"/api/userpermissions/\") + userId + \"?entityType=Company\";\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Accept': 'application/json',\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
									"      }\r",
									"      \r",
									"}, function (err, res) {\r",
									"    var jsonData = res.json();\r",
									"   \r",
									"    pm.test(\"Validate the Group permissions updated for user \" + userId , function(){\r",
									"        var permissionFlag = false;\r",
									"        for( var i=0; i< jsonData.length; i++)\r",
									"        {   console.log(\"permissionBundleName--> \"+jsonData[i].permissionBundleName);\r",
									"            if (jsonData[i].permissionBundleName == \"Base Rate Administrator\")\r",
									"            {\r",
									"                pm.expect(jsonData[i].entityType).to.be.eql(\"Company\");\r",
									"                // pm.expect(jsonData[i].productCode).to.be.eql(\"MO\");\r",
									"                pm.expect(jsonData[i].roleName).to.be.eql(\"Administrator\");\r",
									"                permissionFlag = true;\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"        pm.expect(permissionFlag).to.be.eql(true);\r",
									"   });\r",
									"\r",
									"   var url1 = pm.variables.get(\"baseURI\") + \"/api/UserEntitlements/\"+ userId + \"/Publish/PlatformCode/\"+pm.environment.get(\"platformCode\");\r",
									"    pm.sendRequest({\r",
									"    url: url1,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: {\r",
									"                                                  \r",
									"            }\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) { console.log(url + err); }\r",
									"        pm.test(\"To check api/UserEntitlements/userId/Publish has response 200\", function () {\r",
									"            pm.expect(res.code).to.eql(200);      \r",
									"        });\r",
									"\r",
									"        var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
									"        pm.sendRequest({\r",
									"        url: url1,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: {\r",
									"                                                    \r",
									"                }\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) { console.log(url + err); }\r",
									"            pm.test(\"To check /api/Publications has response 200\", function () {\r",
									"                pm.expect(res.code).to.eql(200);      \r",
									"            });\r",
									"\r",
									"            // if(pm.environment.get(\"baseURI\").includes(\"test2\"))\r",
									"            // {\r",
									"            //     var acsToken = pm.variables.get(\"accessToken_ArAdminTest2\");\r",
									"            // }\r",
									"            // else if(pm.environment.get(\"baseURI\").includes(\"qa\"))\r",
									"            // {\r",
									"            //     var acsToken = pm.variables.get(\"accessToken_ArAdminQa\");\r",
									"\r",
									"            // }\r",
									"            // else if(pm.environment.get(\"baseURI\").includes(\"uatdemo\"))\r",
									"            // {\r",
									"            //     var acsToken = pm.variables.get(\"accessToken_ArAdminUat\");\r",
									"\r",
									"            // }\r",
									"            // var url0 = pm.variables.get(\"baseURI\");\r",
									"            // url0 = url0.concat(\"/api/UserEntitlements\");\r",
									"\r",
									"            // pm.sendRequest({\r",
									"            //     url: url0,\r",
									"            //     method: 'GET',\r",
									"            //     header: {\r",
									"            //         'Accept': 'application/json',\r",
									"            //         'Content-Type': 'application/json',\r",
									"            //         'Authorization': 'bearer '+ acsToken\r",
									"            //     }\r",
									"                \r",
									"            // }, function (err, res) {\r",
									"            //     var jsonData = res.json();\r",
									"            //     pm.test(\"To check /api/UserEntitlements has response 200\", function () {\r",
									"            //         pm.expect(res.code).to.eql(200);      \r",
									"            //     });\r",
									"            //     pm.test(\"To check UserEntitlements NOT NULL\", function () {\r",
									"            //         pm.expect(jsonData.body).not.eql(null);\r",
									"            //     }); \r",
									"\r",
									"            //     pm.test(\"To check AR Admin_Read_PermissionBundle\" , function () \r",
									"            //     {\r",
									"            //         pm.expect(jsonData[0].permissionNames).to.include(\"ViewInvoiceTabs\");\r",
									"            //         pm.expect(jsonData[0].permissionNames).to.include(\"ViewTransactionTabs\");  \r",
									"            //         pm.expect(jsonData[0].permissionNames).to.include(\"ViewTransaction\");\r",
									"            //         pm.expect(jsonData[0].permissionNames).to.include(\"ViewSupplierProfiles\"); \r",
									"            //         pm.expect(jsonData[0].permissionNames).to.include(\"ViewRelationshipProfiles\");\r",
									"            //         pm.expect(jsonData[0].permissionNames).to.include(\"ViewNotificationsInterface\");  \r",
									"            //         pm.expect(jsonData[0].permissionNames).to.include(\"EditNotificationsInterface\"); \r",
									"            //     });\r",
									"            // });\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var url = pm.variables.get(\"baseURI\");\r",
									"url = url.concat(\"/api/users?count=1000&productCode=MO\");\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Accept': 'application/json',\r",
									"        'Content-Type': 'application/json',\r",
									"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
									"        'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    var jsonData = res.json();\r",
									"    for(i=0; i< jsonData.length; i++)\r",
									"    { \r",
									"        if(jsonData[i].userName === pm.environment.get(\"platformUser\"))\r",
									"        {\r",
									"            var guid =  jsonData[i].id;\r",
									"            console.log(\"userId: \"+jsonData[i].id);\r",
									"            console.log(\"companyName: \"+jsonData[i].companyName);\r",
									"            pm.variables.set(\"userId\", guid);\r",
									"            pm.variables.set(\"platCmpName\", jsonData[i].companyName);\r",
									"        }\r",
									"    }\r",
									"\r",
									"    var url1 = pm.variables.get(\"baseURI\");\r",
									"    url1 = url1.concat(\"/api/companies?format=company-only&count=2500&productCode=MO\");\r",
									"    pm.sendRequest({\r",
									"        url: url1,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Accept': 'application/json',\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        var jsonData1 = res.json();\r",
									"        for(i=0; i< jsonData1.length; i++)\r",
									"        { \r",
									"            if(jsonData1[i].name == pm.variables.get(\"platCmpName\"))\r",
									"            {\r",
									"                var gcmpId =  jsonData1[i].companyId;\r",
									"                console.log(\"companyId: \"+gcmpId);\r",
									"                pm.variables.set(\"gcmpId\", gcmpId);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"        var url0 = pm.variables.get(\"baseURI\");\r",
									"        url0 = url0.concat(\"/api/companies/\"+pm.variables.get(\"gcmpId\")+\"/roles\");\r",
									"        pm.sendRequest({\r",
									"            url: url0,\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Accept': 'application/json',\r",
									"                'Content-Type': 'application/json',\r",
									"                'x-platform-code': pm.environment.get(\"platformCode\"),\r",
									"                'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            var jsonData1 = res.json();\r",
									"            for(i=0; i< jsonData1.length; i++)\r",
									"            { \r",
									"                if(jsonData1[i].productCode == \"MO\" && jsonData1[i].isActive==true)\r",
									"                {\r",
									"                    var brRoleId =  jsonData1[i].roleId;\r",
									"                    console.log(\"brRoleId: \"+brRoleId);\r",
									"                    pm.variables.set(\"roldeId\", brRoleId);\r",
									"\r",
									"                }\r",
									"            }\r",
									"            // pm.variables.set(\"roldeId\", 14);\r",
									"\r",
									"            var url = pm.variables.get(\"baseURI\");\r",
									"            url = url.concat(\"/api/userpermissions/\" + pm.variables.get(\"userId\") + \"/roles/\" + pm.variables.get(\"roldeId\") + \"?entityType=Company\");\r",
									"            pm.sendRequest({\r",
									"                url: url,\r",
									"                method: 'GET',\r",
									"                header: {\r",
									"                    'Accept': 'application/json',\r",
									"                    'Content-Type': 'application/json',\r",
									"                    \r",
									"                    'Authorization': 'bearer ' + pm.variables.get(\"accessToken\")\r",
									"                }\r",
									"            },\r",
									"            function (err, res) {\r",
									"                if (err) { console.log(\"error :\" + err); }\r",
									"                var jsonData = res.json();\r",
									"                for (i = 0; i < jsonData.length; i++) {\r",
									"                    if (jsonData[i].permissionBundleName.includes(\"Base Rate Administrator\")) {\r",
									"                            pm.variables.set(\"userParticipantId\", jsonData[i].userParticipantId);\r",
									"                            pm.variables.set(\"permissionBundleId\", jsonData[i].permissionBundleId);\r",
									"                            pm.variables.set(\"permissionBundleName\", jsonData[i].permissionBundleName);\r",
									"                            pm.variables.set(\"isEntitled\", true);\r",
									"                            break;                \r",
									"                    }\r",
									"                }\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenPlatformUser}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"userParticipantId\": {{userParticipantId}},\r\n        \"permissionBundleId\": {{permissionBundleId}},\r\n        \"permissionBundleName\": \"{{permissionBundleName}}\",\r\n        \"isEntitled\": {{isEntitled}}\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/api/userpermissions/{{userId}}/roles/{{roldeId}}?entityType=Company",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"api",
								"userpermissions",
								"{{userId}}",
								"roles",
								"{{roldeId}}"
							],
							"query": [
								{
									"key": "entityType",
									"value": "Company"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Company",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var  cRandom = getRandomAlphaNumeric(3,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r",
									"\r",
									"function getRandomAlphaNumeric(len, chars) {\r",
									"    var result = '';\r",
									"    for (var i = len; i > 0; i--)\r",
									"    { \r",
									"     result += chars[Math.floor(Math.random() * chars.length)];\r",
									"    }\r",
									"     return result;\r",
									"}\r",
									"pm.variables.set(\"entityName\", cRandom);\r",
									"console.log(\"--->\"+cRandom);\r",
									"var moment = require('moment'); \r",
									"var timeT = moment.utc().format();  \r",
									"console.log(\"Current time: \"+timeT)\r",
									"pm.variables.set(\"currentTime\", timeT);\r",
									"\r",
									"var url = pm.variables.get(\"baseURI\");\r",
									"url = url.concat(\"/api/companies?format=list&count=15000\");\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Accept': 'application/json',\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    var jsonData = res.json();\r",
									"    for (i = 0; i < jsonData.length; i++) {\r",
									"        if (jsonData[i].name.includes(\"EntlReg_Cmp\")) { //API_Company_ API_Cmp\r",
									"            var compId = jsonData[i].companyId;\r",
									"            var compName = jsonData[i].name;\r",
									"            console.log(\"company id: \" + compId);\r",
									"            console.log(\"company Name: \" + compName);\r",
									"            pm.variables.set(\"compIdPut\", compId);\r",
									"            pm.variables.set(\"name\", \"EntlReg_CmpUpdated_\"+pm.variables.get(\"entityName\")   );\r",
									"             pm.variables.set(\"countryCode\", jsonData[i].countryCode);\r",
									"\r",
									"\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    var url = pm.variables.get(\"baseURI\");\r",
									"    url = url.concat(\"/api/companies/\"+pm.variables.get(\"compIdPut\"));\r",
									"    pm.sendRequest({\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Accept': 'application/json',\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        var jsonData = res.json();\r",
									"\r",
									"        pm.variables.set(\"stateRegionOfFormationPut\", jsonData.stateRegionOfFormation);\r",
									"        pm.variables.set(\"countryOfFormationPut\", jsonData.countryOfFormation);\r",
									"        pm.variables.set(\"institutionTypeIdPut\", jsonData.institutionTypeId);\r",
									"        pm.variables.set(\"sectorIdPut\", jsonData.sectorId);\r",
									"\r",
									"        var url = pm.variables.get(\"baseURI\");\r",
									"        url = url.concat(\"/api/countries/\"+pm.variables.get(\"countryCode\")+\"/state-provinces\");\r",
									"        pm.sendRequest({\r",
									"            url: url,\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Accept': 'application/json',\r",
									"                'Content-Type': 'application/json',\r",
									"                'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            var jsonData = res.json();\r",
									"            for (i = 0; i < jsonData.length; i++)\r",
									"            {\r",
									"                if (jsonData[i].name.includes([])) \r",
									"                {\r",
									"                    pm.variables.set(\"stateRegionIdPut\", null);\r",
									"                }\r",
									"                else(jsonData[i].name.includes(pm.variables.get(\"stateRegionOfFormationPut\"))) \r",
									"                {\r",
									"                    pm.variables.set(\"stateRegionIdPut\", jsonData[i].id);\r",
									"                }\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code is 200\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([204,200]);\r",
									" });\r",
									" \r",
									"// var currentId = pm.variables.get(\"compIdPut\");\r",
									"\r",
									"// var url = pm.variables.get(\"baseURI\");\r",
									"// url = url.concat(\"/api/Companies/\"+currentId);\r",
									"\r",
									"// pm.sendRequest({\r",
									"//     url: url,\r",
									"//     method: 'GET',\r",
									"//     header: {\r",
									"//         'Accept': 'application/json',\r",
									"//         'Content-Type': 'application/json',\r",
									"//         'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
									"//     }\r",
									"// }, function (err, res) {\r",
									"//     var jsonData = res.json();\r",
									"    \r",
									"//     pm.test(\"Status code name has string\", function () {\r",
									"//         pm.expect(jsonData.legalEntityName).to.eql(\"API_CmpUpdated_\"+pm.variables.get(\"entityName\"));\r",
									"//         console.log(\"Updated company name: \"+\"API_CmpUpdated_\"+pm.variables.get(\"entityName\"));\r",
									"//     });\r",
									"\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenPlatformUser}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-platform-code",
								"value": "{{platformCode}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"companyId\": {{compIdPut}},\r\n    \"platformCode\": \"{{platformCode}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"city\": \"NY\",\r\n    \"stateRegionId\": null,// {{stateRegionIdPut}} ,\r\n    \"countryCode\": \"{{countryCode}}\",\r\n    \"isActive\": true,\r\n    \"company\": {\r\n        \"id\": {{compIdPut}},\r\n        \"salesforceId\": \"\",\r\n        \"legalEntityName\": \"{{name}}\",\r\n        \"stateRegionOfFormation\": \"{{stateRegionOfFormationPut}}\",\r\n        \"countryOfFormation\": \"{{countryOfFormationPut}}\",\r\n        \"isActive\": true,\r\n        \"recordTypeId\": 1,\r\n        \"institutionTypeId\": {{institutionTypeIdPut}},\r\n        \"sectorId\": {{sectorIdPut}},\r\n        \"onboardingPlatformCode\": \"{{platformCode}}\",\r\n        \"updatedOn\": \"{{currentTime}}\"\r\n    },\r\n    \"externalId\": \"333\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/api/Companies/{{compIdPut}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"api",
								"Companies",
								"{{compIdPut}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DIGI Sync/alias ENT-1942",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"    var  cRandom = getRandomAlphaNumeric(4,\"ABC56789DEFGHIJKLMNOPQ01234RSTUVWXYZ\");\r",
									"\r",
									"function getRandomAlphaNumeric(len, chars) {\r",
									"    var result = '';\r",
									"    for (var i = len; i > 0; i--)\r",
									"    { \r",
									"     result += chars[Math.floor(Math.random() * chars.length)];\r",
									"    }\r",
									"     return result;\r",
									"}\r",
									"\r",
									"pm.variables.set(\"aliasesName\", cRandom);\r",
									"\r",
									"    var url1 = pm.variables.get(\"baseURI\");\r",
									"    url1 = url1.concat(\"/api/companies/\"+pm.variables.get(\"companynameDIGI\")+\"/roles\"); \r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: url1,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Accept': 'application/json',\r",
									"            'Content-Type': 'application/json',\r",
									"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
									"            'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        var jsonData = res.json();\r",
									"        for(i=0; i<jsonData.length; i++)\r",
									"        {\r",
									"            if(jsonData[i].isActive  == true)\r",
									"            {\r",
									"                pm.variables.set(\"productCodeC\", jsonData[i].productCode);\r",
									"                pm.variables.set(\"participantIdC\", jsonData[i].participantId);\r",
									"            }\r",
									"        } \r",
									"        console.log(\"productCodeC --> \"+pm.variables.get(\"productCodeC\"));\r",
									"        console.log(\"participantIdC --> \"+pm.variables.get(\"participantIdC\"));\r",
									"\r",
									"    });\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var code = pm.variables.get(\"productCodeC\");\r",
									"var jsonData = pm.response.json();\r",
									"pm.variables.set(\"aliasesId\", jsonData.id);\r",
									"\r",
									"pm.test(\"To check details for participant aliases \" + code , function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"EntlReg_Aliase_\"+pm.variables.get(\"aliasesName\"));\r",
									"    pm.expect(jsonData.participantId).to.eql(pm.variables.get(\"participantIdC\"));\r",
									"}); \r",
									"\r",
									"pm.test(\"Validating participant aliases format from response body \", function () {\r",
									"    pm.expect(jsonData).to.have.all.keys('id', 'name', 'isDisabled', 'participantId');\r",
									"});\r",
									"\r",
									"var url1 = pm.variables.get(\"baseURI\") + \"/api/Publications\";\r",
									"pm.sendRequest({\r",
									"url: url1,\r",
									"method: 'POST',\r",
									"header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
									"},\r",
									"body: {\r",
									"    mode: 'raw',\r",
									"    raw: {\r",
									"                                            \r",
									"        }\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) { console.log(url + err); }\r",
									"    var jsonData1 = res.json();\r",
									"    \r",
									"    pm.test(\"To check Publications has response 200\", function () {\r",
									"        pm.expect(res.code).to.eql(200);      \r",
									"    });\r",
									"    for(i = 0; i<jsonData1.length; i++)\r",
									"    {\r",
									"        if(jsonData1[i].participantType == 'ParticipantAlias')\r",
									"        {\r",
									"            pm.test(\"To check success Sync of Alias productName and State \", function () {\r",
									"                pm.expect(jsonData1[i].product).to.be.oneOf([\"SCF\",\"Settlement\",\"PARM\"]);\r",
									"                pm.expect(jsonData1[i].state).to.eql(\"Success\");\r",
									"            });\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenPlatformUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-platform-code",
								"type": "text",
								"value": "{{platformCode}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"EntlReg_Aliase_{{aliasesName}}\",\r\n    \"participantId\": {{participantIdC}},\r\n    \"isDisabled\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/api/participants/{{participantIdC}}/aliases?platformCode={{platformCode}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"api",
								"participants",
								"{{participantIdC}}",
								"aliases"
							],
							"query": [
								{
									"key": "platformCode",
									"value": "{{platformCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-platform-code",
								"type": "text",
								"value": "{{platformCode}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURI}}/api/Users/949928",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"api",
								"Users",
								"949928"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Realtionships_SCF",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"productCodeSCF\", \"SCF\");\r",
									"pm.variables.set(\"currencyCode\", \"USD\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"relationshipTypeId\",1); //SCF=1, AR=2, INBLOCK=3\r",
									"\r",
									"var moment = require('moment');\r",
									"var timeT = moment.utc().format();\r",
									"console.log(\"Current time: \" + timeT)\r",
									"pm.variables.set(\"currentTime\", timeT);\r",
									"\r",
									"   \r",
									"pm.variables.set(\"SCFSupplierName\", pm.environment.get(\"newSupplierCompanySCFName_Local\"));\r",
									"pm.variables.set(\"SCFBuyerName\", pm.environment.get(\"newBuyerCompanySCFName_Local\"));\r",
									"\r",
									"console.log(\"SCFSupplierName ----> \"+  pm.variables.get(\"SCFSupplierName\"));\r",
									"console.log(\"SCFBuyerName ----> \"+  pm.variables.get(\"SCFBuyerName\"));\r",
									"\r",
									"var url2 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Supplier&count=25000&isActive=true&productCode=\" + pm.variables.get(\"productCodeSCF\");//assign supplier\r",
									"pm.sendRequest({\r",
									"    url: url2,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'x-platform-code': pm.environment.get(\"platformCode\"),\r",
									"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) { console.log(url + err); }\r",
									"    var jsonData = res.json();\r",
									"\r",
									"    for (var i = 0; i < jsonData.length; i++) {\r",
									"        if (jsonData[i].name === pm.variables.get(\"SCFSupplierName\") && jsonData[i].roleId === 3) \r",
									"        {\r",
									"            pm.variables.set(\"supplierId1\", jsonData[i].id);\r",
									"            console.log(\"supplierId1\", jsonData[i].id);\r",
									"            pm.variables.set(\"countryOfJurisdiction_Supplier\", jsonData[i].countryOfFormation);\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    var url3 = pm.variables.get(\"baseURI\") + \"/api/Participants?role=Debtor&count=25000&isActive=true&productCode=\" + pm.variables.get(\"productCodeSCF\");//assign buyer\r",
									"    pm.sendRequest({\r",
									"        url: url3,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'x-platform-code': pm.environment.get(\"platformCode\"),\r",
									"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) { console.log(url + err); }\r",
									"        var jsonData = res.json();\r",
									"        for (var i = 0; i < jsonData.length; i++) {\r",
									"            if (jsonData[i].name === pm.variables.get(\"SCFBuyerName\") && jsonData[i].roleId === 1) \r",
									"            {\r",
									"                pm.variables.set(\"buyerId\", jsonData[i].id);\r",
									"                console.log(\"buyerId\", jsonData[i].id);\r",
									"                pm.variables.set(\"countryOfJurisdiction_Buyer\", jsonData[i].countryOfFormation);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"var relationshipId = jsonData.id;\r",
									"\r",
									"var url = pm.variables.get(\"baseURI\") + \"/api/Relationships/\"+relationshipId;\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"            'Accept': 'application/json',\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenPlatformUser\")\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"    if (err) { console.log(url + err); }\r",
									"    \r",
									"    pm.test(\"To check update /api/Relationships/id has response 200\", function () {\r",
									"        pm.expect(res.code).to.eql(200);      \r",
									"    });\r",
									"    \r",
									"    var jsonData1 = res.json();\r",
									"                \r",
									"    pm.test(\"To check newly created Relationship after activate and published: \"+relationshipId, function () {\r",
									"        pm.expect(jsonData1.productCode).to.eql(\"SCF\");\r",
									"        pm.expect(jsonData1.status).to.eql(\"Active\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenPlatformUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"participants\": [\r\n        {\r\n            \"relationshipRoleName\": \"Buyer\",\r\n            \"participantId\": {{buyerId}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Buyer}}\"\r\n        },\r\n        {\r\n            \"relationshipRoleName\": \"Supplier\",\r\n            \"participantId\":  {{supplierId1}},\r\n            \"countryOfJurisdiction\": \"{{countryOfJurisdiction_Supplier}}\"\r\n        }\r\n    ],\r\n    \"relationshipType\": {\r\n        \"id\": {{relationshipTypeId}},\r\n        \"name\": \"Supply Chain Finance (Supplier-Buyer)\",\r\n        \"productCode\": \"{{productCodeSCF}}\"\r\n    },    \r\n    \"relationshipTypeId\": {{relationshipTypeId}},\r\n    \"productCode\": \"{{productCodeSCF}}\",\r\n    \"calendarIds\": [\r\n        1\r\n    ],\r\n    \"retainedDays\": 10,\r\n    \"statusId\": 1,\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"governingLawId\": 266,\r\n    \"descOfGoodsServices\": \"Treasures\",\r\n    \"invoiceDueDateAdjustmentId\": 1,\r\n    \"startDate\": \"{{currentTime}}\"\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/api/Relationships",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"api",
								"Relationships"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post onboarding template - BI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6InRNODF3ZGZVM1l1R3FKZ2VLT3lObl9peEpnYTdMWW1ZdWt6bEhDaVpCY1EifQ.eyJleHAiOjE2NzQ2NDQ4MTAsIm5iZiI6MTY3NDY0MTIxMCwidmVyIjoiMS4wIiwiaXNzIjoiaHR0cHM6Ly9scXhkZXYuYjJjbG9naW4uY29tLzAwM2I2M2NiLWI0MGUtNGUzZC1iOGE2LWI1NmMwZmQ5NGI0Zi92Mi4wLyIsInN1YiI6IjkwNWI1NmIwLTBhNTMtNDVkNC1iNzQ3LWI5ZGUyZjMwOTExNCIsImF1ZCI6ImVjYzE4ZDgzLTUyYWQtNDE2ZC05ZjAxLWE1YjI5ODhhZTlhMiIsIm5vbmNlIjoiNWJiZjhlZWEtMTBkYS00ZDM1LTgwNmItOWI4ZTg3YmVlNDNiIiwiaWF0IjoxNjc0NjQxMjEwLCJhdXRoX3RpbWUiOjE2NzQ2NDEyMTAsIm9pZCI6IjkwNWI1NmIwLTBhNTMtNDVkNC1iNzQ3LWI5ZGUyZjMwOTExNCIsIm5hbWUiOiJBcnJvdyBUZXN0MiIsImdpdmVuX25hbWUiOiJBcnJvdyIsImZhbWlseV9uYW1lIjoiVGVzdDIiLCJlbWFpbHMiOlsibHF4c2NmK2Fycm93Mi5xYUBnbWFpbC5jb20iXSwiZXh0ZW5zaW9uX1BsYXRmb3JtQ29kZXMiOiJMUVgiLCJleHRlbnNpb25fUHJvZHVjdENvZGVzIjoiU0NGIiwiZXh0ZW5zaW9uX1BhcnRpY2lwYW50cyI6IjEzMzcyMiIsImV4dGVuc2lvbl9QYXJ0aWNpcGFudFJvbGVzIjoiU3VwcGxpZXIiLCJleHRlbnNpb25fUm9sZXMiOiJSZWFkV3JpdGUiLCJ0aWQiOiIwMDNiNjNjYi1iNDBlLTRlM2QtYjhhNi1iNTZjMGZkOTRiNGYiLCJ0ZnAiOiJCMkNfMUFfVEVTVDJfU2lnbkluIn0.I8WOWqz_1D8eeJrAc6XfB9rkz7ZvkZF8rb5nmi2XeBr9-NK_RMgrgla4fM5dNVx_Lb0JCzJaZvXVER6mhgkHmPR8lRXPRNpW2B5YKMG7Tguo8lRiHYIzbnHQ2wjVEjwk_Si3hHM0vh56zpEmDEIL4tGzOO1dZDBpmOKP8cX9El8vnzZK5R1-n94dtTZOId3jzwqWdhNjfmusy8QdDSk9MUTJibPtYSBCBTt7Owh1QRa3rw9aVuOVO7kr6Vnj2xdsWk-th-vc1Q2Njea1-dklbKKt2yv_1NCx88vxUZfJssf3S_8oNhHPgCr8YUmw3WNiRqEssqbB7WxrKJE9cPLHdg",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"platformCode\": \"EntitlementQA\",\r\n    \"productCode\": \"AR\",\r\n    \"templateName\": \"Tracker_Report_PBIX_INBLOCK_SUPPLIER_ENT\",\r\n    \"templateType\": \"PowerBIReport\",\r\n    \"templateUid\": \"8523fc84-1159-4233-ac11-e3d5f5f0def9\",\r\n    \"destinationRoleCode\": 0,\r\n    \"displayName\": \"Tracker_Report_PBIX_INBLOCK_SUPPLIER_ENT_250123\",\r\n    \"description\": \"Tracker_Report_PBIX_INBLOCK_SUPPLIER_ENT_250123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://qa.liquidx.com/embeddedbi_api_url/api/onboardtemplate",
							"protocol": "https",
							"host": [
								"qa",
								"liquidx",
								"com"
							],
							"path": [
								"embeddedbi_api_url",
								"api",
								"onboardtemplate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Password Generation",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "RXBabHQ4MkV1bXVKbVIvaHVjSnlRWW9ZUk9QMWw3bGR6N3VVQW9tQVlmaE8reTRvZGp5YWczcXlVUWRvUGpacElBMU0zbklpbVdFc2gzZnF6a2dlbUE9PTsyMDIzLTAzLTE0VDE0OjEzOjQzLjg3NTAzMzNaOzJxV3BldGl4REZSQlBlQ0xXWUppUXc9PTt7IlRhcmdldEVudGl0eSI6IlBhc3N3b3JkUmVzZXRVc2luZ0VtYWlsQWRkcmVzc0V4Y2hhbmdlIiwiT3JjaGVzdHJhdGlvblN0ZXAiOjF9",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							},
							{
								"key": "x-platform-code",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "lqxnga+PasswordSet@gmail.com",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://lqxdev.b2clogin.com/003b63cb-b40e-4e3d-b8a6-b56c0fd94b4f/B2C_1A_TEST2_PasswordReset/SelfAsserted/DisplayControlAction/vbeta/emailVerificationSSPRControl/SendCode?tx=StateProperties=eyJUSUQiOiJhMGFlYjM4ZC00MTEyLTQ4NmItODM5YS1lM2Q3OThiMWUxZTUifQ&p=B2C_1A_TEST2_PasswordReset",
							"protocol": "https",
							"host": [
								"lqxdev",
								"b2clogin",
								"com"
							],
							"path": [
								"003b63cb-b40e-4e3d-b8a6-b56c0fd94b4f",
								"B2C_1A_TEST2_PasswordReset",
								"SelfAsserted",
								"DisplayControlAction",
								"vbeta",
								"emailVerificationSSPRControl",
								"SendCode"
							],
							"query": [
								{
									"key": "tx",
									"value": "StateProperties=eyJUSUQiOiJhMGFlYjM4ZC00MTEyLTQ4NmItODM5YS1lM2Q3OThiMWUxZTUifQ"
								},
								{
									"key": "p",
									"value": "B2C_1A_TEST2_PasswordReset"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deprecated ",
			"item": [
				{
					"name": "Get Company Portal Users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// var cid = pm.environment.get(\"Company_Id_G\") ;",
									"",
									"// var url = pm.variables.get(\"baseURI\");",
									"// url = url.concat(\"/api/companies/\"+cid);",
									"",
									"// pm.sendRequest({",
									"//     url: url,",
									"//     method: 'GET',",
									"//     header: {",
									"//         'Accept': 'application/json',",
									"//         'Content-Type': 'application/json',",
									"//         'Authorization': 'bearer '+ pm.variables.get(\"accessToken\")",
									"//       }",
									"      ",
									"// }, function (err, res) {",
									"//     var jsonData = res.json();",
									"//     pm.variables.set(\"CompanyId\", jsonData.id);",
									"//     pm.variables.set(\"CompanyName\", jsonData.legalEntityName);",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var expectedCompanyId = pm.environment.get(\"Company_Id_G\") ;\r",
									"// var expectedCompanyName = pm.variables.get(\"CompanyName\") ;\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"    \r",
									"pm.test(\"To check /companies/{id}/portal-users returns portal-users for company :\"+ expectedCompanyId, function ()\r",
									"{\r",
									"    for(var i=0; i<jsonData.length;i++)\r",
									"    {\r",
									"        pm.expect(jsonData[i].companyId).to.be.eql(parseInt(expectedCompanyId));\r",
									"        // pm.expect(jsonData[i].userTypes).to.be.oneOf([\"Platform User\",\"Portal User\",\"Authorized Admin\"]);\r",
									"    }\r",
									"});   "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-platform-code",
								"value": "{{platformCode}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURI}}/api/companies/{{Company_Id_G}}/portal-users",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"api",
								"companies",
								"{{Company_Id_G}}",
								"portal-users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get platforms by users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									" \r",
									"pm.test(\"Validating format from response body for platform users: \"+jsonData.length, function () {\r",
									"  for (i = 0; i < jsonData.length; i++) {\r",
									"    pm.expect(jsonData[i]).to.have.all.keys('id', 'firstName','lastName','email'); //,'companyName'\r",
									"  }\r",
									"});\r",
									"pm.test(\"To check user details for products is not null (id,firstName,lastName,email,companyName)\", function () {\r",
									"    for (var i = 0; i < jsonData.length; i++) {\r",
									"        pm.expect(jsonData[i].id).to.not.eql(null);\r",
									"        pm.expect(jsonData[i].firstName).to.not.eql(null);\r",
									"        pm.expect(jsonData[i].lastName).to.not.eql(null);\r",
									"        pm.expect(jsonData[i].email).to.not.eql(null);\r",
									"        pm.expect(jsonData[i].companyName).to.not.eql(null);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenGlobalAdminUser}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURI}}/api/platforms/{{platformCode}}/users",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"api",
								"platforms",
								"{{platformCode}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Platform - Admin - Platform Settings - Platform Admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var editText = getRandomAlphaNumeric(4,\"ABCDE12345FGHIJKLMNOPQ90876RSTUVWXYZ\");\r",
									"pm.variables.set(\"PlatformAdmin_Edit\", editText);\r",
									"\r",
									"function getRandomAlphaNumeric(len, chars) {\r",
									"    var result = '';\r",
									"    for (var i = len; i > 0; i--)\r",
									"    { \r",
									"     result += chars[Math.floor(Math.random() * chars.length)];\r",
									"    }\r",
									"     return result;\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(204);\r",
									"});\r",
									"\r",
									"var url1 = pm.variables.get(\"baseURI\");\r",
									"url1 = url1.concat(\"/api/Platforms/\"+pm.variables.get(\"platformCode\"));\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: url1,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Accept': 'application/json',\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenPlatformUser\")\r",
									"    },\r",
									"\r",
									"    }, function (err, res) {\r",
									"    var jsonData = res.json();\r",
									"\r",
									"    pm.test(\"To check updated platform name for code: \" + pm.variables.get(\"platformCode\"), function () {\r",
									"        pm.expect(jsonData.helpText).contains(pm.variables.get(\"PlatformAdmin_Edit\"));\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenPlatformUser}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/helpText\",\r\n        \"value\": \"Contact us at clientservices@liquidx.com for any questions or help. You can call us on +1(212) 612 3394. RegTestAPI {{PlatformAdmin_Edit}}\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/api/platforms/{{platformCode}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"api",
								"platforms",
								"{{platformCode}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Platform - Global Admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var url = pm.variables.get(\"baseURI\");\r",
									"url = url.concat(\"/api/Platforms?count=100\");\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Accept': 'application/json',\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
									"      }\r",
									"      \r",
									"}, function (err, res) {\r",
									"    var jsonData = res.json();\r",
									"    for(i=0; i<jsonData.length; i++)\r",
									"    {\r",
									"        if(jsonData[i].code.includes(\"API_\"))\r",
									"        {\r",
									"            pm.variables.set(\"codePlatform\", jsonData[i].code);\r",
									"            pm.variables.set(\"name\", jsonData[i].name);\r",
									"            pm.variables.set(\"platformUrl\", jsonData[i].platformUrl);\r",
									"            pm.variables.set(\"isActive\", jsonData[i].isActive);\r",
									"            pm.variables.set(\"decimalPrecision\", 28);\r",
									"            pm.variables.set(\"discountMarginPrecision\", 8);\r",
									"            console.log(pm.variables.get(\"codePlatform\"));\r",
									"        }\r",
									"    }\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(204);\r",
									"});\r",
									"\r",
									"    var name = pm.variables.get(\"name\");\r",
									"    var nameOriginal = name.split('-');\r",
									"    pm.variables.set('nameOriginal', nameOriginal[0]);\r",
									"    console.log(\"Original Platform name: \" + nameOriginal[0])\r",
									"    var nameOriginalF = pm.variables.get('nameOriginal');\r",
									"\r",
									"    var url1 = pm.variables.get(\"baseURI\");\r",
									"    url1 = url1.concat(\"/api/Platforms/\"+pm.variables.get(\"codePlatform\"));\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: url1,\r",
									"        method: 'PATCH',\r",
									"        header: {\r",
									"            'Accept': 'application/json',\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
									"        },\r",
									"        body: {\r",
									"                mode: 'raw',\r",
									"                raw: [{\r",
									"                        \"op\": \"replace\",\r",
									"                        \"path\": \"/name\",\r",
									"                        \"value\": nameOriginalF\r",
									"                    }]\r",
									"\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"        // var jsonData = res.json();\r",
									"    \r",
									"        // pm.test(\"To check updated platform name for code: \" + pm.variables.get(\"codePlatform\"), function () {\r",
									"        //     pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\" )+ '_new');\r",
									"        // });\r",
									"\r",
									"        var url2 = pm.variables.get(\"baseURI\") + \"/api/Publications/platforms\";\r",
									"        pm.sendRequest({\r",
									"        url: url2,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'bearer ' + pm.variables.get(\"accessTokenGlobalAdminUser\")\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: {\r",
									"                                                    \r",
									"                }\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) { console.log(url + err); }\r",
									"        });\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenGlobalAdminUser}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"add\",\r\n        \"path\": \"/emailFontColor\",\r\n        \"value\": \"#4934eb\"\r\n    },\r\n    {\r\n        \"op\": \"add\",\r\n        \"path\": \"/emailPrimaryColor\",\r\n        \"value\": \"#fafafa\"\r\n    },\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/replyToEmailAddress\",\r\n        \"value\": \"do-not-reply1@liquidx.com\"\r\n    },\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/helpText\",\r\n        \"value\": \"test platform 1\"\r\n    },\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/decimalPrecision\",\r\n        \"value\": {{decimalPrecision}}\r\n    },\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/platformUrl\",\r\n        \"value\": \"{{platformUrl}}\"\r\n    },\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/name\",\r\n        \"value\": \"{{name}}-1\"\r\n    },\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/discountMarginPrecision\",\r\n        \"value\": \"{{discountMarginPrecision}}\"\r\n    },\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/dayCountConvention\",\r\n        \"value\": 365\r\n    },\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/importsEnabled\",\r\n        \"value\": true\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/api/platforms/{{codePlatform}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"api",
								"platforms",
								"{{codePlatform}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET record-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" \r",
									"if (pm.response.code == 200 && responseBody !== '') {\r",
									"    var responseJSONdata = JSON.parse(responseBody);\r",
									"    pm.test(\"To check record-types details not null: \" + responseJSONdata.length, function () {\r",
									"        for (i = 0; i < responseJSONdata.length; i++) {\r",
									"            pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
									"        }\r",
									"    });\r",
									"    pm.test(\"Validating record-types format from response body \", function () {\r",
									"        for (i = 0; i < responseJSONdata.length; i++) {\r",
									"            pm.expect(responseJSONdata[i]).to.have.all.keys('id', 'name');\r",
									"        }\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenPlatformUser}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURI}}/api/record-types",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"api",
								"record-types"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var platformCode = pm.environment.get(\"platformCode\");",
					"pm.request.headers.add({",
					"    key: \"x-platform-code\",",
					"    value: platformCode",
					"});",
					"/////////////////////////////////////////////////////////////",
					"pm.globals.set(\"APIhelper\", function loadAccessToken() {",
					"let APIhelper = {};",
					"\tlet getTokenRequest;",
					"\tAPIhelper.getAccessToken = (username1, password1,accessToken1)=> ",
					"\t{",
					"\t\t\tgetTokenRequest = {",
					"\t\t\t\turl: b2cURI,",
					"\t\t\t\tmethod: 'POST',",
					"\t\t\t\theader: \"Content-Type: application/x-www-form-urlencoded\",",
					"\t\t\t\tbody: {",
					"\t\t\t\t\tmode: 'urlencoded',",
					"\t\t\t\t\turlencoded: [",
					"\t\t\t\t\t\t{ key: 'grant_type', value: 'password' },",
					"\t\t\t\t\t\t{ key: 'username', value: username1 },",
					"\t\t\t\t\t\t{ key: 'password', value: password1 },",
					"\t\t\t\t\t\t{ key: 'scope', value: 'openid ' + audience + ' offline_access' },",
					"\t\t\t\t\t\t{ key: 'client_id', value: audience },",
					"\t\t\t\t\t\t{key:'response_type', value: 'token id_token'}",
					"",
					"\t\t\t\t\t]",
					"\t\t\t\t}",
					"\t\t\t};",
					"\t\t\tpm.sendRequest(getTokenRequest, (err, response) => {",
					"\t\t\t\tlet jsonResponse = response.json(),",
					"\t\t\t\t\taccessTokenNew = jsonResponse.access_token;",
					"\t\t\t\tconsole.log(\"Top Level- Accesstoken -\", { err, jsonResponse, accessTokenNew });",
					"\t\t\t\tif (accessTokenNew != null) {",
					"\t\t\t\t\tpm.environment.set(accessToken1, accessTokenNew);",
					"                    // console.log(\"----\"+pm.environment.get('accessToken1'));",
					"\t\t\t\t}",
					"\t\t\t});",
					"\t};",
					"\treturn APIhelper;",
					"} + '; loadAccessToken();');",
					"",
					"let uname = pm.environment.get('UserName');",
					"var SupplierUser = pm.environment.get(\"SupplierUser\");",
					"var FunderUser = pm.environment.get(\"FunderUser\");",
					"var BuyerUser = pm.environment.get(\"BuyerUser\");",
					"var ScfAdminUser = pm.environment.get(\"ScfAdminUser\");",
					"var Oen858_user = pm.environment.get(\"oen858_user\");",
					"var PlatformUser = pm.environment.get(\"platformUser\");",
					"var GlobalAdminUser = pm.environment.get(\"globalAdminUser\"); ",
					"var permissionEnforcemenToken = pm.environment.get(\"permissionEnforcemenToken\")",
					"// var PlatformUser_Other = pm.environment.get(\"platformUser_Other\");",
					"",
					"",
					"let pwd = pm.environment.get('Password');",
					"let b2cURI =  pm.environment.get(\"B2C_URI\");",
					"let audience = pm.environment.get('audience');",
					"",
					"console.log(\"iterationAuth count before ---------->\"+pm.globals.get(\"iterationAuth\"));",
					"// console.log(\"accessToken old ---------->\"+jwtOld);",
					"",
					"if(pm.globals.get(\"iterationAuth\") < 1 )",
					"{",
					"    console.log(\"in if ---------->\");",
					"",
					"//--------------- unset access token----------------------",
					"    pm.environment.unset(\"accessToken\");",
					"    pm.environment.unset(\"accessTokenSupplier\");",
					"    pm.environment.unset(\"accessTokenBuyer\");",
					"    pm.environment.unset(\"accessTokenFunder\");",
					"    pm.environment.unset(\"accessTokenScfAdmin\");",
					"    pm.environment.unset(\"accessTokenOen858\");",
					"    pm.environment.unset(\"accessTokenPlatformUser\");",
					"    pm.environment.unset(\"accessTokenGlobalAdminUser\");",
					"    pm.environment.unset(\"accessTokenMOUser\")",
					"    // pm.environment.unset(\"accessTokenPlatformUserOther\");",
					"",
					"    const helper = eval(pm.globals.get(\"APIhelper\"));  ",
					"    helper.getAccessToken(uname, pwd, 'accessToken');",
					"    helper.getAccessToken(SupplierUser, pwd, 'accessTokenSupplier');",
					"    helper.getAccessToken(FunderUser, pwd, 'accessTokenFunder');",
					"    helper.getAccessToken(BuyerUser, pwd, 'accessTokenBuyer');",
					"    helper.getAccessToken(ScfAdminUser, pwd, 'accessTokenScfAdmin');",
					"    helper.getAccessToken(Oen858_user, pwd, 'accessTokenOen858');",
					"    helper.getAccessToken(PlatformUser, pwd, 'accessTokenPlatformUser');",
					"    helper.getAccessToken(GlobalAdminUser, pwd, 'accessTokenGlobalAdminUser');",
					"    helper.getAccessToken(permissionEnforcemenToken, pwd, 'accessTokenMOUser');",
					"",
					"    // helper.getAccessToken(PlatformUser_Other, pwd, 'accessTokenPlatformUserOther');",
					"",
					"    pm.globals.set(\"iterationAuth\", parseInt(pm.globals.get(\"iterationAuth\"))+1);",
					"    console.log(\"iterationAuth count after ---------->\"+pm.globals.get(\"iterationAuth\"));",
					"}",
					"else ",
					"{ ",
					"    console.log(\"in else ---------->\");",
					"    // let jwt_decode = null;",
					"    let jwt = pm.environment.get('accessToken');",
					"    let jwt1 = pm.environment.get('accessTokenSupplier');",
					"    let jwt2 = pm.environment.get('accessTokenFunder');",
					"    let jwt3 = pm.environment.get('accessTokenScfAdmin');",
					"    let jwt4 = pm.environment.get('accessTokenBuyer');",
					"    let jwt858 = pm.environment.get('accessTokenOen858');",
					"    let jwt20 = pm.environment.get('accessTokenPlatformUser');",
					"    let jwt21 = pm.environment.get('accessTokenGlobalAdminUser');",
					"    let jwt25 = pm.environment.get('accessTokenMOUser');",
					"    ",
					"    // let jwt22 = pm.environment.get('accessTokenPlatformUserOther');",
					"",
					"    if (jwt)",
					"    {   //console.log(\"in 2nd if for valid token - new jwt ---------->\"+jwt);",
					"        jwt_payload_base64 = jwt.split('.')[1];",
					"        jwt_decode = JSON.parse(atob(jwt_payload_base64));",
					"    }",
					"    if (jwt20) {",
					"        jwt_payload_base64_20 = jwt20.split('.')[1];",
					"        jwt_decode20 = JSON.parse(atob(jwt_payload_base64_20));",
					"    } ",
					"    if (jwt21) {",
					"        jwt_payload_base64_21 = jwt21.split('.')[1];",
					"        jwt_decode21 = JSON.parse(atob(jwt_payload_base64_21));",
					"    }",
					"    // if (jwt22) {",
					"    //     jwt_payload_base64_22 = jwt22.split('.')[1];",
					"    //     jwt_decode22 = JSON.parse(atob(jwt_payload_base64_22));",
					"    // }",
					"    if (jwt1) {",
					"        var jwt_payload_base641 = jwt1.split('.')[1];",
					"        var jwt_decode1 = JSON.parse(atob(jwt_payload_base641));",
					"    }",
					"    if (jwt4) {",
					"        var jwt_payload_base64_4 = jwt4.split('.')[1];",
					"        var jwt_decode4 = JSON.parse(atob(jwt_payload_base64_4));",
					"    }",
					"    if (jwt2) {",
					"        var jwt_payload_base64_2 = jwt2.split('.')[1];",
					"        var jwt_decode2 = JSON.parse(atob(jwt_payload_base64_2));",
					"    }",
					"    if (jwt3) {",
					"        jwt_payload_base64_3 = jwt3.split('.')[1];",
					"        jwt_decode3 = JSON.parse(atob(jwt_payload_base64_3));",
					"    }",
					"    if (jwt858) {",
					"        jwt_payload_base64_858 = jwt858.split('.')[1];",
					"        jwt_decode858 = JSON.parse(atob(jwt_payload_base64_858));",
					"    }",
					"    if (jwt25) {",
					"        jwt_payload_base64_25 = jwt25.split('.')[1];",
					"        jwt_decode25 = JSON.parse(atob(jwt_payload_base64_25));",
					"    }",
					"    ",
					"    if (!jwt || (jwt_decode && Date.now() >= jwt_decode['exp'] * 1000) && pm.globals.get(\"iterationAuth\") ==1 )",
					"    {",
					"        pm.environment.unset(\"accessToken\");",
					"        console.log(\"to check expiry/new user-- set iterationAuth to 0 ---------->\");",
					"        const helper = eval(pm.globals.get(\"APIhelper\"));  ",
					"        helper.getAccessToken(uname, pwd, 'accessToken');",
					"        pm.globals.set(\"iterationAuth\", 0);",
					"    }",
					"    if (!jwt3 || (jwt_decode3 && Date.now() >= jwt_decode3['exp'] * 1000) && pm.globals.get(\"iterationAuth\") ==1)",
					"    {",
					"        pm.environment.unset(\"accessTokenScfAdmin\");",
					"        console.log(\"to check expiry/new user-- set iterationAuth to 0 ---------->\");",
					"        const helper = eval(pm.globals.get(\"APIhelper\"));  ",
					"        helper.getAccessToken(ScfAdminUser, pwd, 'accessTokenScfAdmin');",
					"        pm.globals.set(\"iterationAuth\", 0);",
					"    }    ",
					"    if (!jwt858 || (jwt_decode858 && Date.now() >= jwt_decode858['exp'] * 1000) && pm.globals.get(\"iterationAuth\") ==1)",
					"    {",
					"        pm.environment.unset(\"accessTokenOen858\");",
					"        console.log(\"to check expiry/new user-- set iterationAuth to 0 ---------->\");",
					"        const helper = eval(pm.globals.get(\"APIhelper\"));  ",
					"        helper.getAccessToken(Oen858_user, pwd, 'accessTokenOen858');",
					"        pm.globals.set(\"iterationAuth\", 0);",
					"    }    ",
					"    if (!jwt20 || (jwt_decode20 && Date.now() >= jwt_decode20['exp'] * 1000) && pm.globals.get(\"iterationAuth\") ==1)",
					"    {",
					"        pm.environment.unset(\"accessTokenPlatformUser\");",
					"        console.log(\"to check expiry/new user-- set iterationAuth to 0 ---------->\");",
					"        const helper = eval(pm.globals.get(\"APIhelper\"));  ",
					"        helper.getAccessToken(PlatformUser, pwd, 'accessTokenPlatformUser');",
					"        pm.globals.set(\"iterationAuth\", 0);",
					"    } ",
					"    if (!jwt21 || (jwt_decode21 && Date.now() >= jwt_decode21['exp'] * 1000) && pm.globals.get(\"iterationAuth\") ==1)",
					"    {",
					"        pm.environment.unset(\"accessTokenGlobalAdminUser\");",
					"        console.log(\"to check expiry/new user-- set iterationAuth to 0 ---------->\");",
					"        const helper = eval(pm.globals.get(\"APIhelper\"));  ",
					"        helper.getAccessToken(GlobalAdminUser, pwd, 'accessTokenGlobalAdminUser');",
					"        pm.globals.set(\"iterationAuth\", 0);",
					"    }   ",
					"    if (!jwt1 || (jwt_decode1 && Date.now() >= jwt_decode1['exp'] * 1000) && pm.globals.get(\"iterationAuth\") ==1)",
					"    {",
					"        pm.environment.unset(\"accessTokenSupplier\");",
					"        console.log(\"to check expiry/new user-- set iterationAuth to 0 ---------->\");",
					"        const helper = eval(pm.globals.get(\"APIhelper\"));  ",
					"        helper.getAccessToken(SupplierUser, pwd, 'accessTokenSupplier');",
					"        pm.globals.set(\"iterationAuth\", 0);",
					"    }    ",
					"    if (!jwt4 || (jwt_decode4 && Date.now() >= jwt_decode4['exp'] * 1000) && pm.globals.get(\"iterationAuth\") ==1)",
					"    {",
					"        pm.environment.unset(\"accessTokenBuyer\");",
					"        console.log(\"to check expiry/new user-- set iterationAuth to 0 ---------->\");",
					"        const helper = eval(pm.globals.get(\"APIhelper\"));  ",
					"        helper.getAccessToken(BuyerUser, pwd, 'accessTokenBuyer');",
					"        pm.globals.set(\"iterationAuth\", 0);",
					"    }    ",
					"    if (!jwt2 || (jwt_decode2 && Date.now() >= jwt_decode2['exp'] * 1000) && pm.globals.get(\"iterationAuth\") ==1)",
					"    {",
					"        pm.environment.unset(\"accessTokenFunder\");",
					"        console.log(\"to check expiry/new user-- set iterationAuth to 0 ---------->\");",
					"        const helper = eval(pm.globals.get(\"APIhelper\"));  ",
					"        helper.getAccessToken(FunderUser, pwd, 'accessTokenFunder');",
					"        pm.globals.set(\"iterationAuth\", 0);",
					"    }",
					"     if (!jwt25 || (jwt_decode25 && Date.now() >= jwt_decode25['exp'] * 1000) && pm.globals.get(\"iterationAuth\") ==1)",
					"    {",
					"        pm.environment.unset(\"accessTokenMOUser\");",
					"        console.log(\"to check expiry/new user-- set iterationAuth to 0 ---------->\");",
					"        const helper = eval(pm.globals.get(\"APIhelper\"));  ",
					"        helper.getAccessToken(permissionEnforcemenToken, pwd, 'accessTokenMOUser');",
					"        pm.globals.set(\"iterationAuth\", 0);",
					"    }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "count",
			"value": 0
		},
		{
			"key": "productCount",
			"value": 0
		},
		{
			"key": "permissioncount",
			"value": 0
		},
		{
			"key": "pa_count",
			"value": "0"
		},
		{
			"key": "cmp_counter",
			"value": "0"
		},
		{
			"key": "cmp_count",
			"value": "0"
		},
		{
			"key": "code",
			"value": "SCF"
		},
		{
			"key": "codes",
			"value": "SCF,AR,INS"
		},
		{
			"key": "roleId",
			"value": "3"
		},
		{
			"key": "combinationCtr",
			"value": "0"
		},
		{
			"key": "cpid",
			"value": ""
		},
		{
			"key": "crid",
			"value": ""
		},
		{
			"key": "crolename",
			"value": ""
		},
		{
			"key": "ccode",
			"value": ""
		},
		{
			"key": "tPermission",
			"value": ""
		},
		{
			"key": "roleId_count",
			"value": "0"
		},
		{
			"key": "rolename_count",
			"value": "0"
		},
		{
			"key": "participantId_count",
			"value": "0"
		},
		{
			"key": "productCode_count",
			"value": "0"
		},
		{
			"key": "permissionname_count",
			"value": "0"
		},
		{
			"key": "totalParticipantIdCount",
			"value": "2"
		},
		{
			"key": "totalRoleIdCount",
			"value": "2"
		},
		{
			"key": "totalRoleNameCount",
			"value": "2"
		},
		{
			"key": "totaltotalProductCodeCount",
			"value": "2"
		},
		{
			"key": "totalPermissionName",
			"value": "2"
		},
		{
			"key": "totalProductCode",
			"value": "2"
		},
		{
			"key": "totalCombinationCount",
			"value": "11"
		},
		{
			"key": "roldeId",
			"value": 9
		},
		{
			"key": "roleName",
			"value": "Accounts Receivable - Funder"
		},
		{
			"key": "rolecount",
			"value": "0"
		},
		{
			"key": "role_names",
			"value": "Supplier,Buyer,Funder"
		},
		{
			"key": "rname",
			"value": ""
		},
		{
			"key": "roleNameCount",
			"value": ""
		},
		{
			"key": "productCount1",
			"value": "0"
		},
		{
			"key": "productCount2",
			"value": "0"
		},
		{
			"key": "count1",
			"value": "0"
		},
		{
			"key": "count2",
			"value": "0"
		},
		{
			"key": "cmp_counterAR",
			"value": "0"
		},
		{
			"key": "cmp_countAR",
			"value": "0"
		},
		{
			"key": "prodcount",
			"value": "0"
		},
		{
			"key": "prod_count",
			"value": "0"
		},
		{
			"key": "resourceID",
			"value": ""
		}
	]
}